(self.webpackChunkscrollytelling_template=self.webpackChunkscrollytelling_template||[]).push([[179],{86702:(e,t,n)=>{"use strict";const r=JSON.parse('{"E":"<section id=\\"vizSection1_0\\" class=\\"viz-section full-page\\"><div class=\\"steps display-none\\"><section class=\\"display-none\\"><p>Hydro-Québec</p></section></div><div class=\\"viz\\" id=\\"viz\\"><div id=\\"vizSection1_0_0\\" class=\\"iframeContainer game-area\\"></div></div></section>"}');var a=n(40207),c=n(67294),o=n(25935);function i(e){var t=c.createElement("section",{className:"intro-section ".concat(e.classes)},c.createElement("h5",{className:"overTitle"},e.amorce),c.createElement("h1",null,(0,o.ZP)(e.optionData.title)),c.createElement("address",null,c.createElement("div",{className:"date"})));return e.background?c.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},t):t}var l,u=n(45697),s=n.n(u);function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}s().string.isRequired,s().string.isRequired,s().oneOf(["eager","lazy"]);var p="intro-titre",d="pleine-page-titre",f="texte-classique",v="viz-section",g="centré",h=(m(l={titre:"Titre",auteurs:"Auteurs",date:"Date"},"date","Date"),m(l,"urls","LienAuteurs"),m(l,"lienfichiersource","LienFichierSource"),l);n(93162);var b=n(38682);function E(e){try{JSON.parse(e)}catch(e){return!1}return!0}function y(e){return Array.from(e.split(";")).join(" ")}function w(e){return{title:e[0][h.titre],authors:e[0][h.auteurs],urls:e[0][h.urls],date:e[0][h.date]}}n(9208);n(83731).accessToken="pk.eyJ1IjoibGVkZXZvaXIiLCJhIjoiY2p2bW81dHU2MWV1cTRhcXIzaXZqMGYxciJ9.WrIF8o69aR_TstDFu6Qyag",n(6899);var S=n(20745);function P(e){var t=function(e){return Math.abs(e)>1?"".concat(e,"&nbsp;jetons"):"".concat(e,"&nbsp;jeton")};return(0,c.useEffect)((function(){b.Ys(".gauges").selectAll(".gauge").nodes().forEach((function(t){var n=50;"dollars"===b.Ys(t).attr("id")&&(n=e.dollars);var r=n>0?Math.round(e.committed/50*100):0,a=n>0?Math.round(n/50*100):0;b.Ys(t).select(".gaugeColorHolder").select(".committed").style("width","".concat(r,"%")),b.Ys(t).select(".gaugeColor").style("width","".concat(a,"%"))}))})),c.createElement("div",{className:"gauges"},c.createElement("div",{id:"dollars",className:"gauge dollarGauge"},c.createElement("div",{className:"gaugeColorHolder ".concat(e.dollars<0?"red":"")},c.createElement("div",{className:"gaugeColor ".concat(e.dollars<0?"red":e.gaugeExplain?"lightblue":"blue")}),0!=e.committed?c.createElement("div",{className:"committed ".concat(e.dollars<0?"red":e.gaugeExplain?"lightblue":"blue")}):"",e.mission?c.createElement("div",{className:"value arrowGauge"},c.createElement("div",{className:"labelHolder"},c.createElement("p",null,c.createElement("b",null,"Budget total"))),c.createElement("div",{className:"arrow"},c.createElement("div",{className:"rect"}),c.createElement("div",{className:"rect-1"}),c.createElement("div",{className:"rect-2"})),c.createElement("div",{className:"labelHolder",style:{textAlign:"right"}},c.createElement("p",{style:{paddingRight:"7px"}},c.createElement("b",null,(0,o.ZP)(t(e.dollars)))))):e.gaugeExplain?c.createElement("div",{className:"value gaugeExplain"},c.createElement("div",{className:"budgetStamp"},c.createElement("p",null,c.createElement("b",null,"Budget"))),c.createElement("div",{className:"labelHolder"}),c.createElement("div",{className:"labelHolder",style:{textAlign:"right"}},c.createElement("p",{style:{paddingRight:"7px"}},c.createElement("b",null,(0,o.ZP)(t(e.dollars-25)))))):c.createElement("div",{className:"value basicGauge"},c.createElement("div",{className:"labelHolder"},c.createElement("p",null,c.createElement("b",null,"Budget"))),c.createElement("div",{className:"labelHolder",style:{textAlign:"right"}},c.createElement("p",{style:{paddingRight:"7px"}},c.createElement("b",null,(0,o.ZP)(t(e.dollars)))))))))}function N(e,t,n,r,a,c,o){try{var i=e[c](o),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function x(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){N(c,r,a,o,i,"next",e)}function i(e){N(c,r,a,o,i,"throw",e)}o(void 0)}))}}function I(e){var t=(0,c.useCallback)(x(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.gameStart();case 1:case"end":return t.stop()}}),t)}))));return c.createElement("div",{className:"gameBox transparent"},c.createElement("div",{className:"introBox"},e.introElem),c.createElement("div",{className:"userBox"},c.createElement("div",{className:"startbutton",onClick:t},c.createElement("p",null,"Commencer le jeu"))))}function k(e){return(0,c.useEffect)((function(){e.transition&&setTimeout((function(){b.Ys(".monitoring_value").transition().duration(1e3).style("opacity",1)}),200)}),[]),c.createElement("div",{className:"monitoring"},c.createElement("div",{className:"monitoring_content"},c.createElement("div",{className:"column"},c.createElement("div",{className:"monitoring_value ".concat(e.transition?"transition":"")},c.createElement(P,{rightarrows:e.rightarrows,gaugeExplain:e.gaugeExplain,mission:e.mission,dollars:e.dollars,committed:e.committed})))),e.terawatts||0===e.terawatts?c.createElement("div",{className:"monitoring_content"},c.createElement("div",{className:"column"},c.createElement("div",{className:"monitoring_header"},c.createElement("h5",null,c.createElement("b",null,"Électricité produite")," • ",e.terawatts," TWh")))):c.createElement("div",null))}function C(e){return e.split("_").slice(1).map((function(e){return parseInt(e)}))}n(97762);var T=function(e){return 0===parseInt(e)||parseInt(e)<0?"":"ENCAISSER "};function D(e,t,n,r,a,c,o){try{var i=e[c](o),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function _(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){D(c,r,a,o,i,"next",e)}function i(e){D(c,r,a,o,i,"throw",e)}o(void 0)}))}}function O(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function j(e){var t,n,r=(t=(0,c.useState)(null),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(t,n)||function(e,t){if(e){if("string"==typeof e)return O(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?O(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[0],i=r[1];(0,c.useEffect)((function(){}),[]),(0,c.useEffect)((function(){var e=b.td_(".choicebutton");e.select(".butn").classed("selected",!1),a?(b.Ys(a.obj).select(".butn").classed("selected",!0),e.select(".butn").style("opacity","0.5"),b.Ys(a.obj).select(".butn").style("opacity","1")):e.select(".butn").style("opacity","1")}),[a]);var l=(0,c.useCallback)(function(){var t=_(regeneratorRuntime.mark((function t(n,r,a){var c;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:(c=String(e.curPrompt.Trigger_next).split(";")).length>1?e.changePrompt(String(c[a]).replace(/(\r\n|\n|\r)/gm,"")):e.changePrompt(String(c[0]).replace(/(\r\n|\n|\r)/gm,"")),"Q2"===e.curPrompt.ID&&0===a&&e.updateMemoryObj("investedModernization",!0),"Q6"===e.curPrompt.ID&&0===a&&e.updateMemoryObj("acceptedChurchillFallsDeal",!0),e.updateDollars(parseInt(n)),e.updatePerformance(r),i(null);case 7:case"end":return t.stop()}}),t)})));return function(e,n,r){return t.apply(this,arguments)}}()),u=(0,c.useCallback)(_(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&e.changePrompt(e.curIndex-1),i(null);case 2:case"end":return t.stop()}}),t)}))));return c.createElement("div",{className:"choices",rightarrows:"Q5"===e.curPrompt.ID?"true":"false"},c.createElement("div",{className:"row"},e.choices.map((function(t,n){var r,l=e.choices_values[n].split("_")[0],u=C(e.choices_values[n]);return c.createElement("div",{className:"choicebutton",key:n,onClick:function(e){!function(e,t,n,r){i({obj:e.target,cost:parseInt(t),performance:n,index:r})}(e,l,u,n)}},c.createElement("div",{id:n,className:"butn"},c.createElement("div",{className:"holder icon"},c.createElement("img",{src:a&&a.index===n?"./assets/img/Off.svg":"./assets/img/On.svg"})),c.createElement("div",{className:"holder label"},c.createElement("h4",null,(0,o.ZP)(t)),e.choices_values.map((function(e,t){return parseInt(e.split("_")[0])})).filter((function(e){return!Number.isNaN(e)})).every((function(e){return 0===e}))?"":c.createElement("p",null,(0,o.ZP)((r=l,Math.abs(r)>1?"".concat(T(r)).concat(Math.abs(r),"&nbsp;JETONS"):"".concat(T(r)).concat(Math.abs(r),"&nbsp;JETON"))))),c.createElement("div",{className:"arrowsChoices"},c.createElement("span",null,"⟶"))))}))),c.createElement(k,{showTWh:!1,dollars:a&&a.hasOwnProperty("cost")?parseInt(e.gauges.props.dollars)+parseInt(a.cost):e.gauges.props.dollars,committed:a&&a.hasOwnProperty("cost")&&parseInt(a.cost)<0?Math.abs(a.cost):0,performance:e.gauges.props.performance}),c.createElement("div",{className:"row"},c.createElement("div",{className:"column"},e.curIndex>0?c.createElement("div",{className:"actionbutton prev",onClick:u},c.createElement("div",{className:"butn"},c.createElement("p",null,"Previous"))):c.createElement("div",null)),c.createElement("div",{className:"column"},c.createElement("div",{className:"actionbutton next ".concat(a?"":"disabled"),onClick:function(){a?l(a.cost,a.performance,a.index):console.log("")}},c.createElement("div",{className:"butn"},c.createElement("p",null,"Poursuivre"))))))}function A(e,t,n,r,a,c,o){try{var i=e[c](o),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function R(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){A(c,r,a,o,i,"next",e)}function i(e){A(c,r,a,o,i,"throw",e)}o(void 0)}))}}function M(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(e,t)||B(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(e,t){if(e){if("string"==typeof e)return z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?z(e,t):void 0}}function z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Y(e){var t=M((0,c.useState)([]),2),n=t[0],r=t[1];(0,c.useEffect)((function(){a()}),[]),(0,c.useEffect)((function(){}),[n]);var a=function(){r(e.choices.map((function(e){return null})))},i=function(e){var t=e.reduce((function(e,t){return t&&(e+=t.cost),e}),0),n=[0,0,0];return e.forEach((function(e,t){e&&(n=n.map((function(t,n){return parseInt(t)+parseInt(e.performance[n])})))})),[t,n]},l=(0,c.useCallback)(function(){var t=R(regeneratorRuntime.mark((function t(n){var r,c,o,l,u;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=e.curPrompt.Trigger_next,e.changePrompt(s(r)),c=i(n),o=M(c,2),l=o[0],u=o[1],e.updateDollars(parseInt(l)),e.updatePerformance(u),a();case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),u=(0,c.useCallback)(R(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&e.changePrompt(e.curIndex-1),a();case 2:case"end":return t.stop()}}),t)})))),s=function(e){var t=String(e).split("_"),r=String(t[0]).split(";"),a=n.filter((function(e){return null!==e}));return(t.length>1&&a.length>0?a.length>1?String(t[1]):String(r[n.indexOf(a[0])]):String(t[0])).replace(/(\r\n|\n|\r)/gm,"")};return c.createElement("div",{className:"choices"},c.createElement("div",{className:"row"},e.choices.map((function(t,a){var i,l=e.choices_values[a].split("_")[0],u=C(e.choices_values[a]);return c.createElement("div",{className:"selectionbutton",key:a,onClick:function(e){!function(e,t,a,c){var o,i=function(e){if(Array.isArray(e))return z(e)}(o=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||B(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();n[t]?i[t]=null:i[t]={obj:e.target,cost:parseInt(a),performance:c},r(i)}(e,a,l,u)}},c.createElement("div",{id:a,className:"butn ".concat(n[a]?"selected":"")},c.createElement("div",{className:"holder icon ".concat(n[a]?"selected":"")},c.createElement("img",{src:n[a]?"assets/img/Plus-Off.svg":"assets/img/Plus-On.svg"})),c.createElement("div",{className:"holder label"},c.createElement("h4",null,(0,o.ZP)(t)),e.choices_values.map((function(e,t){return parseInt(e.split("_")[0])})).filter((function(e){return!Number.isNaN(e)})).every((function(e){return 0===e}))?"":c.createElement("p",null,(0,o.ZP)((i=l,Math.abs(i)>1?"".concat(T(i)).concat(Math.abs(i),"&nbsp;JETONS"):"".concat(T(i)).concat(Math.abs(i),"&nbsp;JETON")))))))}))),c.createElement(k,{showTWh:!1,dollars:n&&n.length>0?parseInt(e.gauges.props.dollars)+parseInt(i(n)[0]):e.gauges.props.dollars,committed:n&&n.length>0&&parseInt(i(n)[0])<0?Math.abs(parseInt(i(n)[0])):0}),c.createElement("div",{className:"row"},c.createElement("div",{className:"column"},e.curIndex>0?c.createElement("div",{className:"actionbutton prev",onClick:u},c.createElement("div",{className:"butn"},c.createElement("p",null,"Previous"))):c.createElement("div",null)),c.createElement("div",{className:"column"},c.createElement("div",{className:"actionbutton next ".concat(n?"":"disabled"),onClick:function(){n?l(n):console.log("")}},c.createElement("div",{className:"butn"},c.createElement("p",null,"Poursuivre"))))))}function L(e,t,n,r,a,c,o){try{var i=e[c](o),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function H(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){L(c,r,a,o,i,"next",e)}function i(e){L(c,r,a,o,i,"throw",e)}o(void 0)}))}}function V(e){var t=(0,c.useCallback)(H(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&e.changePrompt(e.curIndex-1);case 1:case"end":return t.stop()}}),t)})))),n=(0,c.useCallback)(H(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.curPrompt.Trigger_next,e.changePrompt(n);case 2:case"end":return t.stop()}}),t)})))),r=(0,c.useCallback)(H(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.gameReset();case 1:case"end":return t.stop()}}),t)}))));return c.createElement("div",{className:"printprompt"},""!==e.message?c.createElement("div",{className:"message"},c.createElement("p",null,e.message)):"","1"===e.curIndex?c.createElement(k,{mission:!0,transition:!0,showTWh:!1,dollars:e.gauges.props.dollars,committed:0,performance:e.gauges.props.performance}):"",c.createElement("div",{className:"actionbutton prev",onClick:t},c.createElement("div",{className:"butn"},c.createElement("p",null,"Previous"))),"STARTOVER"===e.curPrompt.Trigger_next?c.createElement("div",{className:"actionbutton next",onClick:r},c.createElement("div",{className:"butn"},c.createElement("p",null,"Recommencer"))):c.createElement("div",{className:"actionbutton next",onClick:n},c.createElement("div",{className:"butn"},c.createElement("p",null,"Poursuivre"))))}function Z(e){return function(e){if(Array.isArray(e))return X(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||W(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function U(e,t,n,r,a,c,o){try{var i=e[c](o),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function q(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){U(c,r,a,o,i,"next",e)}function i(e){U(c,r,a,o,i,"throw",e)}o(void 0)}))}}function F(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(e,t)||W(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function W(e,t){if(e){if("string"==typeof e)return X(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?X(e,t):void 0}}function X(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Q(e){var t=F((0,c.useState)(0),2),n=t[0],r=t[1],a=F((0,c.useState)(0),2),i=a[0],l=a[1],u=F((0,c.useState)([0,0]),2),s=u[0],m=u[1],p=F((0,c.useState)([]),2),d=p[0],f=p[1],v=F((0,c.useState)([]),2),g=v[0],h=v[1],b="Q1"===e.curPrompt.ID?25:50;(0,c.useEffect)((function(){var e=P(),t=e.map((function(){return 0})),n=e.map((function(e){return Math.abs(e.unitValue)}));f(t),h(n)}),[]),(0,c.useEffect)((function(){var e=d.reduce((function(e,t,n){return P()[n],e+Math.abs(t)}),0),t=d.reduce((function(e,t,n){var r=P()[n];return e+Math.round(Math.abs(t/r.unitValue)*r.unitTWhvalue)}),0),n=[0,0];d.forEach((function(e,t){var r=P()[t];n=n.map((function(t,n){return 0===n?t+Math.abs(e/r.unitValue)*r.unitEnvirovalue:1===n?t+Math.abs(e/r.unitValue)*r.unitPopuvalue:void 0}))})),r(e),l(t),m(n)}),[d]);var E=(0,c.useCallback)(q(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&e.changePrompt(e.curIndex-1);case 1:case"end":return t.stop()}}),t)})))),y=(0,c.useCallback)(q(regeneratorRuntime.mark((function t(){var r,a,c;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=String(e.curPrompt.Trigger_next).split("_"),a=String(r[0]).split(";"),"Q1"===e.curPrompt.ID&&d[0]>0?e.updateMemoryObj("builtDam",!0):d[0]>0&&e.updateMemoryObj("builtSecondDam",!0),d[2]>0?(e.updateMemoryObj("nuclearBuiltNumber",parseInt(e.memoryObj.nuclearBuiltNumber)+parseInt(d[2]/g[2])),e.changePrompt(String(a[2]).replace(/(\r\n|\n|\r)/gm,""))):1==a.length?e.changePrompt(String(a).replace(/(\r\n|\n|\r)/gm,"")):a.length>1&&(w(d)?e.changePrompt(I(a,r[1])):(c=d.reduce((function(e,t,n,r){return t>r[e]?n:e}),0),e.changePrompt(String(a[c]).replace(/(\r\n|\n|\r)/gm,"")))),e.updateDollars(-n),e.updatePerformance([i].concat(s));case 6:case"end":return t.stop()}}),t)})))),w=function(e){return new Set(e).size!==e.length},S=function(e,t){var n=t.split("_");return{name:e,unitValue:parseInt(n[0]),unitTWhvalue:parseInt(n[1]),unitEnvirovalue:parseInt(n[2]),unitPopuvalue:parseInt(n[3])}},P=function(){return e.choices.map((function(t,n){return S(t,e.choices_values[n])}))},N=function(e){var t=P()[e],r=[!1,!1];return 0===Math.abs(d[e])&&(r[0]=!0),n+parseInt(Math.abs(t.unitValue))>b&&(r[1]=!0),r},x=function(e,t,n,r){var a,c,o=Z(d);o[t]+n*g[t]>=0&&(n>0?(a=n*g[t],c=0,d.forEach((function(e,t){c+=e})),c+a>b||(o[t]=o[t]+n*g[t])):o[t]=o[t]+n*g[t],f(o))},I=function(e,t){var n=Math.max.apply(Math,Z(d)),r=[];return d.forEach((function(e,t){return e===n?r.push(t):null})),(r.length>1?r.includes(0)?String(e[0]):r.includes(1)?String(e[1]):String(t):String(e[r[0]])).replace(/(\r\n|\n|\r)/gm,"")};return c.createElement("div",{className:"repartition"},c.createElement("div",{className:"optionZone"},e.choices.map((function(t,n){return S(t,e.choices_values[n])})).map((function(e,t){return c.createElement("div",{className:"optionUnit",key:t},c.createElement("div",{className:"selectorZone"},c.createElement("div",{className:"division minusZone ".concat(N(t)[0]?"disabled":""),onClick:function(e){return x(0,t,-1)}},c.createElement("h3",null,"-")),c.createElement("div",{className:"division centralZone"},void 0===d[t]||0===d[t]?c.createElement("img",{src:"assets/img/".concat((r=t,["Hydro.svg","Eolien.svg","Nucleaire.svg","Solaire.svg","Modernisation.svg"][r]))}):c.createElement("h3",null,d[t])),c.createElement("div",{className:"division plusZone ".concat(N(t)[1]?"disabled":""),onClick:function(e){return x(0,t,1)}},c.createElement("h3",null,"+"))),c.createElement("div",{className:"textZone"},c.createElement("h3",null,e.name),c.createElement("div",{className:"inlinetext"},c.createElement("p",null,(0,o.ZP)((n=e.unitValue,Math.abs(n)>1?"".concat(Math.abs(n),"&nbsp;jetons"):"".concat(Math.abs(n),"&nbsp;jeton")))," • ",e.unitTWhvalue," TWh"))));var n,r}))),c.createElement(k,{gaugeExplain:"Q1"===e.curPrompt.ID,showTWh:!0,dollars:e.gauges.props.dollars-n,committed:n,terawatts:i}),e.curIndex>0?c.createElement("div",{className:"actionbutton prev",onClick:E},c.createElement("div",{className:"butn"},c.createElement("p",null,"Previous"))):c.createElement("div",null),c.createElement("div",{className:"actionbutton next ".concat(n>0?"":"disabled"),onClick:y},c.createElement("div",{className:"butn"},c.createElement("p",null,"Poursuivre"))))}var J=n(83290);function G(e,t,n,r,a,c,o){try{var i=e[c](o),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function $(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){G(c,r,a,o,i,"next",e)}function i(e){G(c,r,a,o,i,"throw",e)}o(void 0)}))}}function K(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ee(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ee(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ee(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function te(e){var t=K((0,c.useState)(null),2),n=t[0],r=t[1];(0,c.useEffect)((function(){i()}),[]),(0,c.useEffect)((function(){n?b.Ys(".popUp-bg").style("display","unset"):b.Ys(".popUp-bg").style("display","none")}),[n]);var a=function(e,t){b.Ys(e).style("cursor",t?"pointer":null)},o=(0,J.Z)().attr("class","d3-tip adjusted").direction("n").html((function(e){return"\n                  <h4>".concat(e.title,"</h4>\n                  <p>").concat(e.supp_text,"</p>\n                  ")})),i=function(){Promise.all([b.LsS(e.map[0]),b.LsS(e.map[1])]).then((function(t){var n=K(t,2),r=n[0],c=n[1];b.Ys("#bg-map").node().append(r.documentElement),b.Ys("#on-icons").node().append(c.documentElement);var i=b.Ys("#on-icons").select("svg");i.call(o),b.Ys(".gameScreen").node().appendChild(b.Ys(".d3-tip").node());var u=i.select("#Icone-On").selectAll("g"),s=String(e.curPrompt.Choix_insecables).split(":"),m=String(e.message).split(";");b.Ys(".gameBox").on("click",(function(){o.hide()})),u.nodes().reverse().map((function(e,t){var n={title:s[t],supp_text:m[t]};b.Ys(e).on("click",(function(t,r,a){t.stopPropagation(),o.show(n,e),l(t.target.parentElement,!1),o.style("pointer-events","stroke")})).on("mouseover",(function(e,t,n){a(e.target.parentElement,!0),l(e.target.parentElement,!1)})).on("mouseout",(function(e,t,n){a(e.target.parentElement,!1),l(e.target.parentElement,!0),window.innerWidth<576&&o.hide()}))}))}))},l=function(e,t){!1===t?b.Ys(e).style("opacity",0):b.Ys(e).style("opacity",1)},u=(0,c.useCallback)($(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&e.changePrompt(e.curIndex-1);case 1:case"end":return t.stop()}}),t)})))),s=(0,c.useCallback)($(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.curPrompt.Trigger_next,b.Ys(".gameScreen").select(".d3-tip").remove(),e.changePrompt(n);case 3:case"end":return t.stop()}}),t)}))));return c.createElement("div",{className:"printprompt mapnavigator"},c.createElement("div",{className:"popUp-bg"},n?c.createElement("div",{className:"popUp-box"},c.createElement("h4",null,parse(n.title)),c.createElement("p",null,parse(n.supp_text)),c.createElement("div",{className:"actionbutton",onClick:function(){return r(null)}},c.createElement("div",{className:"butn"},c.createElement("p",null,"Fermer")))):c.createElement("div",null)),c.createElement("div",{className:"mapHolder"},c.createElement("div",{className:"superposedMap"},c.createElement("div",{id:"bg-map",className:"map noClick"}),c.createElement("div",{id:"on-icons",className:"map"}))),c.createElement("div",{className:"actionbutton prev",onClick:u},c.createElement("div",{className:"butn"},c.createElement("p",null,"Previous"))),c.createElement("div",{className:"actionbutton next",onClick:s},c.createElement("div",{className:"butn"},c.createElement("p",null,"Suivant"))))}function ne(e,t,n,r,a,c,o){try{var i=e[c](o),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function re(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){ne(c,r,a,o,i,"next",e)}function i(e){ne(c,r,a,o,i,"throw",e)}o(void 0)}))}}function ae(e){(0,c.useEffect)((function(){}),[]);var t,n,r,a,i,l,u,s,m,p,d,f,v=(0,c.useCallback)(re(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.curPrompt.Trigger_next,e.changePrompt(n);case 2:case"end":return t.stop()}}),t)}))));return c.createElement("div",{className:"bilanContent"},c.createElement("div",{className:"updatableText"},"B1"===e.curPrompt.ID?function(){var t=e.curPrompt.Texte.split(";"),n=e.curPrompt.Texte_Supp.split(";"),r=[],a=e.memoryObj.builtDam?9:0,c=parseInt(e.performance[0])-a,o=parseInt(e.gauges.props.dollars),i=t[0].replace("*newProd*",c+"&nbsp;TWh").replace("*augmentediminue*",c<0?"diminué":"augmenté").replace("*suffisanteinsuffisante*",c<10?"insuffisante":"suffisante");if(r.push(i),e.memoryObj.builtDam){var l=n[0].split(":")[1].replace("*damTWh*",9);r.push(l)}if(o<15){var u=n[1].split(":")[1];r.push(u)}if(parseInt(e.performance[1])<0){var s=n[2].split(":")[1];r.push(s)}if(parseInt(e.performance[2])<0){var m=n[3].split(":")[1];r.push(m)}return r}().map((function(e,t){return c.createElement("p",{key:t},(0,o.ZP)(e))})):(i=[],e.curPrompt.Texte.split(";"),l=e.finalBilanData,u=e.memoryObj.builtDam?9:0,s=e.memoryObj.builtSecondDam?9:0,m=parseInt(e.performance[0])-s-u,p=parseInt(e.gauges.props.dollars),d=parseInt(e.performance[1]),f=parseInt(e.performance[2]),t=(t=m>=25&&d>0&&e.memoryObj.acceptedChurchillFallsDeal?l[0].print:m>=25&&d>0&&!e.memoryObj.acceptedChurchillFallsDeal?l[1].print:m<25&&d>0?l[2].print:m>=25&&d<=0&&e.memoryObj.acceptedChurchillFallsDeal?l[3].print:m>=25&&d<=0&&!e.memoryObj.acceptedChurchillFallsDeal?l[4].print:l[5].print).replace("*augmentediminue*",m<0?"diminué":"augmenté").replace("*newProd*",m+"&nbsp;TWh"),i.push(t),(e.memoryObj.builtDam||e.memoryObj.builtSecondDam)&&(e.memoryObj.builtDam&&e.memoryObj.builtSecondDam?n=l[9].print:e.memoryObj.builtDam?n=l[7].print:e.memoryObj.builtSecondDam&&(n=l[8].print),i.push(n)),r=p>=5?l[11].print:l[12].print,i.push(r),a=f>=4?l[14].print:f>=-2&&f<4?l[15].print:l[16].print,i.push(a),i).map((function(e,t){return c.createElement("p",{key:t},(0,o.ZP)(e))}))),c.createElement("div",{className:"actionbutton next",onClick:v},c.createElement("div",{className:"butn"},c.createElement("p",null,"Poursuivre"))))}function ce(e,t,n,r,a,c,o){try{var i=e[c](o),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function oe(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){ce(c,r,a,o,i,"next",e)}function i(e){ce(c,r,a,o,i,"throw",e)}o(void 0)}))}}function ie(e){var t=(0,c.useCallback)(oe(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.gameReset();case 1:case"end":return t.stop()}}),t)}))));return c.createElement("div",{className:"promptBox"},c.createElement("div",{className:"header"},c.createElement("div",{className:"surtitre"},c.createElement("h4",null,"Fin du jeu")),c.createElement("div",{className:"question"},c.createElement("p",null,"Le CA d'Hydro-Québec vote à l'unanimité pour vous démettre de vos fonctions.","".concat(e.raison),c.createElement("br",null),c.createElement("br",null),"Tentez votre chance de nouveau."))),c.createElement("div",{className:"actionSection"},c.createElement("div",{className:"actionbutton next",onClick:t},c.createElement("div",{className:"butn"},c.createElement("p",null,"Recommencer")))))}function le(e,t,n,r,a,c,o){try{var i=e[c](o),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function ue(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){le(c,r,a,o,i,"next",e)}function i(e){le(c,r,a,o,i,"throw",e)}o(void 0)}))}}function se(e){var t=(0,c.useCallback)(ue(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&e.changePrompt(e.curIndex-1);case 1:case"end":return t.stop()}}),t)})))),n=(0,c.useCallback)(function(){var t=ue(regeneratorRuntime.mark((function t(n,r){var a;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:a=e.curPrompt.Trigger_next,e.changePrompt(a),e.updateDollars(parseInt(n)),e.updatePerformance(r);case 4:case"end":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}()),r=function(e){var t=String(e).split("_");return{cost:t[0],performance:t.splice(1)}};return c.createElement("div",{className:"printprompt"},c.createElement("div",{className:"message"},c.createElement("p",null,(0,o.ZP)(e.choices[e.whichEventHappens]))),c.createElement("div",{className:"actionbutton prev",onClick:t},c.createElement("div",{className:"butn"},c.createElement("p",null,"Previous"))),c.createElement("div",{className:"actionbutton next",onClick:function(){return n(r(e.choices_values[e.whichEventHappens]).cost,r(e.choices_values[e.whichEventHappens]).performance)}},c.createElement("div",{className:"butn"},c.createElement("p",null,"Poursuivre"))))}function me(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?me(Object(n),!0).forEach((function(t){de(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):me(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function de(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function fe(e,t,n,r,a,c,o){try{var i=e[c](o),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function ve(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){fe(c,r,a,o,i,"next",e)}function i(e){fe(c,r,a,o,i,"throw",e)}o(void 0)}))}}function ge(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function he(e){var t,n,r=(t=(0,c.useState)({investedModernization:!1,builtDam:!1,builtSecondDam:!1,acceptedChurchillFallsDeal:!1,nuclearBuiltNumber:0}),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(t,n)||function(e,t){if(e){if("string"==typeof e)return ge(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ge(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[0],i=r[1];(0,c.useEffect)((function(){a.nuclearBuiltNumber>1&&e.gameEnd()}),[a]);var l,u=(0,c.useCallback)(ve(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:i({investedModernization:!1,builtDam:!1,builtSecondDam:!1,acceptedChurchillFallsDeal:!1,nuclearBuiltNumber:0}),e.gameReset();case 2:case"end":return t.stop()}}),t)})))),s=(0,c.useCallback)(function(){var t=ve(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.changePrompt(n);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),m=(0,c.useCallback)(function(){var t=ve(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:Number.isInteger(n)&&e.updateDollars(n);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),p=(0,c.useCallback)(function(){var t=ve(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.updatePerformance(n);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),d=(0,c.useCallback)(function(){var e=ve(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(r=pe({},a))[t]=n,i(r);case 3:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()),f=function(t){switch(t){case"Repartition":return c.createElement(Q,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix_insecables).split(":"),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),changePrompt:s,curIndex:e.curIndex,updateDollars:m,updatePerformance:p,memoryObj:a,updateMemoryObj:d,gauges:e.gauges});case"Carte":return c.createElement(te,{curPrompt:e.curPrompt,message:String(e.curPrompt.Texte_Supp),changePrompt:s,curIndex:e.curIndex,map:"Q1-1"===e.curIndex?["assets/img/Carte-Hydro.svg","assets/img/Carte-Hydro-icone-on.svg"]:["assets/img/Carte-Eolien.svg","assets/img/Carte-Eolien-icone-on.svg"]});case"texteBoutonSimple":return c.createElement(V,{curPrompt:e.curPrompt,message:String(e.curPrompt.Texte_Supp),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),changePrompt:s,curIndex:e.curIndex,gauges:e.gauges,gameReset:u});case"ChoixReponse":return c.createElement(j,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix_insecables).split(":"),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),changePrompt:s,curIndex:e.curIndex,updateDollars:m,updatePerformance:p,updateMemoryObj:d,gauges:e.gauges});case"Catastrophe":return c.createElement(se,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix_insecables).split(":"),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),whichEventHappens:a.investedModernization?1:0,changePrompt:s,curIndex:e.curIndex,updateDollars:m,updatePerformance:p});case"MultiSelection":return c.createElement(Y,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix_insecables).split(":"),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),changePrompt:s,curIndex:e.curIndex,updateDollars:m,updatePerformance:p,gauges:e.gauges});case"Bilan":return c.createElement(ae,{curPrompt:e.curPrompt,curIndex:e.curIndex,changePrompt:s,updateDollars:m,updatePerformance:p,performance:e.performance,memoryObj:a,gauges:e.gauges,finalBilanData:e.finalBilanData});default:return c.createElement(j,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix_insecables).split(":"),changePrompt:s,curIndex:e.curIndex})}};return!0===e.endGame?c.createElement("div",{className:"gameBox"},c.createElement(ie,{raison:(l=[],a.nuclearBuiltNumber>1?l.push(" En choisissant de réinvestir dans l'énergie nucléaire, votre crédibilité pour paver la voie vers la carboneutralité de la province a été grandement affectée."):e.gauges.props.dollars<0?l.push(" Vous avez vidé les coffres de la société d'État."):e.performance[1]<-9?l.push(" Votre vision va à l'encontre de l'objectif de carboneutralité du Québec."):e.performance[2]<-9&&l.push(" La population conteste votre vision pour le futur énergétique du Québec."),l),gameReset:u})):c.createElement("div",{className:"gameBox"},"Bilan"===e.curPrompt.Type?c.createElement("div",{className:"promptBox bilan"},c.createElement("div",{className:"header"},c.createElement("div",{className:"massiveTitle"},c.createElement("h2",null,(0,o.ZP)(e.curPrompt.Sujet)))),c.createElement("div",{className:"separator"}),f(e.curPrompt.Type)):c.createElement("div",{className:"promptBox"},c.createElement("div",{className:"header"},c.createElement("div",{className:"surtitre"},c.createElement("h4",null,(0,o.ZP)(e.curPrompt.Sujet))),c.createElement("div",{className:"question"},c.createElement("p",null,(0,o.ZP)(e.curPrompt.Texte)))),f(e.curPrompt.Type)))}function be(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ee(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ee(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ee(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ye(e){var t=be((0,c.useState)("IDLE"),2),n=t[0],r=t[1],a=be((0,c.useState)(0),2),o=a[0],i=a[1],l=be((0,c.useState)(50),2),u=l[0],s=l[1],m=be((0,c.useState)([0,0,0]),2),p=m[0],d=m[1],f=be((0,c.useState)("normal"),2),v=f[0],g=f[1];(0,c.useEffect)((function(){}),[n]),(0,c.useEffect)((function(){b(o),"END"===o&&h()}),[o]);var h=function(){i("END"),r("END")},b=function(e){},E=function(t){return e.gameData.findIndex((function(e){return String(t)===String(e.ID)}))};(0,c.useEffect)((function(){var t=e.gameData[E(o)];t&&t.hasOwnProperty("Background")&&("redpink"===t.Background?g("redpink"):"normal"!==v&&g("normal"))}));var y=function(){var t="END"===n||"END"===o||"redpink"===v?"gameOver":"",r=e.gameData[E(o)];return{gameScreenClass:t,backgroundImage:r?"pylone"===r.Background?"Illus_Section-01_Pylone_V01-14.svg":"ampoule"===r.Background?"Illus_Section-02_Ampoule_V02.svg":"centrale"===r.Background?"Illus_Section-00_Centrale_V01.svg":null:null}};return"IDLE"===n?c.createElement("div",{className:"gameScreen"},c.createElement("div",{className:"background-image"},c.createElement("img",{src:"assets/img/Illus_Section-00_Centrale_V01.svg"})),c.createElement(I,{introElem:e.introElem,mapObj:e.mapObj,gameStart:function(){r("STARTED"),i(0)}})):c.createElement("div",{className:"gameScreen ".concat(y().gameScreenClass)},"gameOver"!==y().gameScreenClass&&null!==y().backgroundImage?c.createElement("div",{className:"background-image"},c.createElement("img",{src:"assets/img/".concat(y().backgroundImage),className:"no-mobile"})):"",c.createElement("div",{className:"temporaryInfo"},c.createElement("p",null,"Performance (temporaire)"),c.createElement("p",null,"Dollars: ","".concat(u," $")),c.createElement("p",null,"Elec: ","".concat(p[0]," TWh")),c.createElement("p",null,"Enviro: ","".concat(p[1]," pts")),c.createElement("p",null,"Popu: ","".concat(p[2]," pts"))),c.createElement(he,{curIndex:o,curPrompt:"END"===o?"":e.gameData[E(o)],changePrompt:i,updateDollars:function(e){s((function(t){return t+e})),u+e<0&&h()},updatePerformance:function(e){var t=Array.apply(null,Array(e.length)).map((function(){}));p.forEach((function(n,r){t[r]=parseInt(n)+parseInt(e[r])})),d(t),(t[1]<=-9||t[2]<=-9)&&h()},gauges:c.createElement(P,{dollars:u}),performance:p,endGame:"END"===o||"END"===n,finalBilanData:e.finalBilanData,gameReset:function(){s(50),d([0,0,0]),r("IDLE"),i(0)},gameEnd:h}))}function we(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Se=function(){function e(t,n,r,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t;var c=this.container.append("div").classed("rootElem",!0);this.engineRoot=S.createRoot(c.node()),this.optionData=n,this.amorce=r.TEXTE,this.gameData=a,this.initEngine()}var t,n;return t=e,(n=[{key:"initEngine",value:function(){var e=c.createElement(i,{key:"gameIntro",sectionType:p,optionData:this.optionData,amorce:this.amorce,background:null,classes:""});this.engineRoot.render(c.createElement(ye,{introElem:e,gameStatus:this.gameStatus,gameData:this.gameData[0],finalBilanData:this.gameData[1]}))}}])&&we(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Pe(e,t,n,r,a,c,o){try{var i=e[c](o),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function Ne(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){Pe(c,r,a,o,i,"next",e)}function i(e){Pe(c,r,a,o,i,"throw",e)}o(void 0)}))}}function xe(e,t){return Ie.apply(this,arguments)}function Ie(){return(Ie=Ne(regeneratorRuntime.mark((function e(t,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.all([b.gyn("./data/structure-questions.csv"),b.gyn("./data/structure-bilan2.csv")]).then((function(e){var r=b.Ys(".game-area");return new Se(r,w(n),t[0],e),ke(t,n),[[function(){}]]})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ke(e,t){(function(e,t){var n={},r=[],a=w(t);return e.map((function(e,t){if(e.Section===p){var c=e.StepClasses,o=e.TEXTE,i=e.StyleFond;n[e.SectionID]={key:t,sectionType:p,optionData:a,amorce:o,background:i,classes:y(c),gameid:e.GameID}}else if(e.Section===f){var l=e.TEXTE,u=e.StepClasses,s=e.StyleFond;n[e.SectionID]={key:t,sectionType:f,texts:l,visual:e.VISUEL,filename:e.NomFichierSource,background:s,classes:y(u),visuelclasses:y(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===d){var m=e.TEXTE;E(e.TEXTE)&&(m=JSON.parse(e.TEXTE)),n[e.SectionID]={key:t,sectionType:d,texts:E(e.TEXTE)?m:{mainTitle:{class:"",text:m},subTitle:null},visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,classes:y(e.StepClasses),visuelclasses:y(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===v){var g={attributs:e.Attributs,scrollType:e.Step,text:e.TEXTE,visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,visuelclasses:y(e.VisuelClasses),stepclasses:y(e.StepClasses),gameid:e.GameID};if(n.hasOwnProperty(e.SectionID)){var h=n[e.SectionID];h.push(g),n[e.SectionID]=h}else n[e.SectionID]=[g],r.push(e.SectionID)}})),r.map((function(e){var t=n[e],r=t[0].attributs===g?" full-page":"",a=t[0].background;n[e]={key:e,sectionType:v,listID:e,steps:t,classed:"viz-section".concat(r),mediaInfo:0,background:a}})),Object.values(n)})(e,t).map((function(e){"viz-section"===e.sectionType&&e.steps.map((function(t,n){""!==t.visual&&(0===n?b.Ys("#".concat(e.key,"_").concat(n)).style("opacity",1):b.Ys("#".concat(e.key,"_").concat(n)).style("opacity",0))}))}))}function Ce(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Te(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var De=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.index=n,this.callback=r,this._isActivate=!1}var t,n;return t=e,(n=[{key:"activate",value:function(e){this._isActivate||(this._isActivate=!0,this.el.classList.add("active"),this.callback(e))}},{key:"deactivate",value:function(){this._isActivate&&(this._isActivate=!1,this.el.classList.remove("active"))}}])&&Te(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),_e=n(52732),Oe=n.n(_e),je=n(89438);function Ae(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Re(e,t){var n=[];[".viz",".full-page-section > img",".full-page-section > video"].forEach((function(e){n=n.concat(Array.from(document.querySelectorAll(e)))})),(0,je.Z)(n,{stickyBitStickyOffset:40}),new(Oe())({elements_selector:".lazy",threshold:500}),Promise.all([xe(e,t)]).then((function(e){var t,n;(function(e){var t=0,n=0,r=window.innerHeight,a=!1,c=0,o=[],i=[],l=[],u=document.querySelector(".article-reminder"),s=document.querySelector("header > .progress"),m=document.querySelector(".intro-section h1"),p=document.querySelectorAll(".viz-section");if(p.length!==e.length)throw new Error("The number of viz sections (".concat(p.length,") mismatch with the length of the first ")+"dimension of the callbacks array (".concat(e.length,"). Please, be sure that the two elements ")+"have the same size.");p.forEach((function(t,n){var r,a=function(e){if(Array.isArray(e))return Ce(e)}(r=t.querySelectorAll("section"))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return Ce(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ce(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(a.length!==e[n].length)throw new Error("The number of steps (".concat(a.length,") in the viz section #").concat(n+1," mismatch with the ")+"number of callbacks specified (".concat(e[n].length,') at the index "').concat(n,'". Please, be sure that the two ')+"elements have the same size.");o=o.concat(a.map((function(t,r){return new De(t,"".concat(n,"-").concat(r),e[n][r])}))),i=i.concat(i,t.querySelector(".viz > *"))}));var d=function(){var e=window.pageYOffset||document.documentElement.scrollTop;o.forEach((function(e){var a=e.el.getBoundingClientRect();r-a.top-n>0&&a.top+a.height-t>0?l.push(e):e.deactivate()}));var a=m.getBoundingClientRect().bottom<=0,i=u.classList.contains("visible");a&&!i?u.classList.add("visible"):!a&&i&&u.classList.remove("visible"),l.forEach((function(t,n){e>=c?n===l.length-1?t.activate("down"):t.deactivate():0===n?t.activate("up"):t.deactivate()})),f(),l=[],c=e},f=function(){var e=(document.body.scrollTop||document.documentElement.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100;s.style.width=e+"%"},v={initialize:function(){if(a)throw new Error("The scroller is already initialized.");return a=!0,window.addEventListener("scroll",d),window.addEventListener("resize",(function(){r=window.innerHeight,f()})),(window.pageYOffset||document.documentElement.scrollTop)>0&&d(),f(),v},offsetTop:function(e){if(void 0===e)return t;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return t=e,v},offsetBottom:function(e){if(void 0===e)return n;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return n=e,v}};return v})((t=e,n=1,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Ae(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ae(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]).offsetTop(40).offsetBottom(0).initialize()}))}document.querySelector("#root").innerHTML=r.E,b.gyn(a.google_config.localContentURL).then((function(e){b.gyn(a.google_config.localParamsURL).then((function(t){Re(e,t),document.querySelector("#footerContainer").innerHTML=b.Ys("#footerContent").node().innerHTML}))}))},40207:e=>{e.exports={google_config:{contentURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=0&single=true&output=csv",paramsURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=409950237&single=true&output=csv",localContentURL:"./data/structure/contentData.csv",localParamsURL:"./data/structure/paramsData.csv"}}}},e=>{var t=t=>e(e.s=t);e.O(0,[216],(()=>(t(28594),t(35666),t(86702)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,