(self.webpackChunkscrollytelling_template=self.webpackChunkscrollytelling_template||[]).push([[179],{33425:(e,t,n)=>{"use strict";const a=JSON.parse('{"E":"<section id=\\"vizSection1_0\\" class=\\"viz-section full-page\\"><div class=\\"steps display-none\\"><section class=\\"display-none\\"><p>Bla bl abl abl ablalbalanl.</p></section></div><div class=\\"viz\\" id=\\"viz\\"><div id=\\"vizSection1_0_0\\" class=\\"iframeContainer map-area\\"></div></div></section>"}');var r=n(40207),o=n(67294);function i(e){var t=Array.from(String(e.optionData.authors).split(",")).map((function(t,n){var a=Array.from(String(e.optionData.authors).split(",")).length;return a>2?n===a-2?o.createElement("span",{key:n},o.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)," et "):n===a-1?o.createElement("span",{key:n},o.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)):o.createElement("span",{key:n},o.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t),", "):0===n?o.createElement("span",{key:n},o.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)," et "):o.createElement("span",{key:n},o.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t))})),n=o.createElement("section",{className:"intro-section ".concat(e.classes)},o.createElement("h1",null,e.optionData.title),o.createElement("address",null,o.createElement("div",{className:"authors"},"Par ",t),o.createElement("div",{className:"date"},e.optionData.date)),o.createElement("p",null,e.amorce));return e.background?o.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},n):n}var c=n(25935);function s(e){var t,n=String(e.classes).includes("citation");n&&(t={text:String(e.texts).split("/")[0],author:String(e.texts).split("/")[1]});var a,r=String(e.classes).includes("bigNumber");r&&(a={number:String(e.texts).split("/")[0],underText:String(e.texts).split("/")[1]});var i=e.visual,s=""!==i?"Photo"===e.visual?o.createElement("img",{key:"photoTextSection_".concat(e.id),id:"photoTextSection_".concat(e.id),src:"assets/img/675/".concat(e.filename),"data-srcset":"assets/img/2048/".concat(e.filename," 2048w, assets/img/990/").concat(e.filename," 990w, assets/img/675/").concat(e.filename," 675w, assets/img/1350/").concat(e.filename," 1350w, assets/img/100/").concat(e.filename," 100w, assets/img/495/").concat(e.filename," 495w, assets/img/1024/").concat(e.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(e.visuelclasses),style:{paddingBottom:"1rem"}}):"Video"===e.visual?o.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(e.visuelclasses),preload:"metadata",key:"videoTextSection_".concat(e.id),id:"videoTextSection_".concat(e.id)},o.createElement("source",{src:"assets/videos/".concat(e.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):o.createElement("div",null):o.createElement("div",null),l=o.createElement("section",{className:"text-section ".concat(e.classes)},n?o.createElement("blockquote",{className:"small"},o.createElement("div",null,o.createElement("p",null,o.createElement("b",null,(0,c.ZP)(t.text))),o.createElement("p",{className:"author"},t.author),o.createElement("div",{className:"symbol"}))):r?o.createElement("div",{className:"container-number"},o.createElement("div",{className:"numbers"},o.createElement("h2",null,a.number),o.createElement("small",null,a.underText))):o.createElement("div",null,i?s:o.createElement("div",null),String(e.texts).startsWith("<")?(0,c.ZP)(e.texts):o.createElement("p",null,(0,c.ZP)(e.texts))));return e.background?o.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},l):l}var l,u=n(45697),m=n.n(u),d=["title","src"];function p(){return p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},p.apply(this,arguments)}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function v(e){var t,n,a=e.title,r=e.src,i=function(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}(e,d),c=(0,o.useRef)(),s=(t=(0,o.useState)(500),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);i=!0);}catch(e){c=!0,r=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw r}}return o}}(t,n)||function(e,t){if(e){if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?f(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=s[0],u=s[1],m=(0,o.useCallback)((function(e){var t=e.data,n=void 0===t?{}:t;e.source===c.current.contentWindow&&"string"!=typeof n&&n["datawrapper-height"]}),[u,c]);return(0,o.useEffect)((function(){return window.addEventListener("message",m),function(){return window.removeEventListener("message",m)}}),[l,u,m]),o.createElement("iframe",p({ref:c,scrolling:"no",frameBorder:"0",width:"100%"},i,{title:a,src:r,height:l}))}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}v.propTypes={title:m().string.isRequired,src:m().string.isRequired,loading:m().oneOf(["eager","lazy"])};var g="intro-titre",y="pleine-page-titre",E="texte-classique",b="viz-section",x="centré",w="Photo",S="Video",k="Visualisation",N="iframe",T=(h(l={titre:"Titre",auteurs:"Auteurs",date:"Date"},"date","Date"),h(l,"urls","LienAuteurs"),h(l,"lienfichiersource","LienFichierSource"),l);function I(e){var t,n,a,r=o.createElement("section",{id:e.listID,className:e.classed},o.createElement("div",{className:"steps ".concat((t=e.steps,n=t.map((function(e,t){return e.stepclasses})),a=new Array(n.length),n.forEach((function(e,t){if(Array.isArray(e))e.forEach((function(e){for(var r=t;r<n.length;r++)n[r].includes(e)&&(a[r]=e)}));else if("string"==typeof e)for(var r=t;r<n.length;r++)n[r].includes(e)&&(a[r]=e)})),a.reduce((function(e,t){return e===t&&""!==e&&""!==t?e:""}))))},e.steps.map((function(e,t){var n,a=String(e.stepclasses).includes("citation");return a&&(n={text:String(e.text).split("/")[0],author:String(e.text).split("/")[1]}),o.createElement("section",{key:t,className:e.stepclasses},a?o.createElement("blockquote",{className:"small"},o.createElement("div",null,o.createElement("p",null,o.createElement("b",null,(0,c.ZP)(n.text))),o.createElement("p",{className:"author"},n.author),o.createElement("div",{className:"symbol"}))):String(e.text).startsWith("<")?(0,c.ZP)(e.text):o.createElement("p",null,e.text?(0,c.ZP)(e.text):""))}))),o.createElement("div",{className:"viz",id:"viz"},e.steps.map((function(t,n){return t.visual===w?o.createElement("img",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),src:"assets/img/675/".concat(t.filename),"data-srcset":"assets/img/2048/".concat(t.filename," 2048w, assets/img/990/").concat(t.filename," 990w, assets/img/675/").concat(t.filename," 675w, assets/img/1350/").concat(t.filename," 1350w, assets/img/100/").concat(t.filename," 100w, assets/img/495/").concat(t.filename," 495w, assets/img/1024/").concat(t.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(t.visuelclasses)}):t.visual===S?o.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(t.visuelclasses),preload:"metadata",key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n)},o.createElement("source",{src:"assets/videos/".concat(t.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):t.visual===N?o.createElement("div",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),className:"iframeContainer"},o.createElement(v,{title:"Mesures d'arsenic",src:"".concat(t.filename)})):t.visual===k?o.createElement("div",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),className:"iframeContainer ".concat(t.visuelclasses)}):void 0}))));return e.background?o.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},r):r}function C(e){var t=o.createElement("section",{className:"full-page-section ".concat(e.classes)},o.createElement("div",{className:"titleImage"},e.filename?"Photo"===e.visual?o.createElement("img",{key:"".concat(e.id),id:"".concat(e.id),src:"assets/img/675/".concat(e.filename),"data-srcset":"assets/img/2048/".concat(e.filename," 2048w, assets/img/990/").concat(e.filename," 990w, assets/img/675/").concat(e.filename," 675w, assets/img/1350/").concat(e.filename," 1350w, assets/img/100/").concat(e.filename," 100w, assets/img/495/").concat(e.filename," 495w, assets/img/1024/").concat(e.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(e.visuelclasses)}):"Video"===e.visual?o.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(e.visuelclasses),preload:"metadata",key:"".concat(e.id),id:"".concat(e.id)},o.createElement("source",{src:"assets/videos/".concat(e.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):o.createElement("div",null):o.createElement("div",null),e.filename?o.createElement("div",{className:"filter"}):o.createElement("div",null)),o.createElement("div",{className:"captionholder"},o.createElement("h2",{className:"caption ".concat(e.mainTitle.class)},e.mainTitle.text),e.subTitle?o.createElement("h3",{className:"caption ".concat(e.subTitle.class)},e.subTitle.text):o.createElement("div",null)));return e.background?o.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},t):t}n(93162);var P=n(4160);function A(e,t){var n={},a=[],r=j(t);return console.log("content Data",e),e.map((function(e,t){if(e.Section===g){var o=e.StepClasses,i=e.TEXTE,c=e.StyleFond;n[e.SectionID]={key:t,sectionType:g,optionData:r,amorce:i,background:c,classes:O(o),gameid:e.GameID}}else if(e.Section===E){var s=e.TEXTE,l=e.StepClasses,u=e.StyleFond;n[e.SectionID]={key:t,sectionType:E,texts:s,visual:e.VISUEL,filename:e.NomFichierSource,background:u,classes:O(l),visuelclasses:O(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===y){var m=e.TEXTE;D(e.TEXTE)&&(m=JSON.parse(e.TEXTE)),n[e.SectionID]={key:t,sectionType:y,texts:D(e.TEXTE)?m:{mainTitle:{class:"",text:m},subTitle:null},visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,classes:O(e.StepClasses),visuelclasses:O(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===b){var d={attributs:e.Attributs,scrollType:e.Step,text:e.TEXTE,visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,visuelclasses:O(e.VisuelClasses),stepclasses:O(e.StepClasses),gameid:e.GameID};if(n.hasOwnProperty(e.SectionID)){var p=n[e.SectionID];p.push(d),n[e.SectionID]=p}else n[e.SectionID]=[d],a.push(e.SectionID)}})),a.map((function(e){var t=n[e],a=t[0].attributs===x?" full-page":"",r=t[0].background;n[e]={key:e,sectionType:b,listID:e,steps:t,classed:"viz-section".concat(a),mediaInfo:0,background:r}})),Object.values(n)}function D(e){try{JSON.parse(e)}catch(e){return!1}return!0}function O(e){return Array.from(e.split(";")).join(" ")}function j(e){return{title:e[0][T.titre],authors:e[0][T.auteurs],urls:e[0][T.urls],date:e[0][T.date]}}n(9208);var _=n(83731);function z(){return window.innerWidth<400}function R(){return window.innerWidth<=576}function L(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);i=!0);}catch(e){c=!0,r=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return B(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?B(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function q(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function V(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var Z={token:"pk.eyJ1IjoibGVkZXZvaXIiLCJhIjoiY2p2bW81dHU2MWV1cTRhcXIzaXZqMGYxciJ9.WrIF8o69aR_TstDFu6Qyag",mapBounds:{max:[-165,30.72833,-25.23636,82.229434]},colors:["#F4CBC6","#F4A39A","#EE6A5E","#CE3727","#A22823","#751A1A","#410000"],clusterMaxZoom:11,clusterRadius:30,clusterMinPoints:5};_.accessToken=Z.token;var M=function(){function e(t,n,a,r,o){var i=!(arguments.length>5&&void 0!==arguments[5])||arguments[5],c=arguments.length>6&&void 0!==arguments[6]&&arguments[6];q(this,e),this.dataSourceObjects=a,this.constants=Z,this.map=new _.Map({container:n,style:r,preserveDrawingBuffer:!0,center:o.center,zoom:o.zoom}),this.maxBounds=o,this.boundsList=this.dataSourceObjects.map((function(e){return e.coords})),this.extraBounds=this.dataSourceObjects.map((function(e){return e.extraCoords})),i&&(this.map.scrollZoom.disable(),this.map.dragPan.disable(),this.map.dragRotate.disable(),this.map.boxZoom.disable(),this.map.doubleClickZoom.disable()),c&&this.setupHandlers(),this.dataList=this.dataSourceObjects.map((function(e){return e.data}))}var t,n;return t=e,n=[{key:"updateBounds",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.maxBounds,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:z()?5:R()?15:20,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:100;this.map=this.map.fitBounds(e,{duration:n,padding:t})}},{key:"updateCoordsAndZoom",value:function(e){this.map.flyTo({center:e.center,zoom:e.zoom,speed:.7,curve:1,easing:function(e){return e}})}},{key:"viewBoundObj",value:function(e){this.updateCoordsAndZoom(this.boundsList[e])}},{key:"viewExtraBoundObj",value:function(e,t,n){var a=this.extraBounds[e];this.updateCoordsAndZoom(a[t])}},{key:"viewInitBounds",value:function(e){this.updateCoordsAndZoom(this.maxBounds)}},{key:"showSourceXItemY",value:function(e,t){this.updateCoordsAndZoom(this.dataList[e][t])}},{key:"initMapSourcesAndLayers",value:function(){var e=this;this.initialised||(this.initialised=!0,this.dataSourceObjects.map((function(t){e.map.addSource(t.sourceName,{type:t.sourceType,data:t.sourceData}),"fill"===t.layerType?e.map.addLayer({id:t.sourceName,type:t.layerType,source:t.sourceName,paint:{"fill-color":t.color,"fill-opacity":t.opacity}}):"circle"===t.layerType&&e.map.addLayer({id:t.sourceName,type:t.layerType,source:t.sourceName,paint:{"circle-color":["match",["get","statut"],"Recherches effectuées ou en cours","#ff561c","Phase préliminaire","#ffc734","#b7b7b7"],"circle-radius":5}})})))}},{key:"changeLayerPaint",value:function(e,t,n){this.map.setPaintProperty(e,t,n)}},{key:"setupHandlers",value:function(){var e=this;this.map.on("mouseover","pensionnatsSource",(function(t){e.map.getCanvas().style.cursor="pointer",e.drawPopup(t)})),this.map.on("mouseout","pensionnatsSource",(function(t){e.map.getCanvas().style.cursor="default",e.closePopup()})),this.map.on("click","pensionnatsSource",(function(t){t.preventDefault(),e.map.getCanvas().style.cursor="pointer",e.drawPopup(t)}))}},{key:"drawPopup",value:function(e){for(var t=e.features[0].geometry.coordinates.slice(),n=e.features[0].properties,a=L(n.ouverture.split("/"),3),r=a[0],o=a[1],i=a[2],c=L(n.fermeture.split("/"),3),s=c[0],l=c[1],u=c[2],m=[new Intl.DateTimeFormat("fr-CA",{dateStyle:"long"}).format(new Date(Date.UTC(i,o,r))),new Intl.DateTimeFormat("fr-CA",{dateStyle:"long"}).format(new Date(Date.UTC(u,l,s)))],d=m[0],p=m[1],f="\n      <h3>".concat(n.name,"</h3>\n      <h4>").concat(n.ville,", ").concat(n.province,"</h4>\n      <p>").concat(d," - ").concat(p,"</p>\n      <p>").concat(n.statut,"</p>\n    ");Math.abs(e.lngLat.lng-t[0])>180;)t[0]+=e.lngLat.lng>t[0]?360:-360;this.popup=(new _.Popup).setLngLat(t).setHTML(f).addTo(this.map)}},{key:"closePopup",value:function(){this.popup&&this.popup.remove()}},{key:"updateData",value:function(e,t){this.initialised||this.initMapSourcesAndLayers(),this.map.getSource(e).setData(t)}}],n&&V(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();n(6899);var U=n(20745);function W(e){return(0,o.useEffect)((function(){}),[]),o.createElement("div",{className:"gauges"},o.createElement("div",{className:"gauge dollarGauge"},o.createElement("div",{className:"textBox"},o.createElement("h5",null,"Dollars")),o.createElement("div",{className:"gaugeColor blue"},o.createElement("div",{className:"value"},o.createElement("p",null,e.dollars)))),o.createElement("div",{className:"gauge environmentGauge"},o.createElement("div",{className:"textBox"},o.createElement("h5",null,"TWh en 2050")),o.createElement("div",{className:"gaugeColor green"},o.createElement("div",{className:"value"},o.createElement("p",null,e.twh)))))}function X(e,t,n,a,r,o,i){try{var c=e[o](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(a,r)}function H(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function i(e){X(o,a,r,i,c,"next",e)}function c(e){X(o,a,r,i,c,"throw",e)}i(void 0)}))}}function Y(e){var t=(0,o.useCallback)(H(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("starting game"),e.mapObj.viewExtraBoundObj(0,"zone1"),e.gameStart();case 3:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"gameBox"},o.createElement("div",{className:"introBox"},e.introElem),o.createElement("div",{className:"userBox"},o.createElement("div",{className:"startbutton",onClick:t},o.createElement("p",null,"Commencer"))))}function F(e,t,n,a,r,o,i){try{var c=e[o](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(a,r)}function G(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function i(e){F(o,a,r,i,c,"next",e)}function c(e){F(o,a,r,i,c,"throw",e)}i(void 0)}))}}function J(e){(0,o.useEffect)((function(){}),[]);var t=(0,o.useCallback)(G(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("next prompt!",e.curIndex+1),e.changePrompt(e.curIndex+1);case 2:case"end":return t.stop()}}),t)})))),n=(0,o.useCallback)(G(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("previous prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"choices"},o.createElement("div",{className:"column"},e.curIndex>0?o.createElement("div",{className:"actionbutton",onClick:n},o.createElement("div",{className:"butn"},o.createElement("p",null,"Previous"))):o.createElement("div",null)),o.createElement("div",{className:"column"},e.choices.map((function(n,a){var r=e.choices_values[a].split("_")[0],i=e.choices_values[a].split("_")[1];return o.createElement("div",{className:"actionbutton",key:a,onClick:t},o.createElement("div",{className:"butn"},o.createElement("p",null,n," (coût: ",r," ; effet: ",i,")")))}))))}function Q(e,t,n,a,r,o,i){try{var c=e[o](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(a,r)}function $(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function i(e){Q(o,a,r,i,c,"next",e)}function c(e){Q(o,a,r,i,c,"throw",e)}i(void 0)}))}}function K(e){var t=(0,o.useCallback)($(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("next prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)})))),n=(0,o.useCallback)($(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("next prompt!",e.curIndex+1),e.changePrompt(e.curIndex+1);case 2:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"printprompt"},o.createElement("div",{className:"message"},e.message),o.createElement("div",{className:"actionbutton",onClick:t},o.createElement("div",{className:"butn"},o.createElement("p",null,"Previous"))),o.createElement("div",{className:"actionbutton",onClick:n},o.createElement("div",{className:"butn"},o.createElement("p",null,"Suivant"))))}function ee(e,t,n,a,r,o,i){try{var c=e[o](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(a,r)}function te(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function i(e){ee(o,a,r,i,c,"next",e)}function c(e){ee(o,a,r,i,c,"throw",e)}i(void 0)}))}}function ne(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);i=!0);}catch(e){c=!0,r=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw r}}return o}}(e,t)||ae(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ae(e,t){if(e){if("string"==typeof e)return re(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?re(e,t):void 0}}function re(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function oe(e){var t=ne((0,o.useState)(0),2),n=(t[0],t[1]),a=ne((0,o.useState)(0),2),r=a[0],i=a[1],c=ne((0,o.useState)([]),2),s=c[0],l=c[1];(0,o.useEffect)((function(){var t=e.choices.map((function(e,t){return 0}));l(t),console.log("optionParams:",v())}),[]),(0,o.useEffect)((function(){var e=s.reduce((function(e,t,n){return e+t*v()[n].unitValue}),0),t=s.reduce((function(e,t,n){return e+t*v()[n].unitMWvalue}),0);n(e),i(t)}),[s]);var u,m,d=(0,o.useCallback)(te(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("next prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)})))),p=(0,o.useCallback)(te(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("next prompt!",e.curIndex+1),e.changePrompt(e.curIndex+1);case 2:case"end":return t.stop()}}),t)})))),f=function(e,t){var n=t.split("_");return{name:e,unitValue:parseInt(n[0]),total:parseInt(n[1]),unitMWvalue:parseInt(n[2])}},v=function(){return e.choices.map((function(t,n){return f(t,e.choices_values[n])}))},h=function(e,t,n,a){var r,o=function(e){if(Array.isArray(e))return re(e)}(r=s)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||ae(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();o[t]+n>=0&&(o[t]=o[t]+n,l(o))};return o.createElement("div",{className:"repartition"},o.createElement("div",{className:"optionZone"},e.choices.map((function(t,n){return f(t,e.choices_values[n])})).map((function(e,t){return o.createElement("div",{className:"optionUnit",key:t},o.createElement("div",{className:"selectorZone"},o.createElement("div",{className:"division minusZone",onClick:function(e){return h(0,t,-1)}},o.createElement("h3",null,"-")),o.createElement("div",{className:"division centralZone"},o.createElement("h3",null,s[t])),o.createElement("div",{className:"division plusZone",onClick:function(e){return h(0,t,1)}},o.createElement("h3",null,"+"))),o.createElement("div",{className:"textZone"},o.createElement("h3",null,e.name),o.createElement("div",{className:"inlinetext"},o.createElement("h5",null,e.unitValue," jetons par unité • ",e.unitMWvalue," MW par unité"))))}))),e.curIndex>0?o.createElement("div",{className:"actionbutton",onClick:d},o.createElement("div",{className:"butn"},o.createElement("p",null,"Previous"))):o.createElement("div",null),o.createElement("div",{className:"monitoring"},o.createElement("div",{className:"column"},o.createElement("div",{className:"monitoring_header"},o.createElement("h5",null,"Jetons investis")),o.createElement("div",{className:"monitoring_value"},o.createElement("div",{className:"tokens"},(u=s.map((function(e,t){var n=v()[t];return Array(e*n.unitValue).fill(n.name[0])})),m=[].concat.apply([],u),console.log("checking used tokens:",m),Array.from({length:10}).map((function(e,t){var n=m[t]?String(m[t]):"";return o.createElement("div",{className:"tokenContainer",key:t},o.createElement("p",null,n))})))))),o.createElement("div",{className:"column"},o.createElement("div",{className:"monitoring_header"},o.createElement("h5",null,"Électricité produite")),o.createElement("div",{className:"monitoring_value"},o.createElement("h3",null,r," MW")))),o.createElement("div",{className:"actionbutton",onClick:p},o.createElement("div",{className:"butn"},o.createElement("p",null,"Suivant"))))}function ie(e,t,n,a,r,o,i){try{var c=e[o](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(a,r)}function ce(e){(0,o.useEffect)((function(){}),[]);var t=(0,o.useCallback)(function(){var t,n=(t=regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.changePrompt(n);case 1:case"end":return t.stop()}}),t)})),function(){var e=this,n=arguments;return new Promise((function(a,r){var o=t.apply(e,n);function i(e){ie(o,a,r,i,c,"next",e)}function c(e){ie(o,a,r,i,c,"throw",e)}i(void 0)}))});return function(e){return n.apply(this,arguments)}}());return o.createElement("div",{className:"gameBox"},o.createElement("div",{className:"promptBox"},o.createElement("div",{className:"header"},o.createElement("div",{className:"surtitre"},o.createElement("h3",null,e.curPrompt.Sujet)),o.createElement("div",{className:"question"},o.createElement("p",null,e.curPrompt.Question))),function(n){switch(n){case"Repartition":return o.createElement(oe,{choices:String(e.curPrompt.Choix).split(";"),choices_values:String(e.curPrompt.Choix_Valeurs).split(";"),changePrompt:t,curIndex:e.curIndex});case"Carte":case"Suivi":case"Catastrophe":default:return o.createElement(J,{choices:String(e.curPrompt.Choix).split(";"),changePrompt:t,curIndex:e.curIndex});case"Print":return o.createElement(K,{message:String(e.curPrompt.Texte_Supp),changePrompt:t,curIndex:e.curIndex});case"choixReponse":return o.createElement(J,{choices:String(e.curPrompt.Choix).split(";"),choices_values:String(e.curPrompt.Choix_Valeurs).split(";"),changePrompt:t,curIndex:e.curIndex})}}(e.curPrompt.Type)))}function se(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);i=!0);}catch(e){c=!0,r=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return le(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?le(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function le(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function ue(e){var t=se((0,o.useState)("IDLE"),2),n=t[0],a=t[1],r=se((0,o.useState)(0),2),i=r[0],c=r[1],s=se((0,o.useState)(100),2),l=s[0],u=s[1],m=se((0,o.useState)(100),2),d=m[0],p=m[1];(0,o.useEffect)((function(){console.log("checking props mapObj:",e.mapObj)}),[]),(0,o.useEffect)((function(){console.log("game ",n)}),[n]),(0,o.useEffect)((function(){f(i)}),[i]);var f=function(t){console.log("current game prompt:",e.gameData.filter((function(e){return String(e.Index)===String(t)})))};return o.createElement("div",{className:"gameScreen"},o.createElement(W,{dollars:l,twh:d}),"IDLE"===n?o.createElement(Y,{introElem:e.introElem,mapObj:e.mapObj,gameStart:function(){a("STARTED"),c(0)}}):"END"===n?o.createElement("div",null):o.createElement(ce,{curIndex:i,curPrompt:e.gameData[i],changePrompt:c,updateDollars:function(e){u((function(t){return t+e}))},updateTwh:function(e){p((function(t){return t+e}))}}))}function me(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}n(97762);var de=function(){function e(t,n,a,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t;var i=this.container.append("div").classed("rootElem",!0);this.engineRoot=U.createRoot(i.node()),this.optionData=n,this.mapObj=r,this.amorce=a.TEXTE,this.gameData=o,console.log("game Data is : ",this.gameData),this.initEngine()}var t,n;return t=e,(n=[{key:"initEngine",value:function(){var e=o.createElement(i,{key:"gameIntro",sectionType:g,optionData:this.optionData,amorce:this.amorce,background:null,classes:""});this.engineRoot.render(o.createElement(ue,{introElem:e,mapObj:this.mapObj,gameStatus:this.gameStatus,gameData:this.gameData}))}}])&&me(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function pe(e,t,n,a,r,o,i){try{var c=e[o](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(a,r)}function fe(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function i(e){pe(o,a,r,i,c,"next",e)}function c(e){pe(o,a,r,i,c,"throw",e)}i(void 0)}))}}var ve="mapbox://styles/ledevoir/clal9zlfk004a15qohhr7r495";function he(e,t){return ge.apply(this,arguments)}function ge(){return(ge=fe(regeneratorRuntime.mark((function e(t,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",P.gyn("https://docs.google.com/spreadsheets/d/e/2PACX-1vQQZ3sz0q1vnZmoYYR5IrCfuONhHcNw50iDtbg1H2mIX8lHDL1BQ4sAMi7iApSE1G9WQTW2jHcWv4KW/pub?gid=0&single=true&output=csv").then((function(e){return P.AVB("./data/filtered_accidents.geojson").then((function(a){var r=[{sourceName:"mapSource",sourceType:"geojson",sourceData:a,layerType:"circle",color:"#f58366",opacity:.8,coords:{center:[-70.566,52.488],zoom:4},extraCoords:{zone1:{center:[-70.566,52.488],zoom:5}}}],o=P.Ys(".map-area");o.append("div").classed("map",!0).attr("id","qcmap");var i=new M(P.Ys("#qcmap"),"qcmap",r,ve,{center:[-70.566,52.488],zoom:4});return i.map.on("load",(function(){P.Ys("#qcmap").select(".mapbox-improve-map").text(""),i.initMapSourcesAndLayers(),P.Ys("#qcmap").select(".loading").style("display","none"),P.Ys("#qcmap").select(".options-bar").classed("disabled",!1)})),new de(o,j(n),t[0],i,e),ye(t,n),[[function(){}]]}))})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ye(e,t){var n=A(e,t);console.log("checking structure:",n),n.map((function(e){"viz-section"===e.sectionType&&e.steps.map((function(t,n){""!==t.visual&&(0===n?P.Ys("#".concat(e.key,"_").concat(n)).style("opacity",1):P.Ys("#".concat(e.key,"_").concat(n)).style("opacity",0))}))}))}function Ee(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function be(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var xe=function(){function e(t,n,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.index=n,this.callback=a,this._isActivate=!1}var t,n;return t=e,(n=[{key:"activate",value:function(e){this._isActivate||(this._isActivate=!0,this.el.classList.add("active"),this.callback(e))}},{key:"deactivate",value:function(){this._isActivate&&(this._isActivate=!1,this.el.classList.remove("active"))}}])&&be(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),we=n(52732),Se=n.n(we),ke=n(89438);function Ne(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function Te(e,t){var n=[];[".viz",".full-page-section > img",".full-page-section > video"].forEach((function(e){n=n.concat(Array.from(document.querySelectorAll(e)))})),(0,ke.Z)(n,{stickyBitStickyOffset:40}),new(Se())({elements_selector:".lazy",threshold:500}),Promise.all([he(e,t)]).then((function(e){var t,n;(function(e){var t=0,n=0,a=window.innerHeight,r=!1,o=0,i=[],c=[],s=[],l=document.querySelector(".article-reminder"),u=document.querySelector("header > .progress"),m=document.querySelector(".intro-section h1"),d=document.querySelectorAll(".viz-section");if(d.length!==e.length)throw new Error("The number of viz sections (".concat(d.length,") mismatch with the length of the first ")+"dimension of the callbacks array (".concat(e.length,"). Please, be sure that the two elements ")+"have the same size.");d.forEach((function(t,n){var a,r=function(e){if(Array.isArray(e))return Ee(e)}(a=t.querySelectorAll("section"))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(a)||function(e,t){if(e){if("string"==typeof e)return Ee(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ee(e,t):void 0}}(a)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(r.length!==e[n].length)throw new Error("The number of steps (".concat(r.length,") in the viz section #").concat(n+1," mismatch with the ")+"number of callbacks specified (".concat(e[n].length,') at the index "').concat(n,'". Please, be sure that the two ')+"elements have the same size.");i=i.concat(r.map((function(t,a){return new xe(t,"".concat(n,"-").concat(a),e[n][a])}))),c=c.concat(c,t.querySelector(".viz > *"))}));var p=function(){var e=window.pageYOffset||document.documentElement.scrollTop;i.forEach((function(e){var r=e.el.getBoundingClientRect();a-r.top-n>0&&r.top+r.height-t>0?s.push(e):e.deactivate()}));var r=m.getBoundingClientRect().bottom<=0,c=l.classList.contains("visible");r&&!c?l.classList.add("visible"):!r&&c&&l.classList.remove("visible"),s.forEach((function(t,n){e>=o?n===s.length-1?t.activate("down"):t.deactivate():0===n?t.activate("up"):t.deactivate()})),f(),s=[],o=e},f=function(){var e=(document.body.scrollTop||document.documentElement.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100;u.style.width=e+"%"},v={initialize:function(){if(r)throw new Error("The scroller is already initialized.");return r=!0,window.addEventListener("scroll",p),window.addEventListener("resize",(function(){a=window.innerHeight,f()})),(window.pageYOffset||document.documentElement.scrollTop)>0&&p(),f(),v},offsetTop:function(e){if(void 0===e)return t;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return t=e,v},offsetBottom:function(e){if(void 0===e)return n;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return n=e,v}};return v})((t=e,n=1,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);i=!0);}catch(e){c=!0,r=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw r}}return o}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Ne(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ne(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]).offsetTop(40).offsetBottom(0).initialize()}))}function Ie(e){return e.rendered&&(0,o.useEffect)((function(){Te(e.contentData,e.paramsData)}),[]),t=A(e.contentData,e.paramsData),n={},Object.keys(t).map((function(e,a){var r=t[e];r.sectionType===g?n[e]=o.createElement(i,{key:r.key,sectionType:r.sectionType,optionData:r.optionData,amorce:(0,c.ZP)(r.amorce),background:r.background,classes:r.classes}):r.sectionType===E?n[e]=o.createElement(s,{key:r.key,id:r.key,sectionType:r.sectionType,texts:r.texts,background:r.background,classes:r.classes,visuelclasses:r.visuelclasses,visual:r.visual,filename:r.filename}):r.sectionType===y?n[e]=o.createElement(C,{key:r.key,id:r.key,sectionType:r.sectionType,background:r.background,classes:r.classes,visuelclasses:r.visuelclasses,visual:r.visual,mainTitle:r.texts.mainTitle,subTitle:r.texts.subTitle,filename:r.filename}):r.sectionType===b&&(n[e]=o.createElement(I,{key:r.key,listID:r.listID,steps:r.steps,classed:r.classed,mediaInfo:r.mediaInfo,background:r.background}))})),Object.values(n);var t,n}document.querySelector("#root").innerHTML=a.E,Promise.all([Promise.resolve().then(n.t.bind(n,20745,19)),Promise.resolve().then(n.t.bind(n,67294,19))]).then((function(e){var t=e[0],n=e[1];P.gyn(r.google_config.contentURL).then((function(e){P.gyn(r.google_config.paramsURL).then((function(a){t.createRoot(document.getElementById("root")).render(n.createElement(Ie,{contentData:e,paramsData:a,rendered:!0})),document.querySelector("#footerContainer").innerHTML=P.Ys("#footerContent").node().innerHTML}))}))}))},40207:e=>{e.exports={google_config:{contentURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=0&single=true&output=csv",paramsURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=409950237&single=true&output=csv",localContentURL:"./data/structure/contentData.csv",localParamsURL:"./data/structure/paramsData.csv"}}}},e=>{var t=t=>e(e.s=t);e.O(0,[216],(()=>(t(28594),t(35666),t(33425)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0FBTzRGLG9CLFVDN0Y1Rk8sRUFBT0MsUUFBVSxDQUFDSixjQVBJLENBQ2xCLFdBQWMsbUtBQ2QsVUFBYSwyS0FDYixnQkFBbUIsbUNBQ25CLGVBQWtCLHNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL2NvbXBvbmVudHMvSW50cm9TZWN0aW9uLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9jb21wb25lbnRzL1RleHRTZWN0aW9uLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9jb21wb25lbnRzL0RXQ2hhcnQuanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL2dlbmVyYXRvci9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL2NvbXBvbmVudHMvVml6U2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvY29tcG9uZW50cy9GdWxsUGFnZVNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL2dlbmVyYXRvci9zdHJ1Y3R1cmVHZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvZGF0YS9zdHJ1Y3R1cmUvY2FsbGJhY2tzLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4uL2xlZGV2b2lyLWRhdGF2aXovc3JjL21hcHMvc2NyZWVuLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4uL2xlZGV2b2lyLWRhdGF2aXovc3JjL21hcHMvaW50ZXJhY3RpdmUtbWFwLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4uL2xlZGV2b2lyLWRhdGF2aXovc3JjL2dyYXBocy9zdGFja2VkQXJlYUNoYXJ0LmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9nYW1lL2NvbXBvbmVudHMvZ2F1Z2VzL0dhdWdlcy5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvZ2FtZS9jb21wb25lbnRzL2ludHJvQm94LmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9nYW1lL2NvbXBvbmVudHMvcHJvbXB0ZmlsbC9NdWx0aXBsZUNob2ljZS5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvZ2FtZS9jb21wb25lbnRzL3Byb21wdGZpbGwvUHJpbnRQcm9tcHQuanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL2dhbWUvY29tcG9uZW50cy9wcm9tcHRmaWxsL1JlcGFydGl0aW9uLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9nYW1lL2NvbXBvbmVudHMvUHJvbXB0Qm94LmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9nYW1lL2NvbXBvbmVudHMvbWFpbmZyYW1lLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9nYW1lL2VuZ2luZS5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvdml6LmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9zY3JvbGxlci5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvZ2VuZXJhdG9yL2luaXRTY3JvbGxlci5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvZ2VuZXJhdG9yL1JlbmRlclN0cnVjdHVyZS5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvYXBwLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2RhdGEvZ29vZ2xlX2NvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gSW50cm9TZWN0aW9uKHByb3BzKXtcclxuICAgIFxyXG4gICAgbGV0IGF1dGhvcnNMaW5lID0gQXJyYXkuZnJvbShTdHJpbmcocHJvcHMub3B0aW9uRGF0YS5hdXRob3JzKS5zcGxpdCgnLCcpKS5tYXAoKG5hbWUsaSkgPT4ge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBjdXJMZW4gPSBBcnJheS5mcm9tKFN0cmluZyhwcm9wcy5vcHRpb25EYXRhLmF1dGhvcnMpLnNwbGl0KCcsJykpLmxlbmd0aDtcclxuICAgICAgICBpZihjdXJMZW4gPiAyKXtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIGkgPT09IChjdXJMZW4tMikgP1xyXG4gICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2Ake1N0cmluZyhwcm9wcy5vcHRpb25EYXRhLnVybHMpLnNwbGl0KCcsJylbaV19YH0+e25hbWV9PC9hPiZuYnNwO2V0Jm5ic3A7XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgKSAgICBcclxuICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICBpID09PSAoY3VyTGVuIC0gMSkgPyBcclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBrZXk9e2l9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtgJHtTdHJpbmcocHJvcHMub3B0aW9uRGF0YS51cmxzKS5zcGxpdCgnLCcpW2ldfWB9PntuYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2Ake1N0cmluZyhwcm9wcy5vcHRpb25EYXRhLnVybHMpLnNwbGl0KCcsJylbaV19YH0+e25hbWV9PC9hPiwmbmJzcDtcclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIGkgPT09IDAgP1xyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICA8c3BhbiBrZXk9e2l9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2Ake1N0cmluZyhwcm9wcy5vcHRpb25EYXRhLnVybHMpLnNwbGl0KCcsJylbaV19YH0+e25hbWV9PC9hPiZuYnNwO2V0Jm5ic3A7XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICkgICAgXHJcblxyXG4gICAgICAgICAgICA6XHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIDxzcGFuIGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPXtgJHtTdHJpbmcocHJvcHMub3B0aW9uRGF0YS51cmxzKS5zcGxpdCgnLCcpW2ldfWB9PntuYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIClcclxuICAgIH0pO1xyXG4gICAgbGV0IGludHJvU2VjdGlvbk9iaiA9IChcclxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e2BpbnRyby1zZWN0aW9uICR7cHJvcHMuY2xhc3Nlc31gfT5cclxuICAgICAgICAgICAgPGgxPntwcm9wcy5vcHRpb25EYXRhLnRpdGxlfTwvaDE+XHJcbiAgICAgICAgICAgIDxhZGRyZXNzPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhdXRob3JzXCI+UGFyIHthdXRob3JzTGluZX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkYXRlXCI+e3Byb3BzLm9wdGlvbkRhdGEuZGF0ZX08L2Rpdj5cclxuICAgICAgICAgICAgPC9hZGRyZXNzPlxyXG4gICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgIHtwcm9wcy5hbW9yY2V9XHJcbiAgICAgICAgICAgIDwvcD5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICApO1xyXG4gICAgbGV0IGNvbnRhaW5lZE9iaiA9IHByb3BzLmJhY2tncm91bmQgP1xyXG4gICAgICAgIChcclxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e2JhY2tncm91bmRDb2xvcjogYCR7cHJvcHMuYmFja2dyb3VuZH1gfX0gY2xhc3NOYW1lPXtcInNlY3Rpb25Db250YWluZXJcIn0+XHJcbiAgICAgICAgICAgICAgICB7aW50cm9TZWN0aW9uT2JqfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICAgICAgOlxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgaW50cm9TZWN0aW9uT2JqXHJcbiAgICAgICAgKVxyXG4gICAgXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIGNvbnRhaW5lZE9ialxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgcGFyc2UgZnJvbSBcImh0bWwtcmVhY3QtcGFyc2VyXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVGV4dFNlY3Rpb24ocHJvcHMpe1xyXG5cclxuICAgIGxldCBpc1F1b3RlID0gU3RyaW5nKHByb3BzLmNsYXNzZXMpLmluY2x1ZGVzKCdjaXRhdGlvbicpO1xyXG4gICAgbGV0IHF1b3RlT2JqO1xyXG4gICAgaWYoaXNRdW90ZSl7XHJcbiAgICAgICAgcXVvdGVPYmogPSB7XHJcbiAgICAgICAgICAgIHRleHQ6U3RyaW5nKHByb3BzLnRleHRzKS5zcGxpdCgnLycpWzBdLFxyXG4gICAgICAgICAgICBhdXRob3I6U3RyaW5nKHByb3BzLnRleHRzKS5zcGxpdCgnLycpWzFdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaXNCaWdOdW1iZXIgPSBTdHJpbmcocHJvcHMuY2xhc3NlcykuaW5jbHVkZXMoJ2JpZ051bWJlcicpO1xyXG4gICAgbGV0IGJpZ051bWJlck9iajtcclxuICAgIGlmKGlzQmlnTnVtYmVyKXtcclxuICAgICAgICBiaWdOdW1iZXJPYmogPSB7XHJcbiAgICAgICAgICAgIG51bWJlcjpTdHJpbmcocHJvcHMudGV4dHMpLnNwbGl0KCcvJylbMF0sXHJcbiAgICAgICAgICAgIHVuZGVyVGV4dDpTdHJpbmcocHJvcHMudGV4dHMpLnNwbGl0KCcvJylbMV1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpc1Zpc3VhbCA9IHByb3BzLnZpc3VhbDtcclxuICAgIGxldCB2aXN1YWxPYmogPSAoXHJcbiAgICAgICAgKGlzVmlzdWFsICE9PSBcIlwiKSA/IFxyXG4gICAgICAgICAgICBwcm9wcy52aXN1YWwgPT09IFwiUGhvdG9cIiA/IFxyXG4gICAgICAgICAgICAgICAgPGltZyBcclxuICAgICAgICAgICAgICAgICAgICBrZXk9e2BwaG90b1RleHRTZWN0aW9uXyR7cHJvcHMuaWR9YH1cclxuICAgICAgICAgICAgICAgICAgICBpZD17YHBob3RvVGV4dFNlY3Rpb25fJHtwcm9wcy5pZH1gfVxyXG4gICAgICAgICAgICAgICAgICAgIHNyYz17YGFzc2V0cy9pbWcvNjc1LyR7cHJvcHMuZmlsZW5hbWV9YH1cclxuICAgICAgICAgICAgICAgICAgICBkYXRhLXNyY3NldD17YGFzc2V0cy9pbWcvMjA0OC8ke3Byb3BzLmZpbGVuYW1lfSAyMDQ4dywgYXNzZXRzL2ltZy85OTAvJHtwcm9wcy5maWxlbmFtZX0gOTkwdywgYXNzZXRzL2ltZy82NzUvJHtwcm9wcy5maWxlbmFtZX0gNjc1dywgYXNzZXRzL2ltZy8xMzUwLyR7cHJvcHMuZmlsZW5hbWV9IDEzNTB3LCBhc3NldHMvaW1nLzEwMC8ke3Byb3BzLmZpbGVuYW1lfSAxMDB3LCBhc3NldHMvaW1nLzQ5NS8ke3Byb3BzLmZpbGVuYW1lfSA0OTV3LCBhc3NldHMvaW1nLzEwMjQvJHtwcm9wcy5maWxlbmFtZX0gMTAyNHdgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtc2l6ZXM9XCIobWF4LXdpZHRoOiAxMDBweCkgMTAwcHgsIChtYXgtd2lkdGg6IDQ5NXB4KSA0OTVweCwgKG1heC13aWR0aDogNjc1cHgpIDY3NXB4LCAobWF4LXdpZHRoOiA5OTBweCkgOTkwcHgsIChtYXgtd2lkdGg6ICAxMDI0cHgpIDEwMjRweCwgKG1heC13aWR0aDogIDEzNTBweCkgMTM1MHB4LCAobWF4LXdpZHRoOiAgMjA0OHB4KSAyMDQ4cHhcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGxhenkgJHtwcm9wcy52aXN1ZWxjbGFzc2VzfWB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3twYWRkaW5nQm90dG9tOiAnMXJlbSd9fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICBwcm9wcy52aXN1YWwgPT09IFwiVmlkZW9cIiA/IFxyXG4gICAgICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGxvb3AgbXV0ZWQgcGxheXNJbmxpbmUgY2xhc3NOYW1lPXtgdmlkZW8gJHtwcm9wcy52aXN1ZWxjbGFzc2VzfWB9IHByZWxvYWQ9XCJtZXRhZGF0YVwiIGtleT17YHZpZGVvVGV4dFNlY3Rpb25fJHtwcm9wcy5pZH1gfSBpZD17YHZpZGVvVGV4dFNlY3Rpb25fJHtwcm9wcy5pZH1gfT5cclxuICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz17YGFzc2V0cy92aWRlb3MvJHtwcm9wcy5maWxlbmFtZX1gfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgVmlkw6lvIG5vbiBzdXBwb3J0w6llLiBSw6ktZXNzYXlleiBzdXIgdW4gYXV0cmUgYXBwYXJlaWwgb3UgZnVyZXRldXIuXHJcbiAgICAgICAgICAgICAgICA8L3ZpZGVvPlxyXG4gICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICA6XHJcbiAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgIClcclxuXHJcbiAgICBsZXQgdGV4dFNlY3Rpb25PYmogPSAoXHJcbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtgdGV4dC1zZWN0aW9uICR7cHJvcHMuY2xhc3Nlc31gfT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlzUXVvdGUgPyBcclxuICAgICAgICAgICAgPGJsb2NrcXVvdGUgY2xhc3NOYW1lPVwic21hbGxcIj5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAgICA8Yj5cclxuICAgICAgICAgICAgICAgICAgICB7cGFyc2UocXVvdGVPYmoudGV4dCl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9iPlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiYXV0aG9yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge3F1b3RlT2JqLmF1dGhvcn1cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3ltYm9sXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9ibG9ja3F1b3RlPlxyXG4gICAgICAgICAgICA6XHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIGlzQmlnTnVtYmVyID9cclxuICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lci1udW1iZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJudW1iZXJzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+e2JpZ051bWJlck9iai5udW1iZXJ9PC9oMj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YmlnTnVtYmVyT2JqLnVuZGVyVGV4dH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc21hbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmlzdWFsID8gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzdWFsT2JqXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcocHJvcHMudGV4dHMpLnN0YXJ0c1dpdGgoJzwnKSA/ICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlKHByb3BzLnRleHRzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3BhcnNlKHByb3BzLnRleHRzKX08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgKTtcclxuICAgIGxldCBjb250YWluZWRPYmogPSBwcm9wcy5iYWNrZ3JvdW5kID8gXHJcbiAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e2JhY2tncm91bmRDb2xvcjogYCR7cHJvcHMuYmFja2dyb3VuZH1gfX0gY2xhc3NOYW1lPXtcInNlY3Rpb25Db250YWluZXJcIn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0ZXh0U2VjdGlvbk9ian1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0U2VjdGlvbk9ialxyXG4gICAgICAgICAgICAgICAgKVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgY29udGFpbmVkT2JqXHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEV0NoYXJ0KHsgdGl0bGUsIHNyYywgLi4ucHJvcHMgfSkge1xyXG4gIGNvbnN0IGlmcmFtZVJlZiA9IHVzZVJlZigpXHJcbiAgY29uc3QgW2hlaWdodCwgc2V0U3RhdGVdID0gdXNlU3RhdGUoNTAwKVxyXG5cclxuICBjb25zdCBvbk1lc3NhZ2UgPSB1c2VDYWxsYmFjayhcclxuICAgICh7IGRhdGEgPSB7fSwgc291cmNlIH0pID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHNvdXJjZSAhPT0gaWZyYW1lUmVmLmN1cnJlbnQuY29udGVudFdpbmRvdyB8fFxyXG4gICAgICAgIHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICFkYXRhWydkYXRhd3JhcHBlci1oZWlnaHQnXVxyXG4gICAgICApXHJcbiAgICAgICAgcmV0dXJuXHJcblxyXG4gICAgICAvL3NldFN0YXRlKE9iamVjdC52YWx1ZXMoZGF0YVsnZGF0YXdyYXBwZXItaGVpZ2h0J10pWzBdKVxyXG4gICAgfSxcclxuICAgIFtzZXRTdGF0ZSwgaWZyYW1lUmVmXVxyXG4gIClcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgb25NZXNzYWdlKVxyXG4gICAgcmV0dXJuICgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgb25NZXNzYWdlKVxyXG4gIH0sIFtoZWlnaHQsIHNldFN0YXRlLCBvbk1lc3NhZ2VdKVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGlmcmFtZVxyXG4gICAgICByZWY9e2lmcmFtZVJlZn1cclxuICAgICAgc2Nyb2xsaW5nPVwibm9cIlxyXG4gICAgICBmcmFtZUJvcmRlcj1cIjBcIlxyXG4gICAgICB3aWR0aD1cIjEwMCVcIlxyXG4gICAgICB7Li4ucHJvcHN9XHJcbiAgICAgIHRpdGxlPXt0aXRsZX1cclxuICAgICAgc3JjPXtzcmN9XHJcbiAgICAgIGhlaWdodD17aGVpZ2h0fVxyXG4gICAgLz5cclxuICApXHJcbn1cclxuXHJcbkRXQ2hhcnQucHJvcFR5cGVzID0ge1xyXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgbG9hZGluZzogUHJvcFR5cGVzLm9uZU9mKFsnZWFnZXInLCAnbGF6eSddKSxcclxufSIsImV4cG9ydCBjb25zdCBjb250ZW50SGVhZGVyQ29uc3RhbnRzID0ge1xuICAgIHNlY3Rpb246IFwiU2VjdGlvblwiLFxuICAgIHNlY3Rpb25JRDogXCJTZWN0aW9uSURcIixcbiAgICBhdHRyaWJ1dHM6IFwiQXR0cmlidXRzXCIsXG4gICAgc291c3NlY3Rpb246IFwiU3RlcFwiLFxuICAgIHRleHRlOiBcIlRFWFRFXCIsXG4gICAgdmlzdWVsOiBcIlZJU1VFTFwiLFxuICAgIG5vbWZpY2hpZXJzb3VyY2U6IFwiTm9tRmljaGllclNvdXJjZVwiLFxuICAgIHN0eWxlZm9uZDogXCJTdHlsZUZvbmRcIixcbiAgICBzdGVwY2xhc3NlczogXCJTdGVwQ2xhc3Nlc1wiLFxuICAgIHZpc3VlbGNsYXNzZXM6IFwiVmlzdWVsQ2xhc3Nlc1wiLFxuICAgIG5vdGVzOiBcIk5vdGVzXCIsXG4gICAgZ2FtZWlkOiBcIkdhbWVJRFwiXG59O1xuXG5leHBvcnQgY29uc3Qgb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzID0ge1xuICAgIHNlY3Rpb250eXBlczoge1xuICAgICAgICBpbnRyb3RpdHJlOiBcImludHJvLXRpdHJlXCIsXG4gICAgICAgIHBsZWluZXBhZ2V0aXRyZTogXCJwbGVpbmUtcGFnZS10aXRyZVwiLFxuICAgICAgICB0ZXh0ZWNsYXNzaXF1ZTogXCJ0ZXh0ZS1jbGFzc2lxdWVcIixcbiAgICAgICAgdml6c2VjdGlvbjogXCJ2aXotc2VjdGlvblwiXG4gICAgfSxcbiAgICBzZWN0aW9uYXR0cmlidXRlczp7XG4gICAgICAgIHBsZWluZXBhZ2U6IFwicGxlaW5lLXBhZ2VcIixcbiAgICAgICAgZm9uZG5vaXI6IFwiZm9uZC1ub2lyXCIsXG4gICAgICAgIGNlbnRyZTogXCJjZW50csOpXCIsXG4gICAgICAgIGNvdGVjb3RlOiBcImPDtHTDqS1jw7R0w6lcIlxuICAgIH0sXG4gICAgdmlzdWVsdHlwZXM6e1xuICAgICAgICBwaG90bzogXCJQaG90b1wiLFxuICAgICAgICB2aWRlbzogXCJWaWRlb1wiLFxuICAgICAgICBhdWRpbzogXCJBdWRpb1wiLFxuICAgICAgICB2aXN1YWxpc2F0aW9uOiBcIlZpc3VhbGlzYXRpb25cIixcbiAgICAgICAgaWZyYW1lOiBcImlmcmFtZVwiXG4gICAgfSxcbiAgICBzb3Vzc2VjdGlvbnR5cGVzOntcbiAgICAgICAgc2Nyb2xsbm9ybWFsOiBcInNjcm9sbC1ub3JtYWxcIixcbiAgICAgICAgc2Nyb2xsaW52aXNpYmxlOiBcInNjcm9sbC1pbnZpc2libGVcIixcbiAgICAgICAgc2Nyb2xsbG9uZzogXCJzY3JvbGwtbG9uZ1wiXG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHBhcmFtZXRlcnNIZWFkZXJDb25zdGFudHMgPSB7XG4gICAgdGl0cmU6IFwiVGl0cmVcIixcbiAgICBhdXRldXJzOiBcIkF1dGV1cnNcIixcbiAgICBkYXRlOiBcIkRhdGVcIixcbiAgICBkYXRlOiBcIkRhdGVcIixcbiAgICB1cmxzOiBcIkxpZW5BdXRldXJzXCIsXG4gICAgbGllbmZpY2hpZXJzb3VyY2U6IFwiTGllbkZpY2hpZXJTb3VyY2VcIlxufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHBhcnNlIGZyb20gXCJodG1sLXJlYWN0LXBhcnNlclwiO1xuaW1wb3J0IERXQ2hhcnQgZnJvbSBcIi4vRFdDaGFydFwiO1xuaW1wb3J0IHsgb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzIH0gZnJvbSBcIi4uL2dlbmVyYXRvci9jb25zdGFudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFZpelNlY3Rpb24ocHJvcHMpe1xuXG4gICAgbGV0IHZpelNlY3Rpb25PYmogPSAoXG4gICAgICAgIDxzZWN0aW9uIGlkPXtwcm9wcy5saXN0SUR9IGNsYXNzTmFtZT17cHJvcHMuY2xhc3NlZH0+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgc3RlcHMgJHtnZXRTdGVwQ29tbW9uQ2xhc3MocHJvcHMuc3RlcHMpfWB9PlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm9wcy5zdGVwcy5tYXAoKHN0ZXAsaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3N0ZXAgaXMgJywgc3RlcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNRdW90ZSA9IFN0cmluZyhzdGVwLnN0ZXBjbGFzc2VzKS5pbmNsdWRlcygnY2l0YXRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBxdW90ZU9iajtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzUXVvdGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1b3RlT2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OlN0cmluZyhzdGVwLnRleHQpLnNwbGl0KCcvJylbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjpTdHJpbmcoc3RlcC50ZXh0KS5zcGxpdCgnLycpWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24ga2V5PXtpbmRleH0gY2xhc3NOYW1lPXtzdGVwLnN0ZXBjbGFzc2VzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNRdW90ZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmxvY2txdW90ZSBjbGFzc05hbWU9XCJzbWFsbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cGFyc2UocXVvdGVPYmoudGV4dCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiYXV0aG9yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtxdW90ZU9iai5hdXRob3J9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3ltYm9sXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Jsb2NrcXVvdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcoc3RlcC50ZXh0KS5zdGFydHNXaXRoKCc8JykgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlKHN0ZXAudGV4dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPntzdGVwLnRleHQgPyBwYXJzZShzdGVwLnRleHQpIDogXCJcIn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpelwiIGlkPVwidml6XCI+XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm9wcy5zdGVwcy5tYXAoKHN0ZXAsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzdGVwLnZpc3VhbCA9PT0gb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnZpc3VlbHR5cGVzLnBob3RvKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2Ake3Byb3BzLmxpc3RJRH1fJHtpbmRleH1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2Ake3Byb3BzLmxpc3RJRH1fJHtpbmRleH1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXtgYXNzZXRzL2ltZy82NzUvJHtzdGVwLmZpbGVuYW1lfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyY3NldD17YGFzc2V0cy9pbWcvMjA0OC8ke3N0ZXAuZmlsZW5hbWV9IDIwNDh3LCBhc3NldHMvaW1nLzk5MC8ke3N0ZXAuZmlsZW5hbWV9IDk5MHcsIGFzc2V0cy9pbWcvNjc1LyR7c3RlcC5maWxlbmFtZX0gNjc1dywgYXNzZXRzL2ltZy8xMzUwLyR7c3RlcC5maWxlbmFtZX0gMTM1MHcsIGFzc2V0cy9pbWcvMTAwLyR7c3RlcC5maWxlbmFtZX0gMTAwdywgYXNzZXRzL2ltZy80OTUvJHtzdGVwLmZpbGVuYW1lfSA0OTV3LCBhc3NldHMvaW1nLzEwMjQvJHtzdGVwLmZpbGVuYW1lfSAxMDI0d2B9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNpemVzPVwiKG1heC13aWR0aDogMTAwcHgpIDEwMHB4LCAobWF4LXdpZHRoOiA0OTVweCkgNDk1cHgsIChtYXgtd2lkdGg6IDY3NXB4KSA2NzVweCwgKG1heC13aWR0aDogOTkwcHgpIDk5MHB4LCAobWF4LXdpZHRoOiAgMTAyNHB4KSAxMDI0cHgsIChtYXgtd2lkdGg6ICAxMzUwcHgpIDEzNTBweCwgKG1heC13aWR0aDogIDIwNDhweCkgMjA0OHB4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGxhenkgJHtzdGVwLnZpc3VlbGNsYXNzZXN9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHN0ZXAudmlzdWFsID09PSBvcHRpb25zRHJvcGRvd25Db25zdGFudHMudmlzdWVsdHlwZXMudmlkZW8pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2aWRlbyBhdXRvUGxheSBsb29wIG11dGVkIHBsYXlzSW5saW5lIGNsYXNzTmFtZT17YHZpZGVvICR7c3RlcC52aXN1ZWxjbGFzc2VzfWB9IHByZWxvYWQ9XCJtZXRhZGF0YVwiIGtleT17YCR7cHJvcHMubGlzdElEfV8ke2luZGV4fWB9IGlkPXtgJHtwcm9wcy5saXN0SUR9XyR7aW5kZXh9YH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz17YGFzc2V0cy92aWRlb3MvJHtzdGVwLmZpbGVuYW1lfWB9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZMOpbyBub24gc3VwcG9ydMOpZS4gUsOpLWVzc2F5ZXogc3VyIHVuIGF1dHJlIGFwcGFyZWlsIG91IGZ1cmV0ZXVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ZpZGVvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihzdGVwLnZpc3VhbCA9PT0gb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnZpc3VlbHR5cGVzLmlmcmFtZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e2Ake3Byb3BzLmxpc3RJRH1fJHtpbmRleH1gfSBpZD17YCR7cHJvcHMubGlzdElEfV8ke2luZGV4fWB9IGNsYXNzTmFtZT1cImlmcmFtZUNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERXQ2hhcnQgdGl0bGU9XCJNZXN1cmVzIGQnYXJzZW5pY1wiIHNyYz17YCR7c3RlcC5maWxlbmFtZX1gfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoc3RlcC52aXN1YWwgPT09IG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cy52aXN1ZWx0eXBlcy52aXN1YWxpc2F0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGtleT17YCR7cHJvcHMubGlzdElEfV8ke2luZGV4fWB9IGlkPXtgJHtwcm9wcy5saXN0SUR9XyR7aW5kZXh9YH0gY2xhc3NOYW1lPXtgaWZyYW1lQ29udGFpbmVyICR7c3RlcC52aXN1ZWxjbGFzc2VzfWB9PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgKTtcbiAgICBsZXQgY29udGFpbmVkT2JqID0gcHJvcHMuYmFja2dyb3VuZCA/XG4gICAgICAgIChcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tiYWNrZ3JvdW5kQ29sb3I6IGAke3Byb3BzLmJhY2tncm91bmR9YH19IGNsYXNzTmFtZT17XCJzZWN0aW9uQ29udGFpbmVyXCJ9PlxuICAgICAgICAgICAgICAgIHt2aXpTZWN0aW9uT2JqfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICAgICAgOlxuICAgICAgICAoXG4gICAgICAgICAgICB2aXpTZWN0aW9uT2JqXG4gICAgICAgIClcblxuICAgIHJldHVybiAoXG4gICAgICAgIGNvbnRhaW5lZE9ialxuICAgIClcbn1cblxuZnVuY3Rpb24gZ2V0U3RlcENvbW1vbkNsYXNzKHN0ZXBzKXtcbiAgICBsZXQgY3VyU3RlcENsYXNzZXMgPSBzdGVwcy5tYXAoKHN0ZXAsIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiBzdGVwLnN0ZXBjbGFzc2VzO1xuICAgIH0pO1xuICAgIGxldCBjdXJDb21tb25DbGFzcyA9IG5ldyBBcnJheShjdXJTdGVwQ2xhc3Nlcy5sZW5ndGgpO1xuICAgIGN1clN0ZXBDbGFzc2VzLmZvckVhY2goKHN0ZXBFbGVtLCBpZHgpID0+IHtcbiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShzdGVwRWxlbSkpe1xuICAgICAgICAgICAgc3RlcEVsZW0uZm9yRWFjaChlbGVtID0+IHtcbiAgICAgICAgICAgICAgICBmb3IoIGxldCBpID0gaWR4OyBpIDwgY3VyU3RlcENsYXNzZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICBpZihjdXJTdGVwQ2xhc3Nlc1tpXS5pbmNsdWRlcyhlbGVtKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJDb21tb25DbGFzc1tpXSA9IChlbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mKHN0ZXBFbGVtKSA9PT0gXCJzdHJpbmdcIil7XG4gICAgICAgICAgICBmb3IoIGxldCBpID0gaWR4OyBpIDwgY3VyU3RlcENsYXNzZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIGlmKGN1clN0ZXBDbGFzc2VzW2ldLmluY2x1ZGVzKHN0ZXBFbGVtKSl7XG4gICAgICAgICAgICAgICAgICAgIGN1ckNvbW1vbkNsYXNzW2ldID0gKHN0ZXBFbGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY3VyQ29tbW9uQ2xhc3MucmVkdWNlKGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gKGEgPT09IGIgJiYgYSAhPT0gXCJcIiAmJiBiICE9PSBcIlwiKSA/IGEgOiBcIlwiOyB9KTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBGdWxsUGFnZVNlY3Rpb24ocHJvcHMpe1xyXG5cclxuICAgIGxldCBmdWxscGFnZVNlY3Rpb25PYmogPSAoXHJcbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtgZnVsbC1wYWdlLXNlY3Rpb24gJHtwcm9wcy5jbGFzc2VzfWB9PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlSW1hZ2VcIj5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5maWxlbmFtZSA/IFxyXG4gICAgICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMudmlzdWFsID09PSBcIlBob3RvXCIgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YCR7cHJvcHMuaWR9YH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD17YCR7cHJvcHMuaWR9YH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9e2Bhc3NldHMvaW1nLzY3NS8ke3Byb3BzLmZpbGVuYW1lfWB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmNzZXQ9e2Bhc3NldHMvaW1nLzIwNDgvJHtwcm9wcy5maWxlbmFtZX0gMjA0OHcsIGFzc2V0cy9pbWcvOTkwLyR7cHJvcHMuZmlsZW5hbWV9IDk5MHcsIGFzc2V0cy9pbWcvNjc1LyR7cHJvcHMuZmlsZW5hbWV9IDY3NXcsIGFzc2V0cy9pbWcvMTM1MC8ke3Byb3BzLmZpbGVuYW1lfSAxMzUwdywgYXNzZXRzL2ltZy8xMDAvJHtwcm9wcy5maWxlbmFtZX0gMTAwdywgYXNzZXRzL2ltZy80OTUvJHtwcm9wcy5maWxlbmFtZX0gNDk1dywgYXNzZXRzL2ltZy8xMDI0LyR7cHJvcHMuZmlsZW5hbWV9IDEwMjR3YH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNpemVzPVwiKG1heC13aWR0aDogMTAwcHgpIDEwMHB4LCAobWF4LXdpZHRoOiA0OTVweCkgNDk1cHgsIChtYXgtd2lkdGg6IDY3NXB4KSA2NzVweCwgKG1heC13aWR0aDogOTkwcHgpIDk5MHB4LCAobWF4LXdpZHRoOiAgMTAyNHB4KSAxMDI0cHgsIChtYXgtd2lkdGg6ICAxMzUwcHgpIDEzNTBweCwgKG1heC13aWR0aDogIDIwNDhweCkgMjA0OHB4XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BsYXp5ICR7cHJvcHMudmlzdWVsY2xhc3Nlc31gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnZpc3VhbCA9PT0gXCJWaWRlb1wiID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmlkZW8gYXV0b1BsYXkgbG9vcCBtdXRlZCBwbGF5c0lubGluZSBjbGFzc05hbWU9e2B2aWRlbyAke3Byb3BzLnZpc3VlbGNsYXNzZXN9YH0gcHJlbG9hZD1cIm1ldGFkYXRhXCIga2V5PXtgJHtwcm9wcy5pZH1gfSBpZD17YCR7cHJvcHMuaWR9YH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2Ugc3JjPXtgYXNzZXRzL3ZpZGVvcy8ke3Byb3BzLmZpbGVuYW1lfWB9Lz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlkw6lvIG5vbiBzdXBwb3J0w6llLiBSw6ktZXNzYXlleiBzdXIgdW4gYXV0cmUgYXBwYXJlaWwgb3UgZnVyZXRldXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92aWRlbz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICg8ZGl2PjwvZGl2PilcclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgKDxkaXY+PC9kaXY+KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLmZpbGVuYW1lID8gXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWx0ZXJcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcHRpb25ob2xkZXJcIj5cclxuICAgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9e2BjYXB0aW9uICR7cHJvcHMubWFpblRpdGxlLmNsYXNzfWB9Pntwcm9wcy5tYWluVGl0bGUudGV4dH08L2gyPlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnN1YlRpdGxlID8gXHJcbiAgICAgICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPXtgY2FwdGlvbiAke3Byb3BzLnN1YlRpdGxlLmNsYXNzfWB9Pntwcm9wcy5zdWJUaXRsZS50ZXh0fTwvaDM+XHJcbiAgICAgICAgICAgICAgICAgICAgKTpcclxuICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuICAgICk7XHJcbiAgICBsZXQgY29udGFpbmVkT2JqID0gcHJvcHMuYmFja2dyb3VuZCA/IFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e2JhY2tncm91bmRDb2xvcjogYCR7cHJvcHMuYmFja2dyb3VuZH1gfX0gY2xhc3NOYW1lPXtcInNlY3Rpb25Db250YWluZXJcIn0+XHJcbiAgICAgICAgICAgICAgICB7ZnVsbHBhZ2VTZWN0aW9uT2JqfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICAgICAgOlxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgZnVsbHBhZ2VTZWN0aW9uT2JqXHJcbiAgICAgICAgKVxyXG5cclxuICAgIHJldHVybiBjb250YWluZWRPYmo7XHJcblxyXG59IiwiXG5pbXBvcnQgeyBzYXZlQXMgfSBmcm9tICdmaWxlLXNhdmVyJztcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCB7IGNvbnRlbnRIZWFkZXJDb25zdGFudHMsIG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cywgcGFyYW1ldGVyc0hlYWRlckNvbnN0YW50cyB9IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RydWN0dXJlKGNvbnRlbnREYXRhLCBwYXJhbXNEYXRhKXtcblxuICAgIGxldCBzdHJ1Y3R1cmVEYXRhID0ge307IC8vIFdob2xlIHNjcm9sbHkgc3RydWN0dXJlXG4gICAgbGV0IHZpelNlY3Rpb25JRHMgPSBbXTsgLy8gTGlzdCBvZiBzZWN0aW9uSURzXG5cbiAgICBsZXQgb3B0aW9ucyA9IGdldE9wdGlvbnMocGFyYW1zRGF0YSk7XG5cbiAgICBjb25zb2xlLmxvZygnY29udGVudCBEYXRhJywgY29udGVudERhdGEpO1xuICAgIGNvbnRlbnREYXRhLm1hcCgocm93RGF0YSxpbmRleCkgPT4ge1xuXG4gICAgICAgIGlmKHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zZWN0aW9uXSA9PT0gb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnNlY3Rpb250eXBlcy5pbnRyb3RpdHJlKXtcbiAgICAgICAgICAgIGxldCBjbGFzc2VzID0gcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnN0ZXBjbGFzc2VzXTtcbiAgICAgICAgICAgIGxldCBjdXJBbW9yY2UgPSByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMudGV4dGVdO1xuICAgICAgICAgICAgbGV0IHNlY3Rpb25CYWNrZ3JvdW5kID0gcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnN0eWxlZm9uZF07XG4gICAgICAgICAgICBzdHJ1Y3R1cmVEYXRhW3Jvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zZWN0aW9uSURdXSA9IHtcbiAgICAgICAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgICAgICAgIHNlY3Rpb25UeXBlOiBvcHRpb25zRHJvcGRvd25Db25zdGFudHMuc2VjdGlvbnR5cGVzLmludHJvdGl0cmUsXG4gICAgICAgICAgICAgICAgb3B0aW9uRGF0YTogb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBhbW9yY2U6IGN1ckFtb3JjZSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBzZWN0aW9uQmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBjbGFzc2VzOiBwYXJzZUNsYXNzZXMoY2xhc3NlcyksXG4gICAgICAgICAgICAgICAgZ2FtZWlkOiByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuZ2FtZWlkXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zZWN0aW9uXSA9PT0gb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnNlY3Rpb250eXBlcy50ZXh0ZWNsYXNzaXF1ZSl7XG4gICAgICAgICAgICBsZXQgdGV4dHMgPSByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMudGV4dGVdO1xuICAgICAgICAgICAgbGV0IGNsYXNzZXMgPSByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc3RlcGNsYXNzZXNdO1xuICAgICAgICAgICAgbGV0IHNlY3Rpb25CYWNrZ3JvdW5kID0gcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnN0eWxlZm9uZF07XG4gICAgICAgICAgICBzdHJ1Y3R1cmVEYXRhW3Jvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zZWN0aW9uSURdXSA9IHtcbiAgICAgICAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgICAgICAgIHNlY3Rpb25UeXBlOiBvcHRpb25zRHJvcGRvd25Db25zdGFudHMuc2VjdGlvbnR5cGVzLnRleHRlY2xhc3NpcXVlLFxuICAgICAgICAgICAgICAgIHRleHRzOiB0ZXh0cyxcbiAgICAgICAgICAgICAgICB2aXN1YWw6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy52aXN1ZWxdLFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMubm9tZmljaGllcnNvdXJjZV0sXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogc2VjdGlvbkJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgY2xhc3NlczogcGFyc2VDbGFzc2VzKGNsYXNzZXMpLFxuICAgICAgICAgICAgICAgIHZpc3VlbGNsYXNzZXM6IHBhcnNlQ2xhc3Nlcyhyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMudmlzdWVsY2xhc3Nlc10pLFxuICAgICAgICAgICAgICAgIGdhbWVpZDogcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLmdhbWVpZF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc2VjdGlvbl0gPT09IG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cy5zZWN0aW9udHlwZXMucGxlaW5lcGFnZXRpdHJlKXtcbiAgICAgICAgICAgIGxldCB0aXRsZU9iaiA9IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy50ZXh0ZV07XG4gICAgICAgICAgICBpZiAoaXNKc29uKHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy50ZXh0ZV0pKXtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dE9iaiA9IEpTT04ucGFyc2Uocm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnRleHRlXSk7XG4gICAgICAgICAgICAgICAgdGl0bGVPYmogPSB0ZXh0T2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RydWN0dXJlRGF0YVtyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc2VjdGlvbklEXV0gPSB7XG4gICAgICAgICAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgICAgICAgICBzZWN0aW9uVHlwZTogb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnNlY3Rpb250eXBlcy5wbGVpbmVwYWdldGl0cmUsXG4gICAgICAgICAgICAgICAgdGV4dHM6IGlzSnNvbihyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMudGV4dGVdKSA/IHRpdGxlT2JqXG4gICAgICAgICAgICAgICAgOntcbiAgICAgICAgICAgICAgICAgICAgbWFpblRpdGxlOntjbGFzczogXCJcIiwgdGV4dDogdGl0bGVPYmp9LFxuICAgICAgICAgICAgICAgICAgICBzdWJUaXRsZTogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdmlzdWFsOiByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMudmlzdWVsXSxcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLm5vbWZpY2hpZXJzb3VyY2VdLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zdHlsZWZvbmRdLFxuICAgICAgICAgICAgICAgIGNsYXNzZXM6IHBhcnNlQ2xhc3Nlcyhyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc3RlcGNsYXNzZXNdKSxcbiAgICAgICAgICAgICAgICB2aXN1ZWxjbGFzc2VzOiBwYXJzZUNsYXNzZXMocm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnZpc3VlbGNsYXNzZXNdKSxcbiAgICAgICAgICAgICAgICBnYW1laWQ6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5nYW1laWRdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYocm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnNlY3Rpb25dID09PSBvcHRpb25zRHJvcGRvd25Db25zdGFudHMuc2VjdGlvbnR5cGVzLnZpenNlY3Rpb24pe1xuXG4gICAgICAgICAgICBsZXQgY3VyRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dHM6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5hdHRyaWJ1dHNdLFxuICAgICAgICAgICAgICAgIHNjcm9sbFR5cGU6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zb3Vzc2VjdGlvbl0sXG4gICAgICAgICAgICAgICAgdGV4dDogcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnRleHRlXSxcbiAgICAgICAgICAgICAgICB2aXN1YWw6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy52aXN1ZWxdLFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMubm9tZmljaGllcnNvdXJjZV0sXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnN0eWxlZm9uZF0sXG4gICAgICAgICAgICAgICAgdmlzdWVsY2xhc3NlczogcGFyc2VDbGFzc2VzKHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy52aXN1ZWxjbGFzc2VzXSksXG4gICAgICAgICAgICAgICAgc3RlcGNsYXNzZXM6IHBhcnNlQ2xhc3Nlcyhyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc3RlcGNsYXNzZXNdKSxcbiAgICAgICAgICAgICAgICBnYW1laWQ6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5nYW1laWRdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYoc3RydWN0dXJlRGF0YS5oYXNPd25Qcm9wZXJ0eShyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc2VjdGlvbklEXSkpe1xuICAgICAgICAgICAgICAgIC8vIEFkZCBzdGVwIHRvIGV4aXN0aW5nXG4gICAgICAgICAgICAgICAgbGV0IGN1clZpelNlY3Rpb24gPSBzdHJ1Y3R1cmVEYXRhW3Jvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zZWN0aW9uSURdXTtcbiAgICAgICAgICAgICAgICBjdXJWaXpTZWN0aW9uLnB1c2goY3VyRGF0YSk7XG4gICAgICAgICAgICAgICAgc3RydWN0dXJlRGF0YVtyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc2VjdGlvbklEXV0gPSBjdXJWaXpTZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBzdHJ1Y3R1cmVEYXRhW3Jvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zZWN0aW9uSURdXSA9IFtjdXJEYXRhXTtcbiAgICAgICAgICAgICAgICB2aXpTZWN0aW9uSURzLnB1c2gocm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnNlY3Rpb25JRF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgdml6U2VjdGlvbklEcy5tYXAoKGtleSkgPT4ge1xuICAgICAgICBsZXQgY3VyU2VjdGlvbiA9IHN0cnVjdHVyZURhdGFba2V5XTtcbiAgICAgICAgbGV0IHNlY3Rpb25BdHRyID0gY3VyU2VjdGlvblswXS5hdHRyaWJ1dHMgPT09IG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cy5zZWN0aW9uYXR0cmlidXRlcy5jZW50cmUgPyBcIiBmdWxsLXBhZ2VcIiA6IFwiXCI7XG4gICAgICAgIGxldCBzZWN0aW9uQmFja2dyb3VuZCA9IGN1clNlY3Rpb25bMF0uYmFja2dyb3VuZDtcbiAgICAgICAgc3RydWN0dXJlRGF0YVtrZXldID0ge1xuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBzZWN0aW9uVHlwZTogb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnNlY3Rpb250eXBlcy52aXpzZWN0aW9uLFxuICAgICAgICAgICAgbGlzdElEOiBrZXksXG4gICAgICAgICAgICBzdGVwczogY3VyU2VjdGlvbixcbiAgICAgICAgICAgIGNsYXNzZWQ6IGB2aXotc2VjdGlvbiR7c2VjdGlvbkF0dHJ9YCxcbiAgICAgICAgICAgIG1lZGlhSW5mbzogMCxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHNlY3Rpb25CYWNrZ3JvdW5kXG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhzdHJ1Y3R1cmVEYXRhKTtcbn1cblxuLyoqXG4gKiBUYWtlIGFydGljbGUgc3RydWN0dXJlIGFzIENTViBhbmQgdHJhbnNmb3JtIGl0IGFzIGNhbGxiYWNrQXJyYXlcbiAqIEBwYXJhbSAge09iamVjdH0gY29udGVudERhdGEgYXJ0aWNsZSBzdHJ1Y3R1cmVcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyBhcnRpY2xlIG9wdGlvbnNcbiAqIEByZXR1cm4ge0FycmF5fSBTY3JvbGxlciBjYWxsYmFjayBhcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVDYWxsYmFja3MoY29udGVudERhdGEsIHBhcmFtc0RhdGEpe1xuXG4gICAgbGV0IGZ1bGxTdHJ1Y3R1cmUgPSBnZXRTdHJ1Y3R1cmUoY29udGVudERhdGEsIHBhcmFtc0RhdGEpO1xuICAgIGxldCBjYWxsYmFja3NBcnJheSA9IFtdO1xuICAgIGZ1bGxTdHJ1Y3R1cmUubWFwKGNhbGxiYWNrID0+IHtcbiAgICAgICAgaWYoY2FsbGJhY2suc2VjdGlvblR5cGUgPT09IFwidml6LXNlY3Rpb25cIil7XG4gICAgICAgICAgICBsZXQgY3VyU3RlcHMgPSBbXTtcbiAgICAgICAgICAgIGNhbGxiYWNrLnN0ZXBzLm1hcCgoc3RlcCxpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjdXJDb21tYW5kID0gKEVOVl9DT05GSUcuZG93bmxvYWRTdHJ1YyAmJiBFTlZfQ09ORklHLmF1dG9yZW5kZXIpID8gKCgpPT57fSkgOiBcIlwiO1xuICAgICAgICAgICAgICAgIGlmKHN0ZXAudmlzdWFsICE9PSBcIlwiKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1ck51bWJlckFycmF5ID0gQXJyYXkoY2FsbGJhY2suc3RlcHMubGVuZ3RoKS5maWxsKG51bGwpLm1hcCgoXywgaSkgPT4gaSkuZmlsdGVyKGQgPT4gZCAhPT0gaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3BhY2l0eVNlbGVjdG9yID0gY3VyTnVtYmVyQXJyYXkubWFwKGluZCA9PiBgIyR7Y2FsbGJhY2sua2V5fV8ke2luZH1gKS5qb2luKCcsJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmKEVOVl9DT05GSUcuZG93bmxvYWRTdHJ1YyAmJiBFTlZfQ09ORklHLmF1dG9yZW5kZXIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ29tbWFuZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoYCMke2NhbGxiYWNrLmtleX1fJHtpbmRleH1gKS50cmFuc2l0aW9uKCkuc3R5bGUoJ29wYWNpdHknLCAxKS5zdHlsZSgnZGlzcGxheScsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG9wYWNpdHlTZWxlY3RvciAhPT0gXCJcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdEFsbChgJHtvcGFjaXR5U2VsZWN0b3J9YCkudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywgMCkuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ29tbWFuZCA9IGBkMy5zZWxlY3QoJyMke2NhbGxiYWNrLmtleX1fJHtpbmRleH0nKS50cmFuc2l0aW9uKCkuc3R5bGUoJ29wYWNpdHknLCAxKS5zdHlsZSgnZGlzcGxheScsIG51bGwpOyR7b3BhY2l0eVNlbGVjdG9yICE9PSBcIlwiID8gYGQzLnNlbGVjdEFsbCgnJHtvcGFjaXR5U2VsZWN0b3J9JykudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywgMCkuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO2AgOiBcIlwifWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihTdHJpbmcoc3RlcC5maWxlbmFtZSkuc3RhcnRzV2l0aChcIlRBR0lEXCIpKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1clRhZ0lEID0gU3RyaW5nKHN0ZXAuZmlsZW5hbWUpLnNwbGl0KCc9JylbMV07XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJUYWdJRF9pbmRleCA9IHBhcnNlSW50KGN1clRhZ0lELnNwbGl0KFwiX1wiKVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJOdW1iZXJBcnJheSA9IEFycmF5KGNhbGxiYWNrLnN0ZXBzLmxlbmd0aCkuZmlsbChudWxsKS5tYXAoKF8sIGkpID0+IGkpLmZpbHRlcihkID0+IGQgIT09IGN1clRhZ0lEX2luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9wYWNpdHlTZWxlY3RvciA9IGN1ck51bWJlckFycmF5Lm1hcChpbmQgPT4gYCMke2NhbGxiYWNrLmtleX1fJHtpbmR9YCkuam9pbignLCcpO1xuICAgICAgICAgICAgICAgICAgICBpZihFTlZfQ09ORklHLmRvd25sb2FkU3RydWMgJiYgRU5WX0NPTkZJRy5hdXRvcmVuZGVyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNvbW1hbmQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChgIyR7Y3VyVGFnSUR9YCkudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywgMSkuc3R5bGUoJ2Rpc3BsYXknLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYob3BhY2l0eVNlbGVjdG9yICE9PSBcIlwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdEFsbChgJHtvcGFjaXR5U2VsZWN0b3J9YCkudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywgMCkuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ29tbWFuZCA9IGBkMy5zZWxlY3QoJyMke2N1clRhZ0lEfScpLnRyYW5zaXRpb24oKS5zdHlsZSgnb3BhY2l0eScsIDEpLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7JHtvcGFjaXR5U2VsZWN0b3IgIT09IFwiXCIgPyBgZDMuc2VsZWN0QWxsKCcke29wYWNpdHlTZWxlY3Rvcn0nKS50cmFuc2l0aW9uKCkuc3R5bGUoJ29wYWNpdHknLCAwKS5zdHlsZSgnZGlzcGxheScsICdub25lJyk7YCA6IFwiXCJ9YDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKEVOVl9DT05GSUcuZG93bmxvYWRTdHJ1YyAmJiBFTlZfQ09ORklHLmF1dG9yZW5kZXIpe1xuICAgICAgICAgICAgICAgICAgICAgIGN1clN0ZXBzLnB1c2goY3VyQ29tbWFuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGN1clN0ZXBzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBgKCkgPT4geyR7Y3VyQ29tbWFuZH19YFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjYWxsYmFja3NBcnJheS5wdXNoKGN1clN0ZXBzKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYoRU5WX0NPTkZJRy5kb3dubG9hZFN0cnVjICYmIEVOVl9DT05GSUcuYXV0b3JlbmRlcil7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ0dPVCBDQUxMQkFDS1MgQVJSQVk6ICcsIGNhbGxiYWNrc0FycmF5KTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrc0FycmF5O1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgICBjb25zb2xlLmxvZygnU2F2aW5nIGNhbGxiYWNrcyB0byBmaWxlLi4uJyk7XG4gICAgICAgIGNvbnN0IHRleHQgPSBgaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xcbmV4cG9ydCBjb25zdCBjYWxsYmFja3MgPSAke0pTT04uc3RyaW5naWZ5KGNhbGxiYWNrc0FycmF5LCBudWxsLCAyKX1gO1xuICAgICAgICBsZXQgYmxvYiA9IG5ldyBCbG9iKFt0ZXh0LnJlcGxhY2VBbGwoJ1wiJywgJycpXSwge3R5cGU6IFwidGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04XCJ9KTtcbiAgICAgICAgc2F2ZUFzKGJsb2IsIFwiY2FsbGJhY2tzLmpzXCIpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gaXNKc29uKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIEpTT04ucGFyc2Uoc3RyKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ2xhc3NlcyhzdHIpe1xuICAgIHJldHVybiBBcnJheS5mcm9tKHN0ci5zcGxpdCgnOycpKS5qb2luKCcgJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcHRpb25zKHBhcmFtc0RhdGEpe1xuXG4gIHJldHVybiB7XG4gICAgdGl0bGU6IHBhcmFtc0RhdGFbMF1bcGFyYW1ldGVyc0hlYWRlckNvbnN0YW50cy50aXRyZV0sXG4gICAgYXV0aG9yczogcGFyYW1zRGF0YVswXVtwYXJhbWV0ZXJzSGVhZGVyQ29uc3RhbnRzLmF1dGV1cnNdLFxuICAgIHVybHM6IHBhcmFtc0RhdGFbMF1bcGFyYW1ldGVyc0hlYWRlckNvbnN0YW50cy51cmxzXSxcbiAgICBkYXRlOiBwYXJhbXNEYXRhWzBdW3BhcmFtZXRlcnNIZWFkZXJDb25zdGFudHMuZGF0ZV1cbiAgfTtcbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmV4cG9ydCBjb25zdCBjYWxsYmFja3MgPSBbXG4gIFtcbiAgICAoKSA9PiB7ZDMuc2VsZWN0KCcjdml6U2VjdGlvbjFfMF8wJykudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywgMSkuc3R5bGUoJ2Rpc3BsYXknLCBudWxsKTt9XG4gIF1cbl0iLCJleHBvcnQgZnVuY3Rpb24gc2hvdWxkQnJlYWsoYnIpIHtcclxuICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCA8IGJyXHJcbiAgfVxyXG4gIFxyXG4gIGV4cG9ydCBmdW5jdGlvbiBpc1hTKCkge1xyXG4gICAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGggPCA0MDBcclxuICAgIH1cclxuICBcclxuICBleHBvcnQgZnVuY3Rpb24gaXNQb3J0cmFpdCAoKSB7XHJcbiAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0IC8gd2luZG93LmlubmVyV2lkdGggPiAxXHJcbiAgfVxyXG4gIFxyXG4gIGV4cG9ydCBmdW5jdGlvbiBpc1NtKCkge1xyXG4gICAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGggPD0gNTc2XHJcbiAgICB9XHJcbiAgXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGlzTWQoKSB7XHJcbiAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCA+IDU3NiAmJiB3aW5kb3cuaW5uZXJXaWR0aCA8PSA3NjhcclxuICAgIH1cclxuICBcclxuICBleHBvcnQgZnVuY3Rpb24gaXNMZygpIHtcclxuICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCA+IDc2OCAmJiB3aW5kb3cuaW5uZXJXaWR0aCA8PSA5OTJcclxuICB9XHJcbiAgXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGlzWExnKCkge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoID4gOTkyXHJcbiAgfSIsImltcG9ydCB7IGNvbnN0YW50IH0gZnJvbSBcImxvZGFzaFwiO1xyXG5pbXBvcnQgbWFwYm94Z2wgZnJvbSBcIm1hcGJveC1nbFwiO1xyXG5pbXBvcnQgKiBhcyBzY3JlZW4gZnJvbSBcIi4vc2NyZWVuLmpzXCI7XHJcblxyXG5jb25zdCBjb25zdGFudHMgPSB7XHJcbiAgdG9rZW46XHJcbiAgICBcInBrLmV5SjFJam9pYkdWa1pYWnZhWElpTENKaElqb2lZMnAyYlc4MWRIVTJNV1YxY1RSaGNYSXphWFpxTUdZeGNpSjkuV3JJRjhvNjlhUl9Uc3RERnU2UXlhZ1wiLFxyXG4gIG1hcEJvdW5kczoge1xyXG4gICAgbWF4OiBbLTE2NSwgMzAuNzI4MzMwLCAtMjUuMjM2MzYsIDgyLjIyOTQzNF0sXHJcbiAgfSxcclxuICBjb2xvcnM6IFtcclxuICAgIFwiI0Y0Q0JDNlwiLFxyXG4gICAgXCIjRjRBMzlBXCIsXHJcbiAgICBcIiNFRTZBNUVcIixcclxuICAgIFwiI0NFMzcyN1wiLFxyXG4gICAgXCIjQTIyODIzXCIsXHJcbiAgICBcIiM3NTFBMUFcIixcclxuICAgIFwiIzQxMDAwMFwiLFxyXG4gIF0sXHJcbiAgY2x1c3Rlck1heFpvb206IDExLFxyXG4gIGNsdXN0ZXJSYWRpdXM6IDMwLFxyXG4gIGNsdXN0ZXJNaW5Qb2ludHM6IDVcclxufTtcclxuXHJcbm1hcGJveGdsLmFjY2Vzc1Rva2VuID0gY29uc3RhbnRzLnRva2VuO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1hcCB7XHJcbiAgY29uc3RydWN0b3IoZGl2LCBjbGFzc05hbWUsIGRhdGFTb3VyY2VBcnJheSwgc3R5bGVVcmwsIGluaXRDb29yZHMsIGRpc2FibGVDb250cm9scz10cnVlLCB3aXRoSGFuZGxlcnM9ZmFsc2UsIG1heEJvdW5kcyA9IG51bGwpIHtcclxuXHJcbiAgICB0aGlzLmRhdGFTb3VyY2VPYmplY3RzID0gZGF0YVNvdXJjZUFycmF5O1xyXG4gICAgdGhpcy5jb25zdGFudHMgPSBjb25zdGFudHM7XHJcbiAgICB0aGlzLm1hcCA9IG5ldyBtYXBib3hnbC5NYXAoe1xyXG4gICAgICBjb250YWluZXI6IGNsYXNzTmFtZSxcclxuICAgICAgc3R5bGU6IHN0eWxlVXJsLFxyXG4gICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IHRydWUsXHJcbiAgICAgIGNlbnRlcjogaW5pdENvb3Jkcy5jZW50ZXIsXHJcbiAgICAgIHpvb206IGluaXRDb29yZHMuem9vbVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLm1heEJvdW5kcyA9IGluaXRDb29yZHM7XHJcbiAgICB0aGlzLmJvdW5kc0xpc3QgPSB0aGlzLmRhdGFTb3VyY2VPYmplY3RzLm1hcChkYXRhU291cmNlID0+IGRhdGFTb3VyY2VbJ2Nvb3JkcyddKTtcclxuICAgIHRoaXMuZXh0cmFCb3VuZHMgPSB0aGlzLmRhdGFTb3VyY2VPYmplY3RzLm1hcChkYXRhU291cmNlID0+IGRhdGFTb3VyY2VbJ2V4dHJhQ29vcmRzJ10pO1xyXG4gICAgaWYoZGlzYWJsZUNvbnRyb2xzKXtcclxuICAgICAgdGhpcy5tYXAuc2Nyb2xsWm9vbS5kaXNhYmxlKCk7XHJcbiAgICAgIHRoaXMubWFwLmRyYWdQYW4uZGlzYWJsZSgpO1xyXG4gICAgICB0aGlzLm1hcC5kcmFnUm90YXRlLmRpc2FibGUoKTtcclxuICAgICAgdGhpcy5tYXAuYm94Wm9vbS5kaXNhYmxlKCk7XHJcbiAgICAgIHRoaXMubWFwLmRvdWJsZUNsaWNrWm9vbS5kaXNhYmxlKCk7XHJcbiAgICB9XHJcbiAgICBpZih3aXRoSGFuZGxlcnMpe1xyXG4gICAgICB0aGlzLnNldHVwSGFuZGxlcnMoKTtcclxuICAgIH1cclxuICAgIHRoaXMuZGF0YUxpc3QgPSB0aGlzLmRhdGFTb3VyY2VPYmplY3RzLm1hcChkYXRhU291cmNlID0+IGRhdGFTb3VyY2VbJ2RhdGEnXSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVCb3VuZHMoXHJcbiAgICBib3VuZHMgPSB0aGlzLm1heEJvdW5kcyxcclxuICAgIHBhZGRpbmcgPSBzY3JlZW4uaXNYUygpID8gNSA6IHNjcmVlbi5pc1NtKCkgPyAxNSA6IDIwLFxyXG4gICAgZHVyYXRpb24gPSAxMDBcclxuICApIHtcclxuICAgIHRoaXMubWFwID0gdGhpcy5tYXAuZml0Qm91bmRzKGJvdW5kcywge1xyXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUNvb3Jkc0FuZFpvb20oZGF0YVBhaXIpe1xyXG4gICAgdGhpcy5tYXAuZmx5VG8oe1xyXG4gICAgICBjZW50ZXI6IGRhdGFQYWlyLmNlbnRlcixcclxuICAgICAgem9vbTogZGF0YVBhaXIuem9vbSxcclxuICAgICAgc3BlZWQ6IDAuNyxcclxuICAgICAgY3VydmU6IDEsXHJcbiAgICAgIGVhc2luZyh0KXtcclxuICAgICAgICByZXR1cm4gdFxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdmlld0JvdW5kT2JqKG9iamluZGV4KXtcclxuICAgIHRoaXMudXBkYXRlQ29vcmRzQW5kWm9vbSh0aGlzLmJvdW5kc0xpc3Rbb2JqaW5kZXhdKTtcclxuICB9XHJcblxyXG4gIHZpZXdFeHRyYUJvdW5kT2JqKG9iamluZGV4LCBrZXlOYW1lLCBkdXJhdGlvbil7XHJcbiAgICBsZXQgZXh0cmFCb3VuZHMgPSB0aGlzLmV4dHJhQm91bmRzW29iamluZGV4XTtcclxuICAgIHRoaXMudXBkYXRlQ29vcmRzQW5kWm9vbShleHRyYUJvdW5kc1trZXlOYW1lXSk7XHJcbiAgfVxyXG5cclxuICB2aWV3SW5pdEJvdW5kcyhkdXJhdGlvbil7XHJcbiAgICB0aGlzLnVwZGF0ZUNvb3Jkc0FuZFpvb20odGhpcy5tYXhCb3VuZHMpO1xyXG4gIH1cclxuICBzaG93U291cmNlWEl0ZW1ZKHNvdXJjZUluZGV4LCBpdGVtSW5kZXgpIHtcclxuICAgIHRoaXMudXBkYXRlQ29vcmRzQW5kWm9vbSh0aGlzLmRhdGFMaXN0W3NvdXJjZUluZGV4XVtpdGVtSW5kZXhdKVxyXG4gIH1cclxuXHJcbiAgaW5pdE1hcFNvdXJjZXNBbmRMYXllcnMoKSB7XHJcbiAgICBpZiAodGhpcy5pbml0aWFsaXNlZCkgcmV0dXJuO1xyXG4gICAgdGhpcy5pbml0aWFsaXNlZCA9IHRydWU7XHJcbiAgICBcclxuICAgIHRoaXMuZGF0YVNvdXJjZU9iamVjdHMubWFwKGRhdGFTb3VyY2UgPT4ge1xyXG4gICAgICB0aGlzLm1hcC5hZGRTb3VyY2UoZGF0YVNvdXJjZVsnc291cmNlTmFtZSddLCB7XHJcbiAgICAgICAgdHlwZTogZGF0YVNvdXJjZVsnc291cmNlVHlwZSddLFxyXG4gICAgICAgIGRhdGE6IGRhdGFTb3VyY2VbJ3NvdXJjZURhdGEnXVxyXG4gICAgICB9KTtcclxuICAgICAgaWYoZGF0YVNvdXJjZVsnbGF5ZXJUeXBlJ10gPT09ICdmaWxsJyl7XHJcbiAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIoe1xyXG4gICAgICAgICAgaWQ6IGRhdGFTb3VyY2VbJ3NvdXJjZU5hbWUnXSxcclxuICAgICAgICAgIHR5cGU6IGRhdGFTb3VyY2VbJ2xheWVyVHlwZSddLFxyXG4gICAgICAgICAgc291cmNlOiBkYXRhU291cmNlWydzb3VyY2VOYW1lJ10sXHJcbiAgICAgICAgICBwYWludDoge1xyXG4gICAgICAgICAgICAnZmlsbC1jb2xvcic6IGRhdGFTb3VyY2VbJ2NvbG9yJ10sXHJcbiAgICAgICAgICAgICdmaWxsLW9wYWNpdHknOiBkYXRhU291cmNlWydvcGFjaXR5J11cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihkYXRhU291cmNlWydsYXllclR5cGUnXSA9PT0gJ2NpcmNsZScpe1xyXG4gICAgICAgIHRoaXMubWFwLmFkZExheWVyKHtcclxuICAgICAgICAgIGlkOiBkYXRhU291cmNlWydzb3VyY2VOYW1lJ10sXHJcbiAgICAgICAgICB0eXBlOiBkYXRhU291cmNlWydsYXllclR5cGUnXSxcclxuICAgICAgICAgIHNvdXJjZTogZGF0YVNvdXJjZVsnc291cmNlTmFtZSddLFxyXG4gICAgICAgICAgcGFpbnQ6IHtcclxuICAgICAgICAgICAgJ2NpcmNsZS1jb2xvcic6IFsnbWF0Y2gnLCBbXCJnZXRcIiwgXCJzdGF0dXRcIl0sICdSZWNoZXJjaGVzIGVmZmVjdHXDqWVzIG91IGVuIGNvdXJzJywgJyNmZjU2MWMnLCAnUGhhc2UgcHLDqWxpbWluYWlyZScsICcjZmZjNzM0JywgJyNiN2I3YjcnXSxcclxuICAgICAgICAgICAgJ2NpcmNsZS1yYWRpdXMnOiA1XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgY2hhbmdlTGF5ZXJQYWludChpZCwgcHJvcGVydHksIHZhbHVlKXtcclxuICAgIHRoaXMubWFwLnNldFBhaW50UHJvcGVydHkoaWQsIHByb3BlcnR5LCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBzZXR1cEhhbmRsZXJzKCl7XHJcbiAgICBcclxuICAgIHRoaXMubWFwLm9uKFwibW91c2VvdmVyXCIsIFwicGVuc2lvbm5hdHNTb3VyY2VcIiwgKGUpID0+IHtcclxuICAgICAgdGhpcy5tYXAuZ2V0Q2FudmFzKCkuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XHJcbiAgICAgIHRoaXMuZHJhd1BvcHVwKGUpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLm1hcC5vbihcIm1vdXNlb3V0XCIsIFwicGVuc2lvbm5hdHNTb3VyY2VcIiwgKGUpID0+IHtcclxuICAgICAgdGhpcy5tYXAuZ2V0Q2FudmFzKCkuc3R5bGUuY3Vyc29yID0gXCJkZWZhdWx0XCI7XHJcbiAgICAgIHRoaXMuY2xvc2VQb3B1cCgpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLm1hcC5vbihcImNsaWNrXCIsIFwicGVuc2lvbm5hdHNTb3VyY2VcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLm1hcC5nZXRDYW52YXMoKS5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcclxuICAgICAgdGhpcy5kcmF3UG9wdXAoZSk7XHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuICB9XHJcblxyXG4gIGRyYXdQb3B1cChlKXtcclxuICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gZS5mZWF0dXJlc1swXS5nZW9tZXRyeS5jb29yZGluYXRlcy5zbGljZSgpO1xyXG4gICAgY29uc3QgcHJvcGVydGllcyA9IGUuZmVhdHVyZXNbMF0ucHJvcGVydGllcztcclxuICAgIGxldCBbb3BlbmRheXN0ciwgb3Blbm1vbnRoc3RyLCBvcGVueWVhcnN0cl0gPSBwcm9wZXJ0aWVzWydvdXZlcnR1cmUnXS5zcGxpdCgnLycpO1xyXG4gICAgbGV0IFtmZXJtZGF5c3RyLCBmZXJtbW9udGhzdHIsIGZlcm15ZWFyc3RyXSA9IHByb3BlcnRpZXNbJ2Zlcm1ldHVyZSddLnNwbGl0KCcvJyk7XHJcbiAgICBsZXQgW2RhdGVfb3V2ZXJ0dXJlLGRhdGVfZmVybWV0dXJlXSA9IFtcclxuICAgICAgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoXCJmci1DQVwiLCB7ZGF0ZVN0eWxlOlwibG9uZ1wifSkuZm9ybWF0KG5ldyBEYXRlKERhdGUuVVRDKG9wZW55ZWFyc3RyLCBvcGVubW9udGhzdHIsIG9wZW5kYXlzdHIpKSksXHJcbiAgICAgIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZnItQ0FcIiwge2RhdGVTdHlsZTpcImxvbmdcIn0pLmZvcm1hdChuZXcgRGF0ZShEYXRlLlVUQyhmZXJteWVhcnN0ciwgZmVybW1vbnRoc3RyLCBmZXJtZGF5c3RyKSkpXHJcbiAgICBdO1xyXG4gICAgbGV0IGh0bWxfcG9wdXBfY29udGVudCA9IGBcclxuICAgICAgPGgzPiR7cHJvcGVydGllc1snbmFtZSddfTwvaDM+XHJcbiAgICAgIDxoND4ke3Byb3BlcnRpZXNbJ3ZpbGxlJ119LCAke3Byb3BlcnRpZXNbJ3Byb3ZpbmNlJ119PC9oND5cclxuICAgICAgPHA+JHtkYXRlX291dmVydHVyZX0gLSAke2RhdGVfZmVybWV0dXJlfTwvcD5cclxuICAgICAgPHA+JHtwcm9wZXJ0aWVzWydzdGF0dXQnXX08L3A+XHJcbiAgICBgO1xyXG4gICAgd2hpbGUgKE1hdGguYWJzKGUubG5nTGF0LmxuZyAtIGNvb3JkaW5hdGVzWzBdKSA+IDE4MCkge1xyXG4gICAgICBjb29yZGluYXRlc1swXSArPSBlLmxuZ0xhdC5sbmcgPiBjb29yZGluYXRlc1swXSA/IDM2MCA6IC0zNjA7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wb3B1cCA9IG5ldyBtYXBib3hnbC5Qb3B1cCgpXHJcbiAgICAgIC5zZXRMbmdMYXQoY29vcmRpbmF0ZXMpXHJcbiAgICAgIC5zZXRIVE1MKGh0bWxfcG9wdXBfY29udGVudClcclxuICAgICAgLmFkZFRvKHRoaXMubWFwKTtcclxuICB9XHJcblxyXG4gIGNsb3NlUG9wdXAoKSB7XHJcbiAgICBpZiAodGhpcy5wb3B1cCkge1xyXG4gICAgICB0aGlzLnBvcHVwLnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlRGF0YShkYXRhU291cmNlTmFtZSwgZGF0YSkge1xyXG4gICAgaWYgKCF0aGlzLmluaXRpYWxpc2VkKSB0aGlzLmluaXRNYXBTb3VyY2VzQW5kTGF5ZXJzKCk7XHJcbiAgICB0aGlzLm1hcC5nZXRTb3VyY2UoZGF0YVNvdXJjZU5hbWUpLnNldERhdGEoZGF0YSk7XHJcbiAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XHJcblxyXG5jb25zdCBwb3NpdGl2ZU9yZGVyRGljdCA9IHtcclxuICAgIFwibGFuZF9zaW5rXCI6MCxcclxuICAgIFwiZm9zc2lsX2VtaXNzaW9uc1wiOjEsXHJcbiAgICBcImxhbmRfdXNlX2NoYW5nZVwiOjJ9O1xyXG5cclxuY29uc3QgbmVnYXRpdmVPcmRlckRpY3QgPSB7XCJvY2Vhbl9zaW5rXCI6MCxcclxuICAgIFwiYXRtb3Nfc2lua1wiOjEsXHJcbiAgICBcImxhbmRfc2lua1wiOjJ9O1xyXG5cclxuY29uc3QgY29sb3JEaWN0ID0ge1xyXG5cclxuICAgIGZvc3NpbF9lbWlzc2lvbnM6IFwiI2I3YzNjM1wiLFxyXG4gICAgbGFuZF91c2VfY2hhbmdlOiBcIiNFRkU2NkZcIixcclxuICAgIGxhbmRfc2luazogXCIjYTVkYWE4XCIsXHJcbiAgICBvY2Vhbl9zaW5rOiBcIiM3NWEzYjFcIixcclxuICAgIGF0bW9zX3Npbms6IFwiIzg5Y2ZmMFwiLFxyXG4gICAgY2VtZW50X3Npbms6IFwiI2EyYTE5OFwiXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBzdGFja2VkQXJlYUNoYXJ0e1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHN2Z29iaiwgcmF3ZGF0YSl7XHJcblxyXG4gICAgICAgIHRoaXMuc3ZnT2JqID0gc3Znb2JqO1xyXG4gICAgICAgIHRoaXMuc3ZnV2lkdGggPSB0aGlzLnN2Z09iai5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgICAgICAgdGhpcy5zdmdIZWlnaHQgPSB0aGlzLnN2Z09iai5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY2hhcnRXaWR0aCA9IHRoaXMuc3ZnV2lkdGggKiAwLjk7XHJcbiAgICAgICAgdGhpcy5jaGFydEhlaWdodCA9IHRoaXMuc3ZnSGVpZ2h0ICogMC45O1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuY2xlYW5EYXRhKHJhd2RhdGEpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjc3ZEYXRhOicsIHRoaXMuZGF0YSk7XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIHRoaXMubWFpbkdyb3VwID0gdGhpcy5zdmdPYmouYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgdGhpcy5jaGFydFdpZHRoKVxyXG4gICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgdGhpcy5jaGFydEhlaWdodClcclxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHsodGhpcy5zdmdXaWR0aC10aGlzLmNoYXJ0V2lkdGgpLzJ9LCR7KHRoaXMuc3ZnSGVpZ2h0LXRoaXMuY2hhcnRIZWlnaHQpLzJ9KWApO1xyXG4gICAgICAgIHRoaXMuaW5pdENoYXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYW5EYXRhKGRhdGEpe1xyXG4gICAgICAgIHJldHVybiBkYXRhLm1hcCh5ZWFyRGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB5ZWFyOiB5ZWFyRGF0YVtcIkFubsOpZVwiXSxcclxuICAgICAgICAgICAgICAgIGZvc3NpbF9lbWlzc2lvbnM6IHBhcnNlRmxvYXQoU3RyaW5nKHllYXJEYXRhW1wiw4ltaXNzaW9ucyBpc3N1ZXMgZGVzIMOpbmVyZ2llcyBmb3NzaWxlc1wiXSkucmVwbGFjZSgnLCcsXCIuXCIpKSxcclxuICAgICAgICAgICAgICAgIGxhbmRfdXNlX2NoYW5nZTogcGFyc2VGbG9hdChTdHJpbmcoeWVhckRhdGFbXCJDaGFuZ2VtZW50IGQnYWZmZWN0YXRpb24gZGVzIHRlcnJlc1wiXSkucmVwbGFjZSgnLCcsXCIuXCIpKSxcclxuICAgICAgICAgICAgICAgIGxhbmRfc2luazogcGFyc2VGbG9hdChTdHJpbmcoeWVhckRhdGFbXCJQdWl0cyB0ZXJyZXN0cmVcIl0pLnJlcGxhY2UoJywnLFwiLlwiKSksXHJcbiAgICAgICAgICAgICAgICBvY2Vhbl9zaW5rOiBwYXJzZUZsb2F0KFN0cmluZyh5ZWFyRGF0YVtcIk9jw6lhblwiXSkucmVwbGFjZSgnLCcsXCIuXCIpKSxcclxuICAgICAgICAgICAgICAgIGF0bW9zX3Npbms6IHBhcnNlRmxvYXQoU3RyaW5nKHllYXJEYXRhW1wiQXRtb3NwaMOocmVcIl0pLnJlcGxhY2UoJywnLFwiLlwiKSksXHJcbiAgICAgICAgICAgICAgICBjZW1lbnRfc2luazogcGFyc2VGbG9hdChTdHJpbmcoeWVhckRhdGFbXCJQdWl0cyBkZSBjaW1lbnRcIl0pLnJlcGxhY2UoJywnLFwiLlwiKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRDaGFydCgpe1xyXG5cclxuICAgICAgICBsZXQgbGVnZW5kRGF0YSA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiw4ltaXNzaW9ucyBpc3N1ZXMgZGVzIMOpbmVyZ2llcyBmb3NzaWxlc1wiLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiZm9zc2lsX2VtaXNzaW9uc1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkNoYW5nZW1lbnQgZCdhZmZlY3RhdGlvbiBkZXMgdGVycmVzXCIsXHJcbiAgICAgICAgICAgICAgICBjb2xvcjogXCJsYW5kX3VzZV9jaGFuZ2VcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJQdWl0cyB0ZXJyZXN0cmVcIixcclxuICAgICAgICAgICAgICAgIGNvbG9yOiBcImxhbmRfc2lua1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIk9jw6lhblwiLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6IFwib2NlYW5fc2lua1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkF0bW9zcGjDqHJlXCIsXHJcbiAgICAgICAgICAgICAgICBjb2xvcjogXCJhdG1vc19zaW5rXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGNvbnN0IHhBeGlzID0gdGhpcy5kcmF3WEF4aXModGhpcy5tYWluR3JvdXAsIHRoaXMuY2hhcnRXaWR0aCwgdGhpcy5kYXRhKTtcclxuICAgICAgICBjb25zdCB5QXhpcyA9IHRoaXMuZHJhd1lBeGlzKHRoaXMubWFpbkdyb3VwLCB0aGlzLmNoYXJ0SGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmRyYXdBcmVhcyh0aGlzLm1haW5Hcm91cCwgeEF4aXMsIHlBeGlzKTtcclxuICAgICAgICAvL3RoaXMuZHJhd1JlY3RhbmdsZXModGhpcy5tYWluR3JvdXAsIHhBeGlzLCB5QXhpcyk7XHJcbiAgICAgICAgdGhpcy5kcmF3VGl0bGUodGhpcy5tYWluR3JvdXApO1xyXG4gICAgICAgIHRoaXMuZHJhd0JvdHRvbUJveCh0aGlzLm1haW5Hcm91cCwgdGhpcy5jaGFydFdpZHRoKVxyXG4gICAgICAgIHRoaXMuZHJhd0RldGFpbHModGhpcy5tYWluR3JvdXAsIGxlZ2VuZERhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtkMy5TZWxlY3Rpb259IGNvbnRhaW5lciBkMyBzZWxlY3Rpb25cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCB3aWR0aCBvZiB0aGUgY2hhcnRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIGRhdGEgT2JqIGNvbnRhaW5pbmcgc2VyaWVzIGFuZCBkb21haW5zXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXhpc1RpdGxlIHggYXhpcyB0aXRsZVxyXG4gICAgICovXHJcbiAgICAgZHJhd1hBeGlzKGNvbnRhaW5lciwgd2lkdGgsIGRhdGEsIGF4aXNUaXRsZSl7XHJcblxyXG4gICAgICAgIGNvbnN0IHhBeGlzR3JvdXAgPSBjb250YWluZXIuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgJ3hBeGlzR3JvdXAnKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgkezB9LCR7dGhpcy5jaGFydEhlaWdodCowLjkwfSlgKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBkMy5zY2FsZUJhbmQoKVxyXG4gICAgICAgICAgICAuZG9tYWluKGRhdGEubWFwKGVsZW0gPT4gZWxlbS55ZWFyKSlcclxuICAgICAgICAgICAgLnJhbmdlKFt0aGlzLmNoYXJ0V2lkdGgqMC4wNSwgd2lkdGhdKTtcclxuXHJcbiAgICAgICAgY29uc3QgYXhpcyA9IGQzLmF4aXNCb3R0b20oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGUoc2NhbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aWNrU2l6ZU91dGVyKDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aWNrVmFsdWVzKHNjYWxlLmRvbWFpbigpLmZpbHRlcigoZCxpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGkrMTApJTIwID09PSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRpY2tGb3JtYXQoKGQsaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc3BsaXQoJy0nKVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgeEF4aXNHcm91cC5jYWxsKGF4aXMpXHJcbiAgICAgICAgICAgIC5jYWxsKGcgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGlja0dyb3VwcyA9IGcuc2VsZWN0QWxsKFwiLnRpY2tcIik7XHJcbiAgICAgICAgICAgICAgICB0aWNrR3JvdXBzLnNlbGVjdCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmb250LXdlaWdodCcsIDQwMClcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtZmFtaWx5JywgJ2dyYXBoaWsnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzE0cHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIChkLGkpID0+IGkgPT09IHRpY2tHcm91cHMubm9kZXMoKS5sZW5ndGgtMSA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtkMy5TZWxlY3Rpb259IGNvbnRhaW5lciBkMyBzZWxlY3Rpb25cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCB3aWR0aCBvZiB0aGUgY2hhcnRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIGRhdGEgT2JqIGNvbnRhaW5pbmcgc2VyaWVzIGFuZCBkb21haW5zXHJcbiAgICAgKi9cclxuICAgICBkcmF3WUF4aXMoY29udGFpbmVyLCBoZWlnaHQpe1xyXG5cclxuICAgICAgICBjb25zdCB5QXhpc0dyb3VwID0gY29udGFpbmVyLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsICd5QXhpc0dyb3VwJylcclxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt0aGlzLmNoYXJ0V2lkdGgqMC4wNX0sJHswfSlgKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAgIC5kb21haW4oWzEyLC0xMl0pXHJcbiAgICAgICAgICAgIC5yYW5nZShbMCxoZWlnaHQqMC45MF0pO1xyXG5cclxuICAgICAgICBjb25zdCBheGlzID0gZDMuYXhpc0xlZnQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGUoc2NhbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aWNrU2l6ZU91dGVyKDApO1xyXG4gICAgICAgIHlBeGlzR3JvdXAuY2FsbChheGlzKVxyXG4gICAgICAgICAgICAuY2FsbChnID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpY2tHcm91cHMgPSBnLnNlbGVjdEFsbChcIi50aWNrXCIpO1xyXG4gICAgICAgICAgICAgICAgdGlja0dyb3Vwcy5zZWxlY3QoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCA0MDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmb250LWZhbWlseScsICdncmFwaGlrJylcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICcxMnB0Jyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3JvdGF0ZSgtOTApJylcclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXHJcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAtc2NhbGUoMCkpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCItM2VtXCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ2JsYWNrJylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAnMTJwdCcpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC1mYW1pbHknLCAnZ3JhcGhpaycpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCAnNjAwJylcclxuICAgICAgICAgICAgLnRleHQoXCJGbHV4IGRlIENPMiAoR3RDIC8gYW5uw6llKVwiKTtcclxuICAgICAgICByZXR1cm4gc2NhbGU7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd0FyZWFzKGNvbnRhaW5lciwgeFNjYWxlLCB5U2NhbGUpe1xyXG5cclxuICAgICAgICBsZXQgcG9zaXRpdmVfcGF0aHNfYXJyYXkgPSB7fTtcclxuICAgICAgICBsZXQgbmVnYXRpdmVfcGF0aHNfYXJyYXkgPSB7fTtcclxuXHJcbiAgICAgICAgY29uc3QgcG9zRGF0YSA9IHRoaXMuZGF0YS5tYXAoeWVhckRhdGEgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcG9zRWxlbXMgPSBbXTtcclxuICAgICAgICAgICAgbGV0IGN1clRvdGFsID0gMDtcclxuICAgICAgICAgICAgbGV0IGN1clllYXIgPSB5ZWFyRGF0YS55ZWFyO1xyXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyh5ZWFyRGF0YSkuZm9yRWFjaCgoZW50cnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJFbGVtID0gZW50cnlbMV07XHJcbiAgICAgICAgICAgICAgICBpZihjdXJFbGVtPjAgJiYgZW50cnlbMF0gIT09IFwieWVhclwiKXtcclxuICAgICAgICAgICAgICAgICAgICBwb3NFbGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZW50cnlbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlbnRyeVsxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVG90OiBjdXJUb3RhbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyWWVhcjogY3VyWWVhclxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1clRvdGFsICs9IGVudHJ5WzFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihlbnRyeVswXSA9PT0gXCJjZW1lbnRfc2lua1wiKXsgLy8gQWRkIGNlbWVudCBzaW5rIHRvIHJlbW92ZSBpdCBhZnRlcndhcmRzIChpbiBmb3NzaWwgZnVlbCkgIFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc0VsZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBlbnRyeVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGVudHJ5WzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clllYXI6IGN1clllYXJcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgcmV0dXJuIHBvc0VsZW1zLnNvcnQoKGEsYikgPT4gcG9zaXRpdmVPcmRlckRpY3RbYS50eXBlXSAtIHBvc2l0aXZlT3JkZXJEaWN0W2IudHlwZV0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBuZWdEYXRhID0gdGhpcy5kYXRhLm1hcCh5ZWFyRGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBuZWdFbGVtcyA9IFtdO1xyXG4gICAgICAgICAgICBsZXQgY3VyVG90YWwgPSAwO1xyXG4gICAgICAgICAgICBsZXQgY3VyWWVhciA9IHllYXJEYXRhLnllYXI7XHJcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHllYXJEYXRhKS5zb3J0KChhLGIpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZWdhdGl2ZU9yZGVyRGljdFthWzBdXSAtIG5lZ2F0aXZlT3JkZXJEaWN0W2JbMF1dO1xyXG4gICAgICAgICAgICB9KS5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1ckVsZW0gPSBlbnRyeVsxXTtcclxuICAgICAgICAgICAgICAgIGlmKGN1ckVsZW08MCAmJiBlbnRyeVswXSAhPT0gXCJ5ZWFyXCIgJiYgZW50cnlbMF0gIT09IFwiY2VtZW50X3NpbmtcIiApe1xyXG4gICAgICAgICAgICAgICAgICAgIG5lZ0VsZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBlbnRyeVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGVudHJ5WzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IGN1clRvdGFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJZZWFyOiBjdXJZZWFyXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyVG90YWwgKz0gZW50cnlbMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHJldHVybiBuZWdFbGVtczsvLy5zb3J0KChhLGIpID0+IG5lZ2F0aXZlT3JkZXJEaWN0W2EudHlwZV0gLSBuZWdhdGl2ZU9yZGVyRGljdFtiLnR5cGVdKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ2dvdCBuZWdEYXRhOiAnLCBuZWdEYXRhKTtcclxuXHJcbiAgICAgICAgbGV0IGFyZWFHZW4gPSBkMy5hcmVhKClcclxuICAgICAgICAgICAgLngoZCA9PiB4U2NhbGUoZC5jdXJZZWFyKSlcclxuICAgICAgICAgICAgLnkwKGQgPT4geVNjYWxlKGQuY3VyVG90KSlcclxuICAgICAgICAgICAgLnkxKGQgPT4geVNjYWxlKGQuY3VyVG90K2QudmFsdWUpKTtcclxuICAgICAgICBPYmplY3QuZW50cmllcyhwb3NpdGl2ZU9yZGVyRGljdCkuZm9yRWFjaChvcmRlck9iaiA9PiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgY3VyS2V5ID0gb3JkZXJPYmpbMF07XHJcbiAgICAgICAgICAgIGxldCBjdXJPcmRlclZhbHVlID0gb3JkZXJPYmpbMV07XHJcbiAgICAgICAgICAgIGxldCBjdXJQYXRoQXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgcG9zRGF0YS5mb3JFYWNoKHllYXJEYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJFbGVtID0geWVhckRhdGFbMF07XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VyWWVhciA9IGN1ckVsZW1bJ2N1clllYXInXTtcclxuICAgICAgICAgICAgICAgIGxldCBrZXlPYmogPSB5ZWFyRGF0YS5maWx0ZXIoZWxlbSA9PiBjdXJLZXkgPT09IGVsZW0udHlwZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2VtZW50T2JqID0geWVhckRhdGEuZmlsdGVyKGVsZW0gPT4gJ2NlbWVudF9zaW5rJyA9PT0gZWxlbS50eXBlKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYoa2V5T2JqLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vQWRkIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY3VyS2V5ID09PSBcImZvc3NpbF9lbWlzc2lvbnNcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clBhdGhBcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGN1cktleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1clllYXI6IGN1clllYXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IGtleU9ialswXS5jdXJUb3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToga2V5T2JqWzBdLnZhbHVlIC0gTWF0aC5hYnMoY2VtZW50T2JqWzBdLnZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clBhdGhBcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGN1cktleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1clllYXI6IGN1clllYXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IGtleU9ialswXS5jdXJUb3QtIE1hdGguYWJzKGNlbWVudE9ialswXS52YWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToga2V5T2JqWzBdLnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9BZGQgemVyb1xyXG4gICAgICAgICAgICAgICAgICAgIGN1clBhdGhBcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogY3VyS2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJZZWFyOiBjdXJZZWFyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwb3NpdGl2ZV9wYXRoc19hcnJheVtjdXJLZXldID0gY3VyUGF0aEFycmF5O1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNvbnN0IHBvc2l0aXZlUGF0aHMgPSB0aGlzLm1haW5Hcm91cC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAuYXR0cignaWQnLCAncG9zaXRpdmVQYXRocycpO1xyXG5cclxuICAgICAgICBPYmplY3QuZW50cmllcyhwb3NpdGl2ZV9wYXRoc19hcnJheSkuZm9yRWFjaChjYXRlZ29yeU9iaiA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjdXJLZXkgPSBjYXRlZ29yeU9ialswXTtcclxuICAgICAgICAgICAgbGV0IGN1ckFycmF5ID0gY2F0ZWdvcnlPYmpbMV07XHJcblxyXG4gICAgICAgICAgICBwb3NpdGl2ZVBhdGhzLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBjdXJLZXkpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgICAgIC5kYXR1bShjdXJBcnJheSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgY29sb3JEaWN0W2N1cktleV0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgJ2JsYWNrJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAwKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBkID0+IGFyZWFHZW4oZCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBPYmplY3QuZW50cmllcyhuZWdhdGl2ZU9yZGVyRGljdCkuc29ydCgoYSxiKSA9PiBiWzFdIC0gYVsxXSkuZm9yRWFjaChvcmRlck9iaiA9PiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgY3VyS2V5ID0gb3JkZXJPYmpbMF07XHJcbiAgICAgICAgICAgIGxldCBjdXJPcmRlclZhbHVlID0gb3JkZXJPYmpbMV07XHJcbiAgICAgICAgICAgIGxldCBjdXJQYXRoQXJyYXkgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIG5lZ0RhdGEuZm9yRWFjaCh5ZWFyRGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VyRWxlbSA9IHllYXJEYXRhWzBdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1clllYXIgPSBjdXJFbGVtWydjdXJZZWFyJ107XHJcbiAgICAgICAgICAgICAgICBsZXQga2V5T2JqID0geWVhckRhdGEuZmlsdGVyKGVsZW0gPT4gY3VyS2V5ID09PSBlbGVtLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgaWYoa2V5T2JqLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vQWRkIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyUGF0aEFycmF5LnB1c2goa2V5T2JqWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9BZGQgemVyb1xyXG4gICAgICAgICAgICAgICAgICAgIGN1clBhdGhBcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogY3VyS2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJZZWFyOiBjdXJZZWFyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBuZWdhdGl2ZV9wYXRoc19hcnJheVtjdXJLZXldID0gY3VyUGF0aEFycmF5O1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNvbnN0IG5lZ2F0aXZlUGF0aHMgPSB0aGlzLm1haW5Hcm91cC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAuYXR0cignaWQnLCAnbmVnYXRpdmVwYXRocycpO1xyXG5cclxuICAgICAgICBPYmplY3QuZW50cmllcyhuZWdhdGl2ZV9wYXRoc19hcnJheSkuZm9yRWFjaChjYXRlZ29yeU9iaiA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjdXJLZXkgPSBjYXRlZ29yeU9ialswXTtcclxuICAgICAgICAgICAgbGV0IGN1ckFycmF5ID0gY2F0ZWdvcnlPYmpbMV07XHJcblxyXG4gICAgICAgICAgICBuZWdhdGl2ZVBhdGhzLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBjdXJLZXkpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgICAgIC5kYXR1bShjdXJBcnJheSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgY29sb3JEaWN0W2N1cktleV0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgJ2JsYWNrJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAwKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBkID0+IGFyZWFHZW4oZCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBEcmF3IGxpbmVcclxuICAgICAgICBjb25zdCBsaW5lR2VuID0gZDMubGluZSgpLngoZCA9PiB4U2NhbGUoZC55ZWFyKSkueShkID0+IHlTY2FsZShkLnZhbHVlKSk7XHJcblxyXG4gICAgICAgIGxldCBuZWdZZWFyVG90YWwgPSBbXTtcclxuICAgICAgICBsZXQgcG9zWWVhclRvdGFsID0gW107XHJcbiAgICAgICAgcG9zRGF0YS5mb3JFYWNoKHllYXJEYXRhID0+IHtcclxuICAgICAgICAgICAgbGV0IGluaXRWYWx1ZSA9IDA7XHJcbiAgICAgICAgICAgIGxldCBjdXJWYWx1ZSA9IHllYXJEYXRhLnJlZHVjZSgocHJldlZhbCxjdXJWYWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWR1Y2luZy4uLicsIHByZXZWYWwgLCBjdXJWYWwpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZWYWwgKyBjdXJWYWwudmFsdWU7XHJcbiAgICAgICAgICAgIH0sIGluaXRWYWx1ZSk7XHJcbiAgICAgICAgICAgIG5lZ1llYXJUb3RhbC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHllYXI6IHllYXJEYXRhWzBdLmN1clllYXIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogLWN1clZhbHVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwb3NZZWFyVG90YWwucHVzaChcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiB5ZWFyRGF0YVswXS5jdXJZZWFyLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdXJWYWx1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3llYXIgdG90YWw6JywgKTtcclxuXHJcbiAgICAgICAgdmFyIHBvc2xpbmUgPSBkMy5zZWxlY3QoJ3N2ZycpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgICAgICAuZGF0dW0ocG9zWWVhclRvdGFsKVxyXG4gICAgICAgICAgICAuYXR0cignZCcsIGxpbmVHZW4pXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsICdub25lJylcclxuICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCAnYmxhY2snKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3RoaXMuY2hhcnRXaWR0aCowLjA1ICsgeFNjYWxlLmJhbmR3aWR0aCgpfSwke01hdGguYWJzKHlTY2FsZSgyKjAuNzQpLXlTY2FsZSgwKSl9KWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBuZWdsaW5lID0gZDMuc2VsZWN0KCdzdmcnKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgLmRhdHVtKG5lZ1llYXJUb3RhbClcclxuICAgICAgICAgICAgLmF0dHIoJ2QnLCBsaW5lR2VuKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnbm9uZScpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJ2JsYWNrJylcclxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLWRhc2hhcnJheVwiLCAoXCIzLCAzXCIpKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3RoaXMuY2hhcnRXaWR0aCowLjA1ICsgeFNjYWxlLmJhbmR3aWR0aCgpfSwke01hdGguYWJzKHlTY2FsZSgyKjAuNzQpLXlTY2FsZSgwKSl9KWApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBkcmF3VGl0bGUoY29udGFpbmVyKXtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgICAgICAgLmF0dHIoJ3gnLCAodGhpcy5zdmdXaWR0aCAtIHRoaXMuY2hhcnRXaWR0aCkgLyAyICsgdGhpcy5jaGFydFdpZHRoKjAuMDUpXHJcbiAgICAgICAgICAgIC5hdHRyKCd5JywgKHRoaXMuc3ZnSGVpZ2h0IC0gdGhpcy5jaGFydEhlaWdodCkvMiAtIDUwKVxyXG4gICAgICAgICAgICAuYXR0cignZmlsbCcsICdibGFjaycpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzE3cHQnKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtZmFtaWx5JywgJ2dyYXBoaWsnKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtd2VpZ2h0JywgJzYwMCcpXHJcbiAgICAgICAgICAgIC50ZXh0KFwiTGUgdGl0cmUgZHUgZ3JhcGhpcXVlXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAuYXR0cigneCcsKHRoaXMuc3ZnV2lkdGggLSB0aGlzLmNoYXJ0V2lkdGgpIC8gMiArIHRoaXMuY2hhcnRXaWR0aCowLjA1KVxyXG4gICAgICAgICAgICAuYXR0cigneScsICh0aGlzLnN2Z0hlaWdodCAtIHRoaXMuY2hhcnRIZWlnaHQpLzIgLSAyNSlcclxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnYmxhY2snKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICcxM3B0JylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LWZhbWlseScsICdncmFwaGlrJylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXdlaWdodCcsICc0MDAnKVxyXG4gICAgICAgICAgICAudGV4dChcIkxlIHNvdXMtdGl0cmUgZHUgZ3JhcGhpcXVlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdCb3R0b21Cb3goY29udGFpbmVyLCB3aWR0aCl7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoJ2xpbmUnKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsICdibGFjaycpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnc3Rva2Utd2lkdGgnLCAxKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAwLjMpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgdGhpcy5jaGFydFdpZHRoKjAuMDUpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5jaGFydEhlaWdodC0zMClcclxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLmNoYXJ0V2lkdGgpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5jaGFydEhlaWdodC0zMCk7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAuYXR0cigneCcsIHRoaXMuY2hhcnRXaWR0aCowLjA1KVxyXG4gICAgICAgICAgICAuYXR0cigneScsIHRoaXMuY2hhcnRIZWlnaHQtMTcpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzhwdCcpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCA2MDApXHJcbiAgICAgICAgICAgIC50ZXh0KCdHcmFwaGlxdWUgOicpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJ3RzcGFuJylcclxuICAgICAgICAgICAgLmF0dHIoJ3gnLCB0aGlzLmNoYXJ0V2lkdGgqMC4wNSsgNjUpXHJcbiAgICAgICAgICAgIC5hdHRyKCd5JywgdGhpcy5jaGFydEhlaWdodC0xNylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAnOHB0JylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXdlaWdodCcsIDQwMClcclxuICAgICAgICAgICAgLnRleHQoJ0xlIERldm9pciAtICcpO1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAuYXR0cigneCcsIHRoaXMuY2hhcnRXaWR0aCowLjA1ICsgMTIyKVxyXG4gICAgICAgICAgICAuYXR0cigneScsIHRoaXMuY2hhcnRIZWlnaHQtMTcpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzhwdCcpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCA2MDApXHJcbiAgICAgICAgICAgIC50ZXh0KCdTb3VyY2UgOicpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJ3RzcGFuJylcclxuICAgICAgICAgICAgLmF0dHIoJ3gnLCB0aGlzLmNoYXJ0V2lkdGgqMC4wNSArIDE2OSlcclxuICAgICAgICAgICAgLmF0dHIoJ3knLCB0aGlzLmNoYXJ0SGVpZ2h0LTE3KVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICc4cHQnKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtd2VpZ2h0JywgNDAwKVxyXG4gICAgICAgICAgICAudGV4dCgnIC4uLiAnKTtcclxuXHJcbiAgICAgICAgLy8gY29udGFpbmVyLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgLy8gICAgIC5hdHRyKCd4JywgdGhpcy5zdmdXaWR0aCowLjEpXHJcbiAgICAgICAgLy8gICAgIC5hdHRyKCd5JywgdGhpcy5zdmdIZWlnaHQqMC45NTEpXHJcbiAgICAgICAgLy8gICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzhwdCcpXHJcbiAgICAgICAgLy8gICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCA2MDApXHJcbiAgICAgICAgLy8gICAgIC50ZXh0KCdOb3RlIDonKVxyXG4gICAgICAgIC8vICAgICAuYXBwZW5kKCd0c3BhbicpXHJcbiAgICAgICAgLy8gICAgIC5hdHRyKCd4JywgdGhpcy5zdmdXaWR0aCowLjErMzUpXHJcbiAgICAgICAgLy8gICAgIC5hdHRyKCd5JywgdGhpcy5zdmdIZWlnaHQqMC45NTEpXHJcbiAgICAgICAgLy8gICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzhwdCcpXHJcbiAgICAgICAgLy8gICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCA0MDApXHJcbiAgICAgICAgLy8gICAgIC50ZXh0KCdEb25uw6llcyBjb2xsZWN0w6llcyBkZXB1aXMgaHR0cHM6Ly9kb25uZWVzLm1vbnRyZWFsLmNhL3ZpbGxlLWRlLW1vbnRyZWFsL2NvbXB0YWdlLXZlaGljdWxlcy1waWV0b25zJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd0RldGFpbHMoY29udGFpbmVyLCBsZWdlbmREYXRhKXtcclxuXHJcbiAgICAgICAgY29uc3QgbGVnZW5kQ29udGFpbmVyID0gY29udGFpbmVyLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsICdsZWdlbmRDb250YWluZXInKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgkeyh0aGlzLnN2Z1dpZHRoIC0gdGhpcy5jaGFydFdpZHRoKSAvIDIgKyAodGhpcy5jaGFydFdpZHRoKjAuMDUgKyAxMCl9LCR7dGhpcy5zdmdIZWlnaHQqMC4wN30pYCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJvd3MgPSBsZWdlbmRDb250YWluZXIuc2VsZWN0QWxsKCdnJylcclxuICAgICAgICAgICAgLmRhdGEobGVnZW5kRGF0YSlcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsICdsZWdlbmRSb3cnKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQsaSkgPT4gYHRyYW5zbGF0ZSgwLCR7aSoyMH0pYCk7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIHJvd3MuYXBwZW5kKCdjaXJjbGUnKVxyXG4gICAgICAgICAgICAuYXR0cignY3gnLCAwKVxyXG4gICAgICAgICAgICAuYXR0cignY3knLCAwKVxyXG4gICAgICAgICAgICAuYXR0cigncicsIDgpXHJcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBjb2xvckRpY3RbZC5jb2xvcl0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICByb3dzLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCd4JywgMTgpXHJcbiAgICAgICAgICAgIC5hdHRyKCd5JywgNClcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAnOHB0JylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXdlaWdodCcsIDUwMClcclxuICAgICAgICAgICAgLnRleHQoIGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQubGFiZWw7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBkcmF3UmVjdGFuZ2xlcyhjb250YWluZXIsIHhTY2FsZSwgeVNjYWxlKXsgLy8gbm90IHVzZWRcclxuXHJcbiAgICAgICAgY29uc3QgcG9zaXRpdmVBcmVhR3JvdXAgPSBjb250YWluZXIuYXBwZW5kKCdnJylcclxuICAgICAgICAuYXR0cignaWQnLCAncG9zQXJlYWdyb3VwJylcclxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCR7MH0pYCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG5lZ2F0aXZlQXJlYUdyb3VwID0gY29udGFpbmVyLmFwcGVuZCgnZycpXHJcbiAgICAgICAgLmF0dHIoJ2lkJywgJ25lZ0FyZWFncm91cCcpXHJcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoMCwkezB9KWApO1xyXG5cclxuICAgICAgICBjb25zdCBwb3NZZWFyR3JvdXBzID0gcG9zaXRpdmVBcmVhR3JvdXAuc2VsZWN0QWxsKCdnJylcclxuICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgZCA9PiBgeWVhcl8ke2QueWVhcn1gKTtcclxuICAgICAgICBjb25zdCBwb3NSZWN0cyA9IHBvc1llYXJHcm91cHMuc2VsZWN0QWxsKCdyZWN0JylcclxuICAgICAgICAgICAgLmRhdGEoZCA9PiB7IFxyXG4gICAgICAgICAgICAgICAgbGV0IHBvc0VsZW1zID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VyVG90YWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1clllYXIgPSBkLnllYXI7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhkKS5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJFbGVtID0gZW50cnlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY3VyRWxlbT4wICYmIGVudHJ5WzBdICE9PSBcInllYXJcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc0VsZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZW50cnlbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZW50cnlbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IGN1clRvdGFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyWWVhcjogY3VyWWVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVG90YWwgKz0gZW50cnlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBwb3NFbGVtcy5zb3J0KChhLGIpID0+IHBvc2l0aXZlT3JkZXJEaWN0W2EudHlwZV0gLSBwb3NpdGl2ZU9yZGVyRGljdFtiLnR5cGVdKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsIGQgPT4gYCR7ZC50eXBlfV8ke2QudmFsdWV9YClcclxuICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgeFNjYWxlLmJhbmR3aWR0aCgpKVxyXG4gICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgKGQsaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHlTY2FsZSgwKSAtIHlTY2FsZShkLnZhbHVlKSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKCd4JywgZCA9PiB4U2NhbGUoZC5jdXJZZWFyKSlcclxuICAgICAgICAgICAgLmF0dHIoJ3knLCBkID0+ICh5U2NhbGUoMCkgLSAoTWF0aC5hYnMoeVNjYWxlKDApIC0geVNjYWxlKGQudmFsdWUpKSkgLSAoTWF0aC5hYnMoeVNjYWxlKDApIC0geVNjYWxlKGQuY3VyVG90KSkpKSlcclxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+IGNvbG9yRGljdFtkLnR5cGVdKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmVnYXRpdmVZZWFyR3JvdXBzID0gbmVnYXRpdmVBcmVhR3JvdXAuc2VsZWN0QWxsKCdnJylcclxuICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgZCA9PiBgeWVhcl8ke2QueWVhcn1gKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmVnUmVjdHMgPSBuZWdhdGl2ZVllYXJHcm91cHMuc2VsZWN0QWxsKCdyZWN0JylcclxuICAgICAgICAgICAgLmRhdGEoZCA9PiB7IFxyXG4gICAgICAgICAgICAgICAgbGV0IG5lZ0VsZW1zID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VyVG90YWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1clllYXIgPSBkLnllYXI7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhkKS5maWx0ZXIoZWxlbSA9PiBlbGVtWzFdPDApLnNvcnQoKGEsYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFWYWwgPSBuZWdhdGl2ZU9yZGVyRGljdFthWzBdXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBiVmFsID0gbmVnYXRpdmVPcmRlckRpY3RbYlswXV07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFWYWwgLSBiVmFsO1xyXG4gICAgICAgICAgICAgICAgfSkuZm9yRWFjaCgoZW50cnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyRWxlbSA9IGVudHJ5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVudHJ5WzBdICE9PSBcInllYXJcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZ0VsZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZW50cnlbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZW50cnlbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IGN1clRvdGFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyWWVhcjogY3VyWWVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVG90YWwgKz0gZW50cnlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZWdFbGVtcztcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsIGQgPT4gYCR7ZC50eXBlfV8ke2QudmFsdWV9YClcclxuICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgeFNjYWxlLmJhbmR3aWR0aCgpKVxyXG4gICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgKGQsaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHlTY2FsZSgwKSAtIHlTY2FsZShNYXRoLmFicyhkLnZhbHVlKSkpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cigneCcsIGQgPT4geFNjYWxlKGQuY3VyWWVhcikpXHJcbiAgICAgICAgICAgIC5hdHRyKCd5JywgZCA9PiAoeVNjYWxlKGQuY3VyVG90KSkpXHJcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBjb2xvckRpY3RbZC50eXBlXSk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlU3RhdGV9IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gR2F1Z2VzKHByb3BzKXtcblxuICB1c2VFZmZlY3QoICgpID0+IHtcblxuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImdhdWdlc1wiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnYXVnZSBkb2xsYXJHYXVnZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHRCb3hcIj5cbiAgICAgICAgICA8aDU+RG9sbGFyczwvaDU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdhdWdlQ29sb3IgYmx1ZVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmFsdWVcIj5cbiAgICAgICAgICAgIDxwPntwcm9wcy5kb2xsYXJzfTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2F1Z2UgZW52aXJvbm1lbnRHYXVnZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHRCb3hcIj5cbiAgICAgICAgICA8aDU+VFdoIGVuIDIwNTA8L2g1PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnYXVnZUNvbG9yIGdyZWVuXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2YWx1ZVwiPlxuICAgICAgICAgICAgPHA+e3Byb3BzLnR3aH08L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcblxufVxuIiwiaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2t9IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gSW50cm9Cb3gocHJvcHMpe1xuXG4gIGNvbnN0IHN0YXJ0R2FtZSA9IHVzZUNhbGxiYWNrKCBhc3luYyAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ3N0YXJ0aW5nIGdhbWUnKTtcbiAgICBwcm9wcy5tYXBPYmoudmlld0V4dHJhQm91bmRPYmooMCxcInpvbmUxXCIpO1xuICAgIHByb3BzLmdhbWVTdGFydCgpO1xuICB9KTtcblxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJnYW1lQm94XCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImludHJvQm94XCI+XG4gICAgICAgIHtwcm9wcy5pbnRyb0VsZW19XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlckJveFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0YXJ0YnV0dG9uXCIgb25DbGljaz17c3RhcnRHYW1lfT5cbiAgICAgICAgICA8cD5Db21tZW5jZXI8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgKVxuXG59XG4iLCJpbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZX0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBNdWx0aXBsZUNob2ljZShwcm9wcyl7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcblxuICB9LCBbXSk7XG5cbiAgY29uc3QgbmV4dFByb21wdCA9IHVzZUNhbGxiYWNrKCBhc3luYyAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ25leHQgcHJvbXB0IScsIHByb3BzLmN1ckluZGV4KyAxKTtcbiAgICBwcm9wcy5jaGFuZ2VQcm9tcHQocHJvcHMuY3VySW5kZXggKyAxKTtcbiAgfSk7XG5cbiAgY29uc3QgcHJldmlvdXNQcm9tcHQgPSB1c2VDYWxsYmFjayggYXN5bmMgKCkgPT4ge1xuICAgIGlmKHByb3BzLmN1ckluZGV4ID4gMCl7XG4gICAgICBjb25zb2xlLmxvZygncHJldmlvdXMgcHJvbXB0IScsIHByb3BzLmN1ckluZGV4IC0gMSk7XG4gICAgICBwcm9wcy5jaGFuZ2VQcm9tcHQocHJvcHMuY3VySW5kZXggLSAxKTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgcmV0dXJuKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvaWNlc1wiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2x1bW5cIj5cbiAgICAgICAge3Byb3BzLmN1ckluZGV4ID4gMCA/XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25idXR0b25cIiBvbkNsaWNrPXtwcmV2aW91c1Byb21wdH0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dG5cIj5cbiAgICAgICAgICAgICAgPHA+UHJldmlvdXM8L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA6XG4gICAgICAgICAgPGRpdj48L2Rpdj5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbHVtblwiPlxuICAgICAgICB7XG4gICAgICAgICAgcHJvcHMuY2hvaWNlcy5tYXAoKGNob2ljZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGxldCBjb3N0ID0gcHJvcHMuY2hvaWNlc192YWx1ZXNbaW5kZXhdLnNwbGl0KCdfJylbMF07XG4gICAgICAgICAgICBsZXQgdXNlID0gcHJvcHMuY2hvaWNlc192YWx1ZXNbaW5kZXhdLnNwbGl0KCdfJylbMV07XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbmJ1dHRvblwiIGtleT17aW5kZXh9IG9uQ2xpY2s9e25leHRQcm9tcHR9PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0blwiPlxuICAgICAgICAgICAgICAgICAgPHA+e2Nob2ljZX0gKGNvw7t0OiB7Y29zdH0gOyBlZmZldDoge3VzZX0pPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG5cbn1cbiIsImltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFByaW50UHJvbXB0KHByb3BzKXtcblxuICBjb25zdCBwcmV2aW91c1Byb21wdCA9IHVzZUNhbGxiYWNrKCBhc3luYyAoKSA9PiB7XG4gICAgaWYocHJvcHMuY3VySW5kZXggPiAwKXtcbiAgICAgIGNvbnNvbGUubG9nKCduZXh0IHByb21wdCEnLCBwcm9wcy5jdXJJbmRleCAtIDEpO1xuICAgICAgcHJvcHMuY2hhbmdlUHJvbXB0KHByb3BzLmN1ckluZGV4IC0gMSk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBuZXh0UHJvbXB0ID0gdXNlQ2FsbGJhY2soIGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnbmV4dCBwcm9tcHQhJywgcHJvcHMuY3VySW5kZXgrIDEpO1xuICAgIHByb3BzLmNoYW5nZVByb21wdChwcm9wcy5jdXJJbmRleCArIDEpO1xuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicHJpbnRwcm9tcHRcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVzc2FnZVwiPntwcm9wcy5tZXNzYWdlfTwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25idXR0b25cIiBvbkNsaWNrPXtwcmV2aW91c1Byb21wdH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0blwiPlxuICAgICAgICAgIDxwPlByZXZpb3VzPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25idXR0b25cIiBvbkNsaWNrPXtuZXh0UHJvbXB0fT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXRuXCI+XG4gICAgICAgICAgPHA+U3VpdmFudDwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbilcbn1cbiIsImltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gUmVwYXJ0aXRpb24ocHJvcHMpe1xuXG4gIGNvbnN0IFtqZXRvbnMsIHNldEpldG9uc10gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW21lZ2F3YXR0cywgc2V0TWVnYXdhdHRzXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbb3B0aW9uVmFsdWVzLCBzZXRPcHRpb25WYWx1ZXNdID0gdXNlU3RhdGUoW10pO1xuXG5cbiAgdXNlRWZmZWN0KCAoKSA9PiB7XG4gICAgbGV0IG5ld09wdGlvblZhbHVlcyA9IHByb3BzLmNob2ljZXMubWFwKChlLCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG4gICAgc2V0T3B0aW9uVmFsdWVzKG5ld09wdGlvblZhbHVlcyk7XG4gICAgY29uc29sZS5sb2coJ29wdGlvblBhcmFtczonLCBnZXRPcHRpb25QYXJhbXMoKSk7XG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoICgpID0+IHtcbiAgICBsZXQgbmV3SmV0b25zID0gb3B0aW9uVmFsdWVzLnJlZHVjZShcbiAgICAgIChhY2MsIGN1clZhbCwgaW5kZXgpID0+IHtcbiAgICAgICAgbGV0IGN1ck9wdGlvblBhcmFtcyA9IGdldE9wdGlvblBhcmFtcygpW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIGFjYyArIGN1clZhbCpjdXJPcHRpb25QYXJhbXNbXCJ1bml0VmFsdWVcIl1cbiAgICAgIH0sMCk7XG4gICAgbGV0IG5ld01XID0gb3B0aW9uVmFsdWVzLnJlZHVjZShcbiAgICAgIChhY2MsIGN1clZhbCwgaW5kZXgpID0+IHtcbiAgICAgICAgbGV0IGN1ck9wdGlvblBhcmFtcyA9IGdldE9wdGlvblBhcmFtcygpW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIGFjYyArIGN1clZhbCpjdXJPcHRpb25QYXJhbXNbXCJ1bml0TVd2YWx1ZVwiXVxuICAgICAgfSwwKTtcbiAgICBzZXRKZXRvbnMobmV3SmV0b25zKTtcbiAgICBzZXRNZWdhd2F0dHMobmV3TVcpO1xuICB9LCBbb3B0aW9uVmFsdWVzXSk7XG5cbiAgY29uc3QgcHJldmlvdXNQcm9tcHQgPSB1c2VDYWxsYmFjayggYXN5bmMgKCkgPT4ge1xuICAgIGlmKHByb3BzLmN1ckluZGV4ID4gMCl7XG4gICAgICBjb25zb2xlLmxvZygnbmV4dCBwcm9tcHQhJywgcHJvcHMuY3VySW5kZXggLSAxKTtcbiAgICAgIHByb3BzLmNoYW5nZVByb21wdChwcm9wcy5jdXJJbmRleCAtIDEpO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgbmV4dFByb21wdCA9IHVzZUNhbGxiYWNrKCBhc3luYyAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ25leHQgcHJvbXB0IScsIHByb3BzLmN1ckluZGV4KyAxKTtcbiAgICBwcm9wcy5jaGFuZ2VQcm9tcHQocHJvcHMuY3VySW5kZXggKyAxKTtcbiAgfSk7XG5cbiAgY29uc3QgcHJvY2Vzc0Nob2ljZXMgPSAoY2hvaWNlLCBjaG9pY2VzX3ZhbHVlcykgPT4ge1xuICAgIGNvbnN0IHNwbGl0dGVkQ2hvaWNlcyA9IGNob2ljZXNfdmFsdWVzLnNwbGl0KCdfJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGNob2ljZSxcbiAgICAgIHVuaXRWYWx1ZTogcGFyc2VJbnQoc3BsaXR0ZWRDaG9pY2VzWzBdKSxcbiAgICAgIHRvdGFsOiBwYXJzZUludChzcGxpdHRlZENob2ljZXNbMV0pLFxuICAgICAgdW5pdE1XdmFsdWU6IHBhcnNlSW50KHNwbGl0dGVkQ2hvaWNlc1syXSlcbiAgICB9XG4gIH1cblxuICBjb25zdCBnZXRPcHRpb25QYXJhbXMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHByb3BzLmNob2ljZXMubWFwKChjaG9pY2UsIGluZGV4KSA9PiB7XG4gICAgICByZXR1cm4gcHJvY2Vzc0Nob2ljZXMoY2hvaWNlLCBwcm9wcy5jaG9pY2VzX3ZhbHVlc1tpbmRleF0pO1xuICAgIH0pXG4gIH1cblxuICBjb25zdCBtb2RpZnlPbkNsaWNrID0gKGUsIGluZGV4LCBkaWZmLCBlbGVtKSA9PiB7XG4gICAgbGV0IG5ld0FycmF5ID0gWy4uLm9wdGlvblZhbHVlc107XG4gICAgaWYoKG5ld0FycmF5W2luZGV4XStkaWZmKSA+PSAwKXtcbiAgICAgIG5ld0FycmF5W2luZGV4XSA9IG5ld0FycmF5W2luZGV4XSArIGRpZmY7XG4gICAgICBzZXRPcHRpb25WYWx1ZXMobmV3QXJyYXkpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGdlbmVyYXRlVG9rZW5zID0gKCkgPT4ge1xuICAgIGxldCBjdXJyZW50VXNlZFRva2VucyA9IG9wdGlvblZhbHVlcy5tYXAoKGVsZW0sIGluZGV4KSA9PiB7XG4gICAgICBsZXQgY3VyT3B0aW9uUGFyYW1zID0gZ2V0T3B0aW9uUGFyYW1zKClbaW5kZXhdO1xuICAgICAgcmV0dXJuIEFycmF5KGVsZW0qY3VyT3B0aW9uUGFyYW1zW1widW5pdFZhbHVlXCJdKS5maWxsKGN1ck9wdGlvblBhcmFtc1tcIm5hbWVcIl1bMF0pO1xuICAgIH0pO1xuICAgIGxldCBjb25jYXRUb2tlbnMgPSBbXS5jb25jYXQuYXBwbHkoW10sIGN1cnJlbnRVc2VkVG9rZW5zKTtcbiAgICBjb25zb2xlLmxvZygnY2hlY2tpbmcgdXNlZCB0b2tlbnM6JywgY29uY2F0VG9rZW5zKTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTAgfSkubWFwKChlbGVtLCBpbmRleCkgPT4ge1xuICAgICAgbGV0IGN1ckxldHRlciA9IGNvbmNhdFRva2Vuc1tpbmRleF0gPyBTdHJpbmcoY29uY2F0VG9rZW5zW2luZGV4XSkgOiBcIlwiO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b2tlbkNvbnRhaW5lclwiIGtleT17aW5kZXh9PlxuICAgICAgICAgIDxwPntjdXJMZXR0ZXJ9PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIClcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHJlbmRlclJvd3MgPSAoY2hvaWNlcykgPT4ge1xuICAgIHJldHVybiBjaG9pY2VzLm1hcCggKGVsZW0saW5kZXgpID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3B0aW9uVW5pdFwiIGtleT17aW5kZXh9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VsZWN0b3Jab25lXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRpdmlzaW9uIG1pbnVzWm9uZVwiIG9uQ2xpY2s9eyhlKSA9PiBtb2RpZnlPbkNsaWNrKGUsIGluZGV4LCAtMSwgZWxlbSl9PlxuICAgICAgICAgICAgICA8aDM+LTwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGl2aXNpb24gY2VudHJhbFpvbmVcIj5cbiAgICAgICAgICAgICAgPGgzPntvcHRpb25WYWx1ZXNbaW5kZXhdfTwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGl2aXNpb24gcGx1c1pvbmVcIiBvbkNsaWNrPXsoZSkgPT4gbW9kaWZ5T25DbGljayhlLCBpbmRleCwgMSwgZWxlbSl9PlxuICAgICAgICAgICAgICA8aDM+KzwvaDM+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHRab25lXCI+XG4gICAgICAgICAgICA8aDM+e2VsZW0ubmFtZX08L2gzPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmxpbmV0ZXh0XCI+XG4gICAgICAgICAgICAgIDxoNT57ZWxlbS51bml0VmFsdWV9IGpldG9ucyBwYXIgdW5pdMOpJm5ic3A7JiM4MjI2OyZuYnNwO3tlbGVtLnVuaXRNV3ZhbHVlfSBNVyBwYXIgdW5pdMOpPC9oNT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIClcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicmVwYXJ0aXRpb25cIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3B0aW9uWm9uZVwiPlxuICAgICAgICB7XG4gICAgICAgICAgcmVuZGVyUm93cyhwcm9wcy5jaG9pY2VzLm1hcCgoZSwgaW5kZXgpID0+IHByb2Nlc3NDaG9pY2VzKGUsIHByb3BzLmNob2ljZXNfdmFsdWVzW2luZGV4XSkpKVxuICAgICAgICB9XG4gICAgICA8L2Rpdj5cbiAgICAgIHtwcm9wcy5jdXJJbmRleCA+IDAgP1xuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbmJ1dHRvblwiIG9uQ2xpY2s9e3ByZXZpb3VzUHJvbXB0fT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dG5cIj5cbiAgICAgICAgICAgIDxwPlByZXZpb3VzPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgOlxuICAgICAgICA8ZGl2PjwvZGl2PlxuICAgICAgfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb25pdG9yaW5nXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sdW1uXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb25pdG9yaW5nX2hlYWRlclwiPlxuICAgICAgICAgICAgPGg1PkpldG9ucyBpbnZlc3RpczwvaDU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb25pdG9yaW5nX3ZhbHVlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRva2Vuc1wiPntnZW5lcmF0ZVRva2VucygpfTwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2x1bW5cIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vbml0b3JpbmdfaGVhZGVyXCI+XG4gICAgICAgICAgICA8aDU+w4lsZWN0cmljaXTDqSBwcm9kdWl0ZTwvaDU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb25pdG9yaW5nX3ZhbHVlXCI+XG4gICAgICAgICAgICA8aDM+e21lZ2F3YXR0c30gTVc8L2gzPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25idXR0b25cIiBvbkNsaWNrPXtuZXh0UHJvbXB0fT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXRuXCI+XG4gICAgICAgICAgPHA+U3VpdmFudDwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxuXG59XG4iLCJpbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZX0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBNdWx0aXBsZUNob2ljZSB9IGZyb20gXCIuL3Byb21wdGZpbGwvTXVsdGlwbGVDaG9pY2VcIjtcbmltcG9ydCB7IFByaW50UHJvbXB0IH0gZnJvbSBcIi4vcHJvbXB0ZmlsbC9QcmludFByb21wdFwiO1xuaW1wb3J0IHsgUmVwYXJ0aXRpb24gfSBmcm9tIFwiLi9wcm9tcHRmaWxsL1JlcGFydGl0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBQcm9tcHRCb3gocHJvcHMpe1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG5cbiAgfSwgW10pO1xuXG4gIGNvbnN0IGNoYW5nZVByb21wdCA9IHVzZUNhbGxiYWNrKCBhc3luYyAobmV3VmFsdWUpID0+IHtcbiAgICBwcm9wcy5jaGFuZ2VQcm9tcHQobmV3VmFsdWUpO1xuICB9KTtcblxuXG5cbiAgY29uc3QgcmVuZGVyU3dpdGNoID0gKHBhcmFtKSA9PiB7XG4gICAgc3dpdGNoKHBhcmFtKXtcbiAgICAgIGNhc2UgJ1JlcGFydGl0aW9uJyA6XG4gICAgICAgIHJldHVybiA8UmVwYXJ0aXRpb24gY2hvaWNlcz17U3RyaW5nKHByb3BzLmN1clByb21wdFsnQ2hvaXgnXSkuc3BsaXQoJzsnKX0gY2hvaWNlc192YWx1ZXM9e1N0cmluZyhwcm9wcy5jdXJQcm9tcHRbJ0Nob2l4X1ZhbGV1cnMnXSkuc3BsaXQoJzsnKX0gY2hhbmdlUHJvbXB0PXtjaGFuZ2VQcm9tcHR9IGN1ckluZGV4PXtwcm9wcy5jdXJJbmRleH0vPjtcbiAgICAgIGNhc2UgJ0NhcnRlJzpcbiAgICAgICAgcmV0dXJuIDxNdWx0aXBsZUNob2ljZSBjaG9pY2VzPXtTdHJpbmcocHJvcHMuY3VyUHJvbXB0WydDaG9peCddKS5zcGxpdCgnOycpfSBjaGFuZ2VQcm9tcHQ9e2NoYW5nZVByb21wdH0gY3VySW5kZXg9e3Byb3BzLmN1ckluZGV4fS8+O1xuICAgICAgY2FzZSAnU3VpdmknOlxuICAgICAgICByZXR1cm4gPE11bHRpcGxlQ2hvaWNlIGNob2ljZXM9e1N0cmluZyhwcm9wcy5jdXJQcm9tcHRbJ0Nob2l4J10pLnNwbGl0KCc7Jyl9IGNoYW5nZVByb21wdD17Y2hhbmdlUHJvbXB0fSBjdXJJbmRleD17cHJvcHMuY3VySW5kZXh9Lz47XG4gICAgICBjYXNlICdQcmludCc6XG4gICAgICAgIHJldHVybiA8UHJpbnRQcm9tcHQgbWVzc2FnZT17U3RyaW5nKHByb3BzLmN1clByb21wdFsnVGV4dGVfU3VwcCddKX0gY2hhbmdlUHJvbXB0PXtjaGFuZ2VQcm9tcHR9IGN1ckluZGV4PXtwcm9wcy5jdXJJbmRleH0vPjtcbiAgICAgIGNhc2UgJ2Nob2l4UmVwb25zZSc6XG4gICAgICAgIHJldHVybiA8TXVsdGlwbGVDaG9pY2UgY2hvaWNlcz17U3RyaW5nKHByb3BzLmN1clByb21wdFsnQ2hvaXgnXSkuc3BsaXQoJzsnKX0gY2hvaWNlc192YWx1ZXM9e1N0cmluZyhwcm9wcy5jdXJQcm9tcHRbJ0Nob2l4X1ZhbGV1cnMnXSkuc3BsaXQoJzsnKX0gY2hhbmdlUHJvbXB0PXtjaGFuZ2VQcm9tcHR9IGN1ckluZGV4PXtwcm9wcy5jdXJJbmRleH0vPjtcbiAgICAgIGNhc2UgJ0NhdGFzdHJvcGhlJzpcbiAgICAgICAgcmV0dXJuIDxNdWx0aXBsZUNob2ljZSBjaG9pY2VzPXtTdHJpbmcocHJvcHMuY3VyUHJvbXB0WydDaG9peCddKS5zcGxpdCgnOycpfSBjaGFuZ2VQcm9tcHQ9e2NoYW5nZVByb21wdH0gY3VySW5kZXg9e3Byb3BzLmN1ckluZGV4fS8+O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIDxNdWx0aXBsZUNob2ljZSBjaG9pY2VzPXtTdHJpbmcocHJvcHMuY3VyUHJvbXB0WydDaG9peCddKS5zcGxpdCgnOycpfSBjaGFuZ2VQcm9tcHQ9e2NoYW5nZVByb21wdH0gY3VySW5kZXg9e3Byb3BzLmN1ckluZGV4fS8+O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJnYW1lQm94XCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb21wdEJveFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3VydGl0cmVcIj5cbiAgICAgICAgICAgIDxoMz57cHJvcHMuY3VyUHJvbXB0WydTdWpldCddfTwvaDM+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJxdWVzdGlvblwiPlxuICAgICAgICAgICAgPHA+e3Byb3BzLmN1clByb21wdFsnUXVlc3Rpb24nXX08L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7XG4gICAgICAgICAgcmVuZGVyU3dpdGNoKHByb3BzLmN1clByb21wdFsnVHlwZSddKVxuICAgICAgICB9XG5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG5cblxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEdhdWdlcyB9IGZyb20gXCIuL2dhdWdlcy9HYXVnZXNcIjtcbmltcG9ydCB7IEludHJvQm94IH0gZnJvbSBcIi4vaW50cm9Cb3hcIjtcbmltcG9ydCB7IFByb21wdEJveCB9IGZyb20gXCIuL1Byb21wdEJveFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gTWFpbkZyYW1lKHByb3BzKXtcblxuICBjb25zdCBbZ2FtZVN0YXR1cywgc2V0U3RhdHVzXSA9IHVzZVN0YXRlKCdJRExFJyk7XG4gIGNvbnN0IFtnYW1lSW5kZXgsIHNldEdhbWVJbmRleF0gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW2RvbGxhcnMsIHNldERvbGxhcnNdID0gdXNlU3RhdGUoMTAwKTtcbiAgY29uc3QgW3R3aCwgc2V0VHdoXSA9IHVzZVN0YXRlKDEwMCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnY2hlY2tpbmcgcHJvcHMgbWFwT2JqOicsIHByb3BzLm1hcE9iaik7XG4gIH0sW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2dhbWUgJywgZ2FtZVN0YXR1cyk7XG5cbiAgfSwgW2dhbWVTdGF0dXNdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGdldEdhbWVQcm9tcHQoZ2FtZUluZGV4KTtcbiAgfSwgW2dhbWVJbmRleF0pO1xuXG4gIGNvbnN0IGdhbWVTdGFydGVkID0gKCkgPT4ge1xuICAgIHNldFN0YXR1cygnU1RBUlRFRCcpO1xuICAgIHNldEdhbWVJbmRleCgwKTtcbiAgfVxuXG4gIGNvbnN0IGdldEdhbWVQcm9tcHQgPSAoZ2FtZUluZGV4KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2N1cnJlbnQgZ2FtZSBwcm9tcHQ6JywgcHJvcHMuZ2FtZURhdGEuZmlsdGVyKGVsZW0gPT4ge3JldHVybiBTdHJpbmcoZWxlbVtcIkluZGV4XCJdKSA9PT0gU3RyaW5nKGdhbWVJbmRleCk7fSkpO1xuICB9XG5cbiAgY29uc3QgdXBkYXRlRG9sbGFycyA9IChkaWZmKSA9PiB7XG4gICAgc2V0RG9sbGFycyhkb2xsYXJzID0+IGRvbGxhcnMgKyBkaWZmKTtcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZVR3aCA9IChkaWZmKSA9PiB7XG4gICAgc2V0VHdoKHR3aCA9PiB0d2ggKyBkaWZmKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJnYW1lU2NyZWVuXCI+XG4gICAgICA8R2F1Z2VzIGRvbGxhcnM9e2RvbGxhcnN9IHR3aD17dHdofS8+XG4gICAgICB7XG4gICAgICAgIGdhbWVTdGF0dXMgPT09IFwiSURMRVwiID9cbiAgICAgICAgPEludHJvQm94IGludHJvRWxlbT17cHJvcHMuaW50cm9FbGVtfSBtYXBPYmo9e3Byb3BzLm1hcE9ian0gZ2FtZVN0YXJ0PXtnYW1lU3RhcnRlZH0gLz5cbiAgICAgICAgOlxuICAgICAgICBnYW1lU3RhdHVzID09PSBcIkVORFwiID9cbiAgICAgICAgICA8ZGl2PjwvZGl2PlxuICAgICAgICAgIDpcbiAgICAgICAgICA8UHJvbXB0Qm94IGN1ckluZGV4PXtnYW1lSW5kZXh9IGN1clByb21wdD17cHJvcHMuZ2FtZURhdGFbZ2FtZUluZGV4XX0gY2hhbmdlUHJvbXB0PXtzZXRHYW1lSW5kZXh9IHVwZGF0ZURvbGxhcnM9e3VwZGF0ZURvbGxhcnN9IHVwZGF0ZVR3aD17dXBkYXRlVHdofS8+XG4gICAgICB9XG4gICAgPC9kaXY+XG5cbiAgKVxuXG59XG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbS9jbGllbnRcIjtcbmltcG9ydCB7IHJlbmRlclRvU3RhdGljTWFya3VwIH0gZnJvbSAncmVhY3QtZG9tL3NlcnZlcic7XG5pbXBvcnQgeyBNYWluRnJhbWUgfSBmcm9tICcuL2NvbXBvbmVudHMvbWFpbmZyYW1lJztcbmltcG9ydCB7IG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cywgY29udGVudEhlYWRlckNvbnN0YW50cyB9IGZyb20gXCIuLi9nZW5lcmF0b3IvY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBJbnRyb1NlY3Rpb24gfSBmcm9tICcuLi9jb21wb25lbnRzL0ludHJvU2VjdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBFbmdpbmUge1xuXG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb3B0aW9uRGF0YSwgaW50cm9PYmosIG1hcE9iaiwgZ2FtZURhdGEpe1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIGNvbnN0IHJvb3RFbGVtID0gdGhpcy5jb250YWluZXIuYXBwZW5kKCdkaXYnKVxuICAgICAgLmNsYXNzZWQoJ3Jvb3RFbGVtJywgdHJ1ZSk7XG4gICAgdGhpcy5lbmdpbmVSb290ID0gUmVhY3RET00uY3JlYXRlUm9vdChyb290RWxlbS5ub2RlKCkpO1xuICAgIHRoaXMub3B0aW9uRGF0YSA9IG9wdGlvbkRhdGE7XG4gICAgdGhpcy5tYXBPYmogPSBtYXBPYmo7XG4gICAgdGhpcy5hbW9yY2UgPSBpbnRyb09ialtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnRleHRlXTtcbiAgICB0aGlzLmdhbWVEYXRhID0gZ2FtZURhdGE7XG4gICAgY29uc29sZS5sb2coJ2dhbWUgRGF0YSBpcyA6ICcsIHRoaXMuZ2FtZURhdGEpO1xuICAgIHRoaXMuaW5pdEVuZ2luZSgpO1xuICB9XG5cbiAgaW5pdEVuZ2luZSgpe1xuICAgIGNvbnN0IGludHJvRWxlbSA9ICg8SW50cm9TZWN0aW9uXG4gICAgICBrZXk9e1wiZ2FtZUludHJvXCJ9XG4gICAgICBzZWN0aW9uVHlwZT17b3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnNlY3Rpb250eXBlcy5pbnRyb3RpdHJlfVxuICAgICAgb3B0aW9uRGF0YT17dGhpcy5vcHRpb25EYXRhfVxuICAgICAgYW1vcmNlPXt0aGlzLmFtb3JjZX1cbiAgICAgIGJhY2tncm91bmQ9e251bGx9XG4gICAgICBjbGFzc2VzPXtcIlwifVxuICAgICAgLz4pO1xuXG4gICAgdGhpcy5lbmdpbmVSb290LnJlbmRlcig8TWFpbkZyYW1lIGludHJvRWxlbT17aW50cm9FbGVtfSBtYXBPYmo9e3RoaXMubWFwT2JqfSBnYW1lU3RhdHVzPXt0aGlzLmdhbWVTdGF0dXN9IGdhbWVEYXRhPXt0aGlzLmdhbWVEYXRhfS8+KTtcbiAgfVxuXG59XG4iLCIvKipcbiAqIHZpei5qc1xuICogPT09PT09PVxuICogRmlsZSB1c2VkIHRvIGRlZmluZSB0aGUgdmlzdWFsaXphdGlvbiBzZWN0aW9uLlxuICovXG5cbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCB7IGdldFN0cnVjdHVyZSwgZ2VuZXJhdGVDYWxsYmFja3MsIGdldE9wdGlvbnMgfSBmcm9tICcuL2dlbmVyYXRvci9zdHJ1Y3R1cmVHZW5lcmF0b3IuanMnO1xuaW1wb3J0IHsgY2FsbGJhY2tzIH0gZnJvbSAnLi4vZGF0YS9zdHJ1Y3R1cmUvY2FsbGJhY2tzLmpzJztcblxuaW1wb3J0IHsgTWFwIH0gZnJvbSAnbGVkZXZvaXItZGF0YXZpeic7XG5pbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuL2dhbWUvZW5naW5lLmpzJztcblxuY29uc3QgY29uZmlnID0ge1xuICB3aWR0aDogNTAwLFxuICBoZWlnaHQ6IDUwMCxcbiAgbWFyZ2luOiB7XG4gICAgdG9wOiAxMDAsXG4gICAgcmlnaHQ6IDEwMCxcbiAgICBib3R0b206IDEwMCxcbiAgICBsZWZ0OiAxMDBcbiAgfVxufVxuY29uc3QgZnVsbFdpZHRoID0gY29uZmlnLm1hcmdpbi5sZWZ0ICsgY29uZmlnLndpZHRoICsgY29uZmlnLm1hcmdpbi5yaWdodDtcbmNvbnN0IGZ1bGxIZWlnaHQgPSBjb25maWcubWFyZ2luLnRvcCArIGNvbmZpZy5oZWlnaHQgKyBjb25maWcubWFyZ2luLmJvdHRvbTtcbmNvbnN0IG1hcEJveFN0eWxlID0gXCJtYXBib3g6Ly9zdHlsZXMvbGVkZXZvaXIvY2xhbDl6bGZrMDA0YTE1cW9oaHI3cjQ5NVwiO1xuXG5jb25zdCBjdXN0b21DYWxsYmFja3NOZWVkZWQgPSB0cnVlOyAvLyBTZXQgdG8gdHJ1ZSBpZiBjdXN0b20gY2FsbGJhY2tzIGFyZSBuZWVkZWRcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemUoY29udGVudERhdGEsIG9wdGlvbnMpIHtcblxuICByZXR1cm4gZDMuY3N2KFwiaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvZS8yUEFDWC0xdlFRWjNzejBxMXZuWm1vWVlSNUlyQ2Z1T05oSGNOdzUwaUR0YmcxSDJtSVg4bEhETDFCUTRzQU1pN2lBcFNFMUc5V1FUVzJqSGNXdjRLVy9wdWI/Z2lkPTAmc2luZ2xlPXRydWUmb3V0cHV0PWNzdlwiKVxuICAgIC50aGVuKCBnYW1lRGF0YSA9PiB7XG4gICAgICByZXR1cm4gZDMuanNvbihcIi4vZGF0YS9maWx0ZXJlZF9hY2NpZGVudHMuZ2VvanNvblwiKVxuICAgICAgLnRoZW4oIGdlb0RhdGEgPT4ge1xuXG4gICAgICAgIGNvbnN0IG1hcFNvdXJjZSA9IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzb3VyY2VOYW1lOidtYXBTb3VyY2UnLFxuICAgICAgICAgICAgc291cmNlVHlwZTonZ2VvanNvbicsXG4gICAgICAgICAgICBzb3VyY2VEYXRhOiBnZW9EYXRhLFxuICAgICAgICAgICAgbGF5ZXJUeXBlOidjaXJjbGUnLFxuICAgICAgICAgICAgY29sb3I6JyNmNTgzNjYnLFxuICAgICAgICAgICAgb3BhY2l0eTowLjgsXG4gICAgICAgICAgICBjb29yZHM6e1xuICAgICAgICAgICAgICBjZW50ZXI6IFstNzAuNTY2LCA1Mi40ODhdLFxuICAgICAgICAgICAgICB6b29tOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXh0cmFDb29yZHM6e1xuICAgICAgICAgICAgICB6b25lMToge1xuICAgICAgICAgICAgICAgIGNlbnRlcjogWy03MC41NjYsIDUyLjQ4OF0sXG4gICAgICAgICAgICAgICAgem9vbTogNVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBtYXBDb250YWluZXIgPSBkMy5zZWxlY3QoXCIubWFwLWFyZWFcIik7XG5cbiAgICAgICAgbWFwQ29udGFpbmVyLmFwcGVuZCgnZGl2JylcbiAgICAgICAgICAuY2xhc3NlZCgnbWFwJywgdHJ1ZSlcbiAgICAgICAgICAuYXR0cignaWQnLCAncWNtYXAnKVxuXG4gICAgICAgIGNvbnN0IG1hcE9iaiA9IG5ldyBNYXAoZDMuc2VsZWN0KFwiI3FjbWFwXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicWNtYXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwQm94U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOlstNzAuNTY2LCA1Mi40ODhdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbTogNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG1hcE9iai5tYXAub24oXCJsb2FkXCIsICgpID0+IHtcbiAgICAgICAgICBkMy5zZWxlY3QoXCIjcWNtYXBcIikuc2VsZWN0KFwiLm1hcGJveC1pbXByb3ZlLW1hcFwiKS50ZXh0KFwiXCIpXG4gICAgICAgICAgbWFwT2JqLmluaXRNYXBTb3VyY2VzQW5kTGF5ZXJzKCk7XG4gICAgICAgICAgZDMuc2VsZWN0KFwiI3FjbWFwXCIpLnNlbGVjdChcIi5sb2FkaW5nXCIpLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIilcbiAgICAgICAgICBkMy5zZWxlY3QoXCIjcWNtYXBcIikuc2VsZWN0KFwiLm9wdGlvbnMtYmFyXCIpLmNsYXNzZWQoXCJkaXNhYmxlZFwiLCBmYWxzZSlcbiAgICAgICAgfSk7XG5cblxuICAgICAgICBjb25zdCBlbmdpbmUgPSBuZXcgRW5naW5lKG1hcENvbnRhaW5lciwgZ2V0T3B0aW9ucyhvcHRpb25zKSwgY29udGVudERhdGFbMF0sIG1hcE9iaiwgZ2FtZURhdGEpO1xuXG4gICAgICAgIGxldCBhdXRvQ2FsbGJhY2tzO1xuICAgICAgICBzZXR1cFZpeihjb250ZW50RGF0YSxvcHRpb25zKTtcbiAgICAgICAgaWYoRU5WX0NPTkZJRy5kb3dubG9hZFN0cnVjICYmIEVOVl9DT05GSUcuYXV0b3JlbmRlcil7XG4gICAgICAgICAgYXV0b0NhbGxiYWNrcyA9IGdlbmVyYXRlQ2FsbGJhY2tzKGNvbnRlbnREYXRhLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgIGF1dG9DYWxsYmFja3MgPSBjYWxsYmFja3M7XG4gICAgICAgIH1cblxuICAgICAgICBpZihjdXN0b21DYWxsYmFja3NOZWVkZWQpe1xuICAgICAgICAgIC8vaWYgY3VzdG9tIGNhbGxiYWNrcyBhcmUgbmVlZGVkLCBzdWNoIGFzIFZpc3VhbGl6YXRpb24gdHJhbnNmb3JtYXRpb25zLCBpbmNsdWRlIHRoZW0gaGVyZS5cbiAgICAgICAgICAvLyBUaGlzIGFsbG93cyB0byB1c2UgYW55IG9iamVjdCBjcmVhdGVkIGluIHZpei5qcyAoZ3JhcGhzLCB0b29scywgZXRjKSBpbiB0aGUgY2FsbGJhY2tzLlxuICAgICAgICAgIC8vIFlvdSB3aWxsIG5lZWQgdG8gbWFudWFsbHkgY3JlYXRlIHRoZSBjb3JyZWN0IG51bWJlciBvZiBjYWxsYmFja3MgdG8gbWF0Y2ggdGhlIHZpeiBzZWN0aW9uc1xuXG4gICAgICAgICAgbGV0IGN1c3RvbUNhbGxiYWNrcyA9IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgKCkgPT4ge1xuXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICBdXG4gICAgICAgICAgcmV0dXJuIGN1c3RvbUNhbGxiYWNrcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXV0b0NhbGxiYWNrcztcbiAgICAgIH0pO1xuXG4gICAgfSlcbn1cblxuZnVuY3Rpb24gc2V0dXBWaXooY29udGVudERhdGEsIG9wdGlvbnMpe1xuXG4gIGNvbnN0IGZ1bGxTdHJ1Y3R1cmUgPSBnZXRTdHJ1Y3R1cmUoY29udGVudERhdGEsIG9wdGlvbnMpO1xuICBjb25zb2xlLmxvZygnY2hlY2tpbmcgc3RydWN0dXJlOicsIGZ1bGxTdHJ1Y3R1cmUpO1xuICBmdWxsU3RydWN0dXJlLm1hcChzZWN0aW9uT2JqID0+IHtcblxuICAgIGlmKHNlY3Rpb25PYmouc2VjdGlvblR5cGUgPT09IFwidml6LXNlY3Rpb25cIil7XG4gICAgICBzZWN0aW9uT2JqLnN0ZXBzLm1hcCgoc3RlcCxpbmRleCkgPT4ge1xuICAgICAgICAgIGlmKHN0ZXAudmlzdWFsICE9PSBcIlwiKXtcbiAgICAgICAgICAgIGlmKGluZGV4ID09PSAwKXtcbiAgICAgICAgICAgICAgZDMuc2VsZWN0KGAjJHtzZWN0aW9uT2JqLmtleX1fJHtpbmRleH1gKS5zdHlsZSgnb3BhY2l0eScsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgZDMuc2VsZWN0KGAjJHtzZWN0aW9uT2JqLmtleX1fJHtpbmRleH1gKS5zdHlsZSgnb3BhY2l0eScsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbn0pO1xufVxuXG5mdW5jdGlvbiBzZXR1cFZpZGVvcygpe1xuICBsZXQgdmlkZW9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInZpZGVvXCIpO1xuICAgIHZpZGVvcy5mb3JFYWNoKCh2aWRlbykgPT4ge1xuICAgICAgLy8gV2UgY2FuIG9ubHkgY29udHJvbCBwbGF5YmFjayB3aXRob3V0IGluc3RlcmFjdGlvbiBpZiB2aWRlbyBpcyBtdXRlXG4gICAgICB2aWRlby5tdXRlZCA9IHRydWU7XG4gICAgICB2aWRlby5jdXJyZW50VGltZSA9IDA7XG4gICAgICAvLyBQbGF5IGlzIGEgcHJvbWlzZSBzbyB3ZSBuZWVkIHRvIGNoZWNrIHdlIGhhdmUgaXRcbiAgICAgIGxldCBwbGF5UHJvbWlzZSA9IHZpZGVvLnBsYXkoKTtcbiAgICAgIGlmIChwbGF5UHJvbWlzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcGxheVByb21pc2UudGhlbigoXykgPT4ge1xuICAgICAgICAgICAgICBsZXQgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXG4gICAgICAgICAgICAgICAgICAoZW50cmllcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gIT09IDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICF2aWRlby5wYXVzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRlby5wYXVzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW8uY3VycmVudFRpbWUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZpZGVvLnBhdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW8ucGxheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgeyB0aHJlc2hvbGQ6IDAuMiB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUodmlkZW8pO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xufVxuIiwiLyoqXHJcbiAqIHNjcm9sbGVyLmpzXHJcbiAqID09PT09PT09PT09XHJcbiAqIERlZmluZXMgdGhlIGxvZ2ljIHVzZWQgYnkgdGhlIHNjcm9sbGVyLiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIGV4dGVybmFsIGRlcGVuZGVuY2llcyBhbmQgdXNlcyBuYXRpdmUgZnVuY3Rpb25zXHJcbiAqIG9mIHRoZSBicm93c2VyLlxyXG4gKlxyXG4gKiAvIVxcIFBMRUFTRSwgRE8gTk9UIE1PRElGWSBUSElTIEZJTEUuXHJcbiAqXHJcbiAqIEBhdXRob3IgQW50b2luZSBCw6lsYW5kIDxhYmVsYW5kQGxlZGV2b2lyLmNvbT5cclxuICovXHJcblxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vKipcclxuICogRGVmaW5lcyBhIHN0ZXAgYXNzb2NpYXRlZCB3aXRoIGEgc3BlY2lmaWMgdmlzdWFsaXphdGlvbi4gQSBzdGVwIGlzIGFjdGl2YXRlZCBvciBkZWFjdGl2YXRlZCBiYXNlZCBvbiB0aGUgc2Nyb2xsXHJcbiAqIHBvc2l0aW9uLiBUaGlzIGNsYXNzIGlzIHVzZWQgYnkgdGhlIHNjcm9sbGVyIGZ1bmN0aW9uLlxyXG4gKi9cclxuY2xhc3MgU2Nyb2xsZXJTdGVwIHtcclxuICAvKipcclxuICAgKiBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBTY3JvbGxlclN0ZXAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZWwgICAgICAgICAgVGhlIG5hdGl2ZSBlbGVtZW50IHRoYXQgcmVwcmVzZW50cyB0aGUgc3RlcCBpbiB0aGUgSFRNTCBkb2N1bWVudC5cclxuICAgKiBAcGFyYW0gaW5kZXggICAgICAgVGhlIGluZGV4IG9mIHRoZSBzdGVwLlxyXG4gICAqIEBwYXJhbSBjYWxsYmFjayAgICBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBzdGVwIGlzIGFjdGl2YXRlLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGVsLCBpbmRleCwgY2FsbGJhY2spIHtcclxuICAgIHRoaXMuZWwgPSBlbDtcclxuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcclxuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIHRoaXMuX2lzQWN0aXZhdGUgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFjdGl2YXRlcyB0aGUgY3VycmVudCBzdGVwLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHNjcm9sbERpcmVjdGlvbiAgIFRoZSBjdXJyZW50IHNjcm9sbCBkaXJlY3Rpb24uXHJcbiAgICovXHJcbiAgYWN0aXZhdGUoc2Nyb2xsRGlyZWN0aW9uKSB7XHJcbiAgICBpZiAodGhpcy5faXNBY3RpdmF0ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLl9pc0FjdGl2YXRlID0gdHJ1ZTtcclxuICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICB0aGlzLmNhbGxiYWNrKHNjcm9sbERpcmVjdGlvbik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZWFjdGl2YXRlcyB0aGUgY3VycmVudCBzdGVwLlxyXG4gICAqL1xyXG4gIGRlYWN0aXZhdGUoKSB7XHJcbiAgICBpZiAoIXRoaXMuX2lzQWN0aXZhdGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5faXNBY3RpdmF0ZSA9IGZhbHNlO1xyXG4gICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIHRoZSBzY3JvbGwgZGlyZWN0aW9ucy5cclxuICpcclxuICogQHR5cGUge3t1cDogc3RyaW5nLCBkb3duOiBzdHJpbmd9fVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNjcm9sbERpcmVjdGlvbnMgPSB7XHJcbiAgdXA6ICd1cCcsXHJcbiAgZG93bjogJ2Rvd24nXHJcbn07XHJcblxyXG4vKipcclxuICogRGVmaW5lcyB0aGUgc2Nyb2xsZXIgdG8gdXNlIHdpdGggdGhlIExlIERldm9pcidzIHNjcm9sbHl0ZWxsaW5nIGFydGljbGVzLiBQbGVhc2Ugc2VlIFwiUkVBRE1FLm1kXCJcclxuICogdG8ga25vdyBob3cgdG8gdXNlIGl0LlxyXG4gKlxyXG4gKiAvIVxcIEJlIHN1cmUgdG8gdXNlIHRoZSBnb29kIENTUyBjbGFzcyBuYW1lcyBpbiB5b3VyIEhUTUwgZmlsZSBiZWZvcmUgdG8gdXNlIHRoZSBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIGNhbGxiYWNrcyAgIEEgbXVsdGktZGltZW5zaW9uYWwgYXJyYXkgb2YgY2FsbGJhY2tzIHRvIHVzZSB3aXRoIGVhY2ggc3RlcC5cclxuICogQHJldHVybnMgeyp9ICAgICAgIFRoZSBpbnN0YW5jZSBvZiB0aGUgc2Nyb2xsZXIuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2Nyb2xsZXIoY2FsbGJhY2tzKSB7XHJcbiAgbGV0IF9vZmZzZXRUb3AgPSAwO1xyXG4gIGxldCBfb2Zmc2V0Qm90dG9tID0gMDtcclxuXHJcbiAgbGV0IGlubmVySGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gIGxldCBpc0luaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgbGV0IGxhc3RTY3JvbGwgPSAwO1xyXG4gIGxldCBzdGVwcyA9IFtdO1xyXG4gIGxldCB2aXogPSBbXTtcclxuICBsZXQgdmlzaWJsZVN0ZXBzID0gW107XHJcbiAgXHJcbiAgY29uc3QgYXJ0aWNsZVJlbWluZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFydGljbGUtcmVtaW5kZXInKTtcclxuICBjb25zdCBzY3JvbGxQcm9ncmVzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlciA+IC5wcm9ncmVzcycpO1xyXG4gIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmludHJvLXNlY3Rpb24gaDEnKTtcclxuXHJcbiAgY29uc3Qgdml6U2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudml6LXNlY3Rpb24nKTtcclxuICBpZiAodml6U2VjdGlvbnMubGVuZ3RoICE9PSBjYWxsYmFja3MubGVuZ3RoKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBudW1iZXIgb2Ygdml6IHNlY3Rpb25zICgke3ZpelNlY3Rpb25zLmxlbmd0aH0pIG1pc21hdGNoIHdpdGggdGhlIGxlbmd0aCBvZiB0aGUgZmlyc3QgYCArXHJcbiAgICAgIGBkaW1lbnNpb24gb2YgdGhlIGNhbGxiYWNrcyBhcnJheSAoJHtjYWxsYmFja3MubGVuZ3RofSkuIFBsZWFzZSwgYmUgc3VyZSB0aGF0IHRoZSB0d28gZWxlbWVudHMgYCArXHJcbiAgICAgIGBoYXZlIHRoZSBzYW1lIHNpemUuYCk7XHJcbiAgfVxyXG4gIHZpelNlY3Rpb25zLmZvckVhY2goKHZpelNlY3Rpb24sIGkpID0+IHtcclxuICAgIGNvbnN0IHNlY3Rpb25zID0gWy4uLnZpelNlY3Rpb24ucXVlcnlTZWxlY3RvckFsbCgnc2VjdGlvbicpXTtcclxuICAgIGlmIChzZWN0aW9ucy5sZW5ndGggIT09IGNhbGxiYWNrc1tpXS5sZW5ndGgpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgbnVtYmVyIG9mIHN0ZXBzICgke3NlY3Rpb25zLmxlbmd0aH0pIGluIHRoZSB2aXogc2VjdGlvbiAjJHtpICsgMX0gbWlzbWF0Y2ggd2l0aCB0aGUgYCArXHJcbiAgICAgICAgYG51bWJlciBvZiBjYWxsYmFja3Mgc3BlY2lmaWVkICgke2NhbGxiYWNrc1tpXS5sZW5ndGh9KSBhdCB0aGUgaW5kZXggXCIke2l9XCIuIFBsZWFzZSwgYmUgc3VyZSB0aGF0IHRoZSB0d28gYCArXHJcbiAgICAgICAgYGVsZW1lbnRzIGhhdmUgdGhlIHNhbWUgc2l6ZS5gKTtcclxuICAgIH1cclxuICAgIHN0ZXBzID0gc3RlcHMuY29uY2F0KHNlY3Rpb25zLm1hcCgoZSwgaikgPT4gbmV3IFNjcm9sbGVyU3RlcChlLCBgJHtpfS0ke2p9YCwgY2FsbGJhY2tzW2ldW2pdKSkpO1xyXG4gICAgdml6ID0gdml6LmNvbmNhdCh2aXosIHZpelNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnZpeiA+IConKSk7XHJcbiAgfSk7XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZXMgdGhlIGRpc3BsYXkgYmFzZWQgb24gc2Nyb2xsYmFyIHBvc2l0aW9uLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgY29uc3QgX3VwZGF0ZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGN1cnJlbnRTY3JvbGwgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgIHN0ZXBzLmZvckVhY2goc3RlcCA9PiB7XHJcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHN0ZXAgaXMgaW4gdGhlIHZpZXdwb3J0LlxyXG4gICAgICBjb25zdCBib3VuZGluZ1JlY3QgPSBzdGVwLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICBpZiAoaW5uZXJIZWlnaHQgLSBib3VuZGluZ1JlY3QudG9wIC0gX29mZnNldEJvdHRvbSA+IDBcclxuICAgICAgICAmJiBib3VuZGluZ1JlY3QudG9wICsgYm91bmRpbmdSZWN0LmhlaWdodCAtIF9vZmZzZXRUb3AgPiAwKSB7XHJcbiAgICAgICAgdmlzaWJsZVN0ZXBzLnB1c2goc3RlcCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3RlcC5kZWFjdGl2YXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIERpc3BsYXkgdGhlIHRpdGxlIGFzIGEgcmVtaW5kZXIgd2hlbiB0aGUgbWFpbiBhcnRpY2xlIHRpdGxlIGlzIGhpZGRlbi5cclxuICAgIGNvbnN0IGlzQXJ0aWNsZVJlbWluZGVyRGlzcGxheWVkID0gdGl0bGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDw9IDA7XHJcbiAgICBjb25zdCBpc0FydGljbGVSZW1pbmRlcklzVmlzaWJsZSA9IGFydGljbGVSZW1pbmRlci5jbGFzc0xpc3QuY29udGFpbnMoJ3Zpc2libGUnKTtcclxuICAgIGlmIChpc0FydGljbGVSZW1pbmRlckRpc3BsYXllZCAmJiAhaXNBcnRpY2xlUmVtaW5kZXJJc1Zpc2libGUpIHtcclxuICAgICAgYXJ0aWNsZVJlbWluZGVyLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKVxyXG4gICAgfSBlbHNlIGlmICghaXNBcnRpY2xlUmVtaW5kZXJEaXNwbGF5ZWQgJiYgaXNBcnRpY2xlUmVtaW5kZXJJc1Zpc2libGUpIHtcclxuICAgICAgYXJ0aWNsZVJlbWluZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEZvciB0aGUgdmlzaWJsZSBzdGVwcywgY2hvb3NlIHRoZSBnb29kIG9uZSBiYXNlZCBvbiB0aGUgc2Nyb2xsIGRpcmVjdGlvbi5cclxuICAgIHZpc2libGVTdGVwcy5mb3JFYWNoKChzZWN0aW9uLCBpKSA9PiB7XHJcbiAgICAgIGlmIChjdXJyZW50U2Nyb2xsID49IGxhc3RTY3JvbGwpIHsgLy8gU2Nyb2xsIGRvd24gKOKGkylcclxuICAgICAgICBpZiAoaSA9PT0gdmlzaWJsZVN0ZXBzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIHNlY3Rpb24uYWN0aXZhdGUoc2Nyb2xsRGlyZWN0aW9ucy5kb3duKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2VjdGlvbi5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgeyAvLyBTY3JvbGwgdXAgKOKGkSlcclxuICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgc2VjdGlvbi5hY3RpdmF0ZShzY3JvbGxEaXJlY3Rpb25zLnVwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2VjdGlvbi5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIF91cGRhdGVTY3JvbGxQcm9ncmVzcygpO1xyXG5cclxuICAgIC8vIFJlc2V0IHRoZSB2YXJpYWJsZXMgZm9yIHRoZSBuZXh0IGZ1bmN0aW9uIGNhbGwuXHJcbiAgICB2aXNpYmxlU3RlcHMgPSBbXTtcclxuICAgIGxhc3RTY3JvbGwgPSBjdXJyZW50U2Nyb2xsO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZXMgdGhlIHNjcm9sbCBwcm9ncmVzc2lvbiBpbmRpY2F0b3IuXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBjb25zdCBfdXBkYXRlU2Nyb2xsUHJvZ3Jlc3MgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB3aW5TY3JvbGwgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xyXG4gICAgY29uc3QgaGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCAtIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICBjb25zdCBzY3JvbGxlZCA9ICh3aW5TY3JvbGwgLyBoZWlnaHQpICogMTAwO1xyXG4gICAgc2Nyb2xsUHJvZ3Jlc3Muc3R5bGUud2lkdGggPSBzY3JvbGxlZCArICclJztcclxuICB9O1xyXG5cclxuICBjb25zdCBwdWJsaWNJbnRlcmZhY2UgPSB7XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemVzIHRoZSBzY3JvbGxlci4gUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGNhbiBiZSBvbmx5IGNhbGxlZCBvbmNlLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgaW5zdGFuY2Ugb2YgdGhlIHNjcm9sbGVyLlxyXG4gICAgICovXHJcbiAgICBpbml0aWFsaXplOiAoKSA9PiB7XHJcbiAgICAgIGlmIChpc0luaXRpYWxpemVkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc2Nyb2xsZXIgaXMgYWxyZWFkeSBpbml0aWFsaXplZC4nKTtcclxuICAgICAgfVxyXG4gICAgICBpc0luaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF91cGRhdGUpO1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4ge1xyXG4gICAgICAgIGlubmVySGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgICAgIF91cGRhdGVTY3JvbGxQcm9ncmVzcygpO1xyXG4gICAgICB9KTtcclxuICAgICAgaWYgKCh3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkgPiAwKSB7XHJcbiAgICAgICAgX3VwZGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIF91cGRhdGVTY3JvbGxQcm9ncmVzcygpO1xyXG4gICAgICByZXR1cm4gcHVibGljSW50ZXJmYWNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdG9wIG9mZnNldCB0byB1c2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9mZnNldFRvcFxyXG4gICAgICogQHJldHVybnMgeyp9IFRoZSBpbnN0YW5jZSBvZiB0aGUgc2Nyb2xsZXIuXHJcbiAgICAgKi9cclxuICAgIG9mZnNldFRvcDogb2Zmc2V0VG9wID0+IHtcclxuICAgICAgaWYgKG9mZnNldFRvcCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIF9vZmZzZXRUb3A7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG9mZnNldFRvcCkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBvZmZzZXQgbXVzdCBiZSBhbiBpbnRlZ2VyIG51bWJlci4nKTtcclxuICAgICAgfVxyXG4gICAgICBfb2Zmc2V0VG9wID0gb2Zmc2V0VG9wO1xyXG4gICAgICByZXR1cm4gcHVibGljSW50ZXJmYWNlO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGJvdHRvbSBvZmZzZXQgdG8gdXNlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBvZmZzZXRCb3R0b21cclxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgaW5zdGFuY2Ugb2YgdGhlIHNjcm9sbGVyLlxyXG4gICAgICovXHJcbiAgICBvZmZzZXRCb3R0b206IG9mZnNldEJvdHRvbSA9PiB7XHJcbiAgICAgIGlmIChvZmZzZXRCb3R0b20gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBfb2Zmc2V0Qm90dG9tO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihvZmZzZXRCb3R0b20pKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgb2Zmc2V0IG11c3QgYmUgYW4gaW50ZWdlciBudW1iZXIuJyk7XHJcbiAgICAgIH1cclxuICAgICAgX29mZnNldEJvdHRvbSA9IG9mZnNldEJvdHRvbTtcclxuICAgICAgcmV0dXJuIHB1YmxpY0ludGVyZmFjZTtcclxuICAgIH1cclxuICB9O1xyXG4gIHJldHVybiBwdWJsaWNJbnRlcmZhY2U7XHJcbn1cclxuIiwiXHJcbmltcG9ydCB7IGluaXRpYWxpemUgYXMgdjEgfSBmcm9tICcuLi92aXonO1xyXG5pbXBvcnQgeyBzY3JvbGxlciB9IGZyb20gJy4uL3Njcm9sbGVyJztcclxuaW1wb3J0IExhenlMb2FkIGZyb20gXCJ2YW5pbGxhLWxhenlsb2FkXCI7XHJcbmNvbnN0IGhlYWRlckhlaWdodCA9IDQwO1xyXG5pbXBvcnQgc3RpY2t5Qml0cyBmcm9tICdzdGlja3liaXRzJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRTY3JvbGxlcihjb250ZW50RGF0YSwgcGFyYW1zRGF0YSl7XHJcblxyXG4gICAgbGV0IGVsZW1lbnRzID0gW107XHJcbiAgICBbJy52aXonLCAnLmZ1bGwtcGFnZS1zZWN0aW9uID4gaW1nJywgJy5mdWxsLXBhZ2Utc2VjdGlvbiA+IHZpZGVvJ10uZm9yRWFjaChzZWxlY3RvciA9PiB7XHJcbiAgICAgIGVsZW1lbnRzID0gZWxlbWVudHMuY29uY2F0KEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpKTtcclxuICAgIH0pO1xyXG4gICAgc3RpY2t5Qml0cyhlbGVtZW50cywgeyBzdGlja3lCaXRTdGlja3lPZmZzZXQ6IGhlYWRlckhlaWdodCB9KTtcclxuICBcclxuICAgIGNvbnN0IGxsID0gbmV3IExhenlMb2FkKHtcclxuICAgICAgZWxlbWVudHNfc2VsZWN0b3I6IFwiLmxhenlcIixcclxuICAgICAgdGhyZXNob2xkOiA1MDBcclxuICAgIH0pO1xyXG4gIFxyXG4gICAgUHJvbWlzZS5hbGwoW3YxKGNvbnRlbnREYXRhLCBwYXJhbXNEYXRhKV0pLnRoZW4oKFtjYWxsYmFja3NWMV0pID0+ICB7XHJcbiAgICAgIHNjcm9sbGVyKGNhbGxiYWNrc1YxKVxyXG4gICAgICAgIC5vZmZzZXRUb3AoaGVhZGVySGVpZ2h0KVxyXG4gICAgICAgIC5vZmZzZXRCb3R0b20oMClcclxuICAgICAgICAuaW5pdGlhbGl6ZSgpO1xyXG4gICAgfSk7XHJcbiAgfSIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEludHJvU2VjdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL0ludHJvU2VjdGlvbi5qc1wiO1xuaW1wb3J0IHsgVGV4dFNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9UZXh0U2VjdGlvbi5qc1wiO1xuaW1wb3J0IHsgVml6U2VjdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1ZpelNlY3Rpb24uanNcIjtcbmltcG9ydCB7IEZ1bGxQYWdlU2VjdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL0Z1bGxQYWdlU2VjdGlvbi5qc1wiO1xuaW1wb3J0IHsgb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzIH0gZnJvbSBcIi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgcGFyc2UgZnJvbSBcImh0bWwtcmVhY3QtcGFyc2VyXCI7XG5pbXBvcnQgeyBnZXRTdHJ1Y3R1cmUgfSBmcm9tIFwiLi9zdHJ1Y3R1cmVHZW5lcmF0b3IuanNcIjtcbmltcG9ydCB7IGluaXRTY3JvbGxlciB9IGZyb20gXCIuL2luaXRTY3JvbGxlci5qc1wiO1xuXG5cbi8qKlxuICogVGFrZSBwcm9wcyAoYXJ0aWNsZSBzdHJ1Y3R1cmUgYXMgQ1NWIGFuZCBwYXJhbXMpIGFuZCB0cmFuc2Zvcm0gaXQgYXMgSFRNTCBhcmNoaXRlY3R1cmVcbiAqIEBwYXJhbSAge09iamVjdH0gY29udGVudERhdGEgQXJ0aWNsZSdzIENTViBzdHJ1Y3R1cmVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNEYXRhIEFydGljbGUgcGFyYW1ldGVyc1xuICogQHJldHVybiB7T2JqZWN0fSBPYmogSFRNTCBjb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSZW5kZXJTdHJ1Y3R1cmUocHJvcHMpe1xuICAgIGlmKHByb3BzLnJlbmRlcmVkKXtcbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcblxuICAgICAgICAgICAgaW5pdFNjcm9sbGVyKHByb3BzLmNvbnRlbnREYXRhLCBwcm9wcy5wYXJhbXNEYXRhKTtcblxuICAgICAgICB9LCBbXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbmRlckRhdGEoZ2V0U3RydWN0dXJlKHByb3BzLmNvbnRlbnREYXRhLCBwcm9wcy5wYXJhbXNEYXRhKSk7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckRhdGEoc3RydWN0dXJlRGF0YSl7XG5cbiAgICBsZXQgcmVuZGVyZWREYXRhID0ge307XG5cbiAgICBPYmplY3Qua2V5cyhzdHJ1Y3R1cmVEYXRhKS5tYXAoKHNlY3Rpb25LZXksaW5kZXgpID0+IHtcbiAgICAgICAgbGV0IGN1clNlY3Rpb24gPSBzdHJ1Y3R1cmVEYXRhW3NlY3Rpb25LZXldO1xuICAgICAgICBpZihjdXJTZWN0aW9uLnNlY3Rpb25UeXBlID09PSBvcHRpb25zRHJvcGRvd25Db25zdGFudHMuc2VjdGlvbnR5cGVzLmludHJvdGl0cmUpe1xuICAgICAgICAgICAgcmVuZGVyZWREYXRhW3NlY3Rpb25LZXldID0gKCg8SW50cm9TZWN0aW9uIGtleT17Y3VyU2VjdGlvbi5rZXl9IHNlY3Rpb25UeXBlPXtjdXJTZWN0aW9uLnNlY3Rpb25UeXBlfSBvcHRpb25EYXRhPXtjdXJTZWN0aW9uLm9wdGlvbkRhdGF9IGFtb3JjZT17cGFyc2UoY3VyU2VjdGlvbi5hbW9yY2UpfSBiYWNrZ3JvdW5kPXtjdXJTZWN0aW9uLmJhY2tncm91bmR9IGNsYXNzZXM9e2N1clNlY3Rpb24uY2xhc3Nlc30gLz4pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKGN1clNlY3Rpb24uc2VjdGlvblR5cGUgPT09IG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cy5zZWN0aW9udHlwZXMudGV4dGVjbGFzc2lxdWUpe1xuXG4gICAgICAgICAgICByZW5kZXJlZERhdGFbc2VjdGlvbktleV0gPSAoKDxUZXh0U2VjdGlvbiBrZXk9e2N1clNlY3Rpb24ua2V5fSBpZD17Y3VyU2VjdGlvbi5rZXl9IHNlY3Rpb25UeXBlPXtjdXJTZWN0aW9uLnNlY3Rpb25UeXBlfSB0ZXh0cz17Y3VyU2VjdGlvbi50ZXh0c30gYmFja2dyb3VuZD17Y3VyU2VjdGlvbi5iYWNrZ3JvdW5kfSBjbGFzc2VzPXtjdXJTZWN0aW9uLmNsYXNzZXN9IHZpc3VlbGNsYXNzZXM9e2N1clNlY3Rpb24udmlzdWVsY2xhc3Nlc30gdmlzdWFsPXtjdXJTZWN0aW9uLnZpc3VhbH0gZmlsZW5hbWU9e2N1clNlY3Rpb24uZmlsZW5hbWV9Lz4pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKGN1clNlY3Rpb24uc2VjdGlvblR5cGUgPT09IG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cy5zZWN0aW9udHlwZXMucGxlaW5lcGFnZXRpdHJlKXtcbiAgICAgICAgICAgIHJlbmRlcmVkRGF0YVtzZWN0aW9uS2V5XSA9ICgoPEZ1bGxQYWdlU2VjdGlvbiBrZXk9e2N1clNlY3Rpb24ua2V5fSBpZD17Y3VyU2VjdGlvbi5rZXl9IHNlY3Rpb25UeXBlPXtjdXJTZWN0aW9uLnNlY3Rpb25UeXBlfSBiYWNrZ3JvdW5kPXtjdXJTZWN0aW9uLmJhY2tncm91bmR9IGNsYXNzZXM9e2N1clNlY3Rpb24uY2xhc3Nlc30gdmlzdWVsY2xhc3Nlcz17Y3VyU2VjdGlvbi52aXN1ZWxjbGFzc2VzfSB2aXN1YWw9e2N1clNlY3Rpb24udmlzdWFsfSBtYWluVGl0bGU9e2N1clNlY3Rpb24udGV4dHMubWFpblRpdGxlfSBzdWJUaXRsZT17Y3VyU2VjdGlvbi50ZXh0cy5zdWJUaXRsZX0gZmlsZW5hbWU9e2N1clNlY3Rpb24uZmlsZW5hbWV9IC8+KSlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKGN1clNlY3Rpb24uc2VjdGlvblR5cGUgPT09IG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cy5zZWN0aW9udHlwZXMudml6c2VjdGlvbil7XG4gICAgICAgICAgICByZW5kZXJlZERhdGFbc2VjdGlvbktleV0gPSAoPFZpelNlY3Rpb24ga2V5PXtjdXJTZWN0aW9uLmtleX0gbGlzdElEPXtjdXJTZWN0aW9uLmxpc3RJRH0gc3RlcHM9e2N1clNlY3Rpb24uc3RlcHN9IGNsYXNzZWQ9e2N1clNlY3Rpb24uY2xhc3NlZH0gbWVkaWFJbmZvPXtjdXJTZWN0aW9uLm1lZGlhSW5mb30gYmFja2dyb3VuZD17Y3VyU2VjdGlvbi5iYWNrZ3JvdW5kfS8+KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlbmRlcmVkRGF0YSk7XG59XG4iLCIvKipcbiAqIGFwcC5qc1xuICogPT09PT09XG4gKiBNYWluIGZpbGUgb2YgdGhlIGFwcGxpY2F0aW9uLiBUaGlzIGZpbGUgaXMgdXNlZCB0byBpbml0aWFsaXplIHRoZSBzY3JvbGxlciBhbmQgaW1wb3J0cyB0aGUgdmlzdWFsaXphdGlvbnMgdXNlZC5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgc3RydWN0dXJlIGZyb20gJy4uL2RhdGEvc3RydWN0dXJlL3N0cnVjdHVyZS5qc29uJztcblxuaWYoIUVOVl9DT05GSUcuZG93bmxvYWRTdHJ1Yyl7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyb290JykuaW5uZXJIVE1MID0gKHN0cnVjdHVyZS5odG1sc3RydWMpO1xufVxuXG5pbXBvcnQgJy4uL2Fzc2V0cy9zdHlsZXMvc3R5bGUuc2Nzcyc7XG5pbXBvcnQge2dvb2dsZV9jb25maWd9IGZyb20gXCIuLi9kYXRhL2dvb2dsZV9jb25maWdcIjtcbmltcG9ydCB7IFJlbmRlclN0cnVjdHVyZSB9IGZyb20gJy4vZ2VuZXJhdG9yL1JlbmRlclN0cnVjdHVyZSc7XG5pbXBvcnQgeyBpbml0U2Nyb2xsZXIgfSBmcm9tICcuL2dlbmVyYXRvci9pbml0U2Nyb2xsZXInO1xuaW1wb3J0IHsgZ2VuZXJhdGVDYWxsYmFja3MgfSBmcm9tICcuL2dlbmVyYXRvci9zdHJ1Y3R1cmVHZW5lcmF0b3InO1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IHsgc2F2ZUFzIH0gZnJvbSAnZmlsZS1zYXZlcic7XG5cbmlmKEVOVl9DT05GSUcuZG93bmxvYWRTdHJ1Yyl7XG4gIFByb21pc2UuYWxsKFtpbXBvcnQoXCJyZWFjdC1kb20vY2xpZW50XCIpLCBpbXBvcnQoXCJyZWFjdC1kb20vc2VydmVyXCIpLCBpbXBvcnQoXCJyZWFjdFwiKV0pXG4gICAgLnRoZW4ocGFja2FnZXMgPT4ge1xuICAgICAgY29uc3QgUmVhY3RET00gPSBwYWNrYWdlc1swXTtcbiAgICAgIGNvbnN0IFJlYWN0RE9NU2VydmVyID0gcGFja2FnZXNbMV07XG4gICAgICBjb25zdCBSZWFjdCA9IHBhY2thZ2VzWzJdO1xuICAgICAgYWRkTm90UHVibGlzaGVkKCk7XG4gICAgICBpZihFTlZfQ09ORklHLmF1dG9yZW5kZXIpe1xuICAgICAgICBkMy5jc3YoZ29vZ2xlX2NvbmZpZy5jb250ZW50VVJMKS50aGVuKCBjb250ZW50RGF0YSA9PiB7XG4gICAgICAgICAgZDMuY3N2KGdvb2dsZV9jb25maWcucGFyYW1zVVJMKS50aGVuKCBwYXJhbXNEYXRhID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJvb3QgPSBSZWFjdERPTS5jcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSk7XG4gICAgICAgICAgICByb290LnJlbmRlcihcbiAgICAgICAgICAgICAgPFJlbmRlclN0cnVjdHVyZSBjb250ZW50RGF0YT17Y29udGVudERhdGF9IHBhcmFtc0RhdGE9e3BhcmFtc0RhdGF9IHJlbmRlcmVkPXt0cnVlfS8+XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYWRkRm9vdGVyKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZWxzZXtcbiAgICAgICAgZDMuY3N2KGdvb2dsZV9jb25maWcuY29udGVudFVSTCkudGhlbiggY29udGVudERhdGEgPT4ge1xuICAgICAgICAgIGQzLmNzdihnb29nbGVfY29uZmlnLnBhcmFtc1VSTCkudGhlbiggcGFyYW1zRGF0YSA9PiB7XG4gICAgICAgICAgICBkMy5ibG9iKGdvb2dsZV9jb25maWcuY29udGVudFVSTCkudGhlbihjb250ZW50QmxvYiA9PiB7XG4gICAgICAgICAgICAgIGQzLmJsb2IoZ29vZ2xlX2NvbmZpZy5wYXJhbXNVUkwpLnRoZW4ocGFyYW1zQmxvYiA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkU3RydWMgPSBSZW5kZXJTdHJ1Y3R1cmUoe2NvbnRlbnREYXRhOiBjb250ZW50RGF0YSwgcGFyYW1zRGF0YTogcGFyYW1zRGF0YSwgcmVuZGVyOiBmYWxzZX0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGh0bWxTdHJ1YyA9IFJlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RhdGljTWFya3VwKGdlbmVyYXRlZFN0cnVjKTtcbiAgICAgICAgICAgICAgICB3cml0ZUhUTUxmaWxlKGh0bWxTdHJ1YywgY29udGVudEJsb2IsIHBhcmFtc0Jsb2IpO1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlQ2FsbGJhY2tzKGNvbnRlbnREYXRhLHBhcmFtc0RhdGEpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pXG59XG5lbHNle1xuICBpZihFTlZfQ09ORklHLmF1dG9yZW5kZXIpe1xuICAgIFByb21pc2UuYWxsKFtpbXBvcnQoXCJyZWFjdC1kb20vY2xpZW50XCIpLCBpbXBvcnQoXCJyZWFjdFwiKV0pXG4gICAgLnRoZW4ocGFja2FnZXMgPT4ge1xuICAgICAgY29uc3QgUmVhY3RET00gPSBwYWNrYWdlc1swXTtcbiAgICAgIGNvbnN0IFJlYWN0ID0gcGFja2FnZXNbMV07XG4gICAgICBkMy5jc3YoZ29vZ2xlX2NvbmZpZy5jb250ZW50VVJMKS50aGVuKCBjb250ZW50RGF0YSA9PiB7XG4gICAgICAgIGQzLmNzdihnb29nbGVfY29uZmlnLnBhcmFtc1VSTCkudGhlbiggcGFyYW1zRGF0YSA9PiB7XG4gICAgICAgICAgY29uc3Qgcm9vdCA9IFJlYWN0RE9NLmNyZWF0ZVJvb3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpKTtcbiAgICAgICAgICByb290LnJlbmRlcihcbiAgICAgICAgICAgIDxSZW5kZXJTdHJ1Y3R1cmUgY29udGVudERhdGE9e2NvbnRlbnREYXRhfSBwYXJhbXNEYXRhPXtwYXJhbXNEYXRhfSByZW5kZXJlZD17dHJ1ZX0vPlxuICAgICAgICAgICk7XG4gICAgICAgICAgYWRkRm9vdGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgZWxzZXtcbiAgICBkMy5jc3YoZ29vZ2xlX2NvbmZpZy5sb2NhbENvbnRlbnRVUkwpLnRoZW4oIGNvbnRlbnREYXRhID0+IHtcbiAgICAgIGQzLmNzdihnb29nbGVfY29uZmlnLmxvY2FsUGFyYW1zVVJMKS50aGVuKCBwYXJhbXNEYXRhID0+IHtcbiAgICAgICAgaW5pdFNjcm9sbGVyKGNvbnRlbnREYXRhLCBwYXJhbXNEYXRhKTtcbiAgICAgICAgYWRkRm9vdGVyKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3cml0ZUhUTUxmaWxlKEhUTUxTdHJ1Y3QsIGNvbnRlbnREYXRhLCBwYXJhbXNEYXRhKXtcbiAgbGV0IGJsb2IgPSBuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkoe2h0bWxzdHJ1YzogYCR7SFRNTFN0cnVjdH1gfSwgbnVsbCwgMildLCB7dHlwZTogXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLThcIn0pO1xuICBsZXQgY29udGVudENTViA9IG5ldyBCbG9iKFtjb250ZW50RGF0YV0sIHt0eXBlOiBcInRleHQvY3N2O2NoYXJzZXQ9dXRmLThcIn0pO1xuICBsZXQgcGFyYW1zQ1NWID0gbmV3IEJsb2IoW3BhcmFtc0RhdGFdLCB7dHlwZTogXCJ0ZXh0L2NzdjtjaGFyc2V0PXV0Zi04XCJ9KTtcblxuICBzYXZlQXMoY29udGVudENTViwgXCJjb250ZW50RGF0YS5jc3ZcIik7XG4gIHNhdmVBcyhwYXJhbXNDU1YsIFwicGFyYW1zRGF0YS5jc3ZcIik7XG4gIHNhdmVBcyhibG9iLCBcInN0cnVjdHVyZS5qc29uXCIpO1xufVxuXG5mdW5jdGlvbiBhZGROb3RQdWJsaXNoZWQoKXtcbiAgY29uc3QgZGl2ID0gZDMuc2VsZWN0KCcucHVsbC1yaWdodCcpLmluc2VydChcImxpXCIsJ2xpJyk7XG4gIGRpdi5odG1sKGA8cCBjbGFzcz0nbm90LXB1Ymxpc2hlZCc+TmUgcGFzIHB1YmxpZXI8L3A+YCk7XG59XG5cbmZ1bmN0aW9uIGFkZEZvb3Rlcigpe1xuICAvL2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmb290ZXJDb250YWluZXInKS5yZW1vdmUoKTtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Zvb3RlckNvbnRhaW5lcicpLmlubmVySFRNTCA9IGQzLnNlbGVjdChgI2Zvb3RlckNvbnRlbnRgKS5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiY29uc3QgZ29vZ2xlX2NvbmZpZyA9IHtcbiAgICBcImNvbnRlbnRVUkxcIjogXCJodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC9lLzJQQUNYLTF2U0V5d0pFMFZVZ3kzTnNxM1RnX29oLVZzNjMzVFNpbWRJSGZrWFR5ejlCYkV0V05WZ3VyZDFUb3UtUTVhbnZkT2l3M2NvQ0ZrRENpU1lxL3B1Yj9naWQ9MCZzaW5nbGU9dHJ1ZSZvdXRwdXQ9Y3N2XCIsXG4gICAgXCJwYXJhbXNVUkxcIjogXCJodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC9lLzJQQUNYLTF2U0V5d0pFMFZVZ3kzTnNxM1RnX29oLVZzNjMzVFNpbWRJSGZrWFR5ejlCYkV0V05WZ3VyZDFUb3UtUTVhbnZkT2l3M2NvQ0ZrRENpU1lxL3B1Yj9naWQ9NDA5OTUwMjM3JnNpbmdsZT10cnVlJm91dHB1dD1jc3ZcIixcbiAgICBcImxvY2FsQ29udGVudFVSTFwiOiBcIi4vZGF0YS9zdHJ1Y3R1cmUvY29udGVudERhdGEuY3N2XCIsXG4gICAgXCJsb2NhbFBhcmFtc1VSTFwiOiBcIi4vZGF0YS9zdHJ1Y3R1cmUvcGFyYW1zRGF0YS5jc3ZcIlxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7Z29vZ2xlX2NvbmZpZ307XG4iXSwibmFtZXMiOlsiSW50cm9TZWN0aW9uIiwicHJvcHMiLCJhdXRob3JzTGluZSIsIkFycmF5IiwiZnJvbSIsIlN0cmluZyIsIm9wdGlvbkRhdGEiLCJhdXRob3JzIiwic3BsaXQiLCJtYXAiLCJuYW1lIiwiaSIsImN1ckxlbiIsImxlbmd0aCIsImtleSIsImhyZWYiLCJ1cmxzIiwiaW50cm9TZWN0aW9uT2JqIiwiY2xhc3NOYW1lIiwiY2xhc3NlcyIsInRpdGxlIiwiZGF0ZSIsImFtb3JjZSIsImJhY2tncm91bmQiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsIlRleHRTZWN0aW9uIiwicXVvdGVPYmoiLCJpc1F1b3RlIiwiaW5jbHVkZXMiLCJ0ZXh0IiwidGV4dHMiLCJhdXRob3IiLCJiaWdOdW1iZXJPYmoiLCJpc0JpZ051bWJlciIsIm51bWJlciIsInVuZGVyVGV4dCIsImlzVmlzdWFsIiwidmlzdWFsIiwidmlzdWFsT2JqIiwiaWQiLCJzcmMiLCJmaWxlbmFtZSIsInZpc3VlbGNsYXNzZXMiLCJwYWRkaW5nQm90dG9tIiwiYXV0b1BsYXkiLCJsb29wIiwibXV0ZWQiLCJwbGF5c0lubGluZSIsInByZWxvYWQiLCJ0ZXh0U2VjdGlvbk9iaiIsInBhcnNlIiwic3RhcnRzV2l0aCIsIkRXQ2hhcnQiLCJpZnJhbWVSZWYiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsImhlaWdodCIsInNldFN0YXRlIiwib25NZXNzYWdlIiwidXNlQ2FsbGJhY2siLCJkYXRhIiwic291cmNlIiwiY3VycmVudCIsImNvbnRlbnRXaW5kb3ciLCJ1c2VFZmZlY3QiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlZiIsInNjcm9sbGluZyIsImZyYW1lQm9yZGVyIiwid2lkdGgiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJsb2FkaW5nIiwib3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzIiwicGFyYW1ldGVyc0hlYWRlckNvbnN0YW50cyIsInRpdHJlIiwiYXV0ZXVycyIsIlZpelNlY3Rpb24iLCJzdGVwcyIsImN1clN0ZXBDbGFzc2VzIiwiY3VyQ29tbW9uQ2xhc3MiLCJ2aXpTZWN0aW9uT2JqIiwibGlzdElEIiwiY2xhc3NlZCIsInN0ZXAiLCJpbmRleCIsInN0ZXBjbGFzc2VzIiwiZm9yRWFjaCIsInN0ZXBFbGVtIiwiaWR4IiwiaXNBcnJheSIsImVsZW0iLCJyZWR1Y2UiLCJhIiwiYiIsIkZ1bGxQYWdlU2VjdGlvbiIsImZ1bGxwYWdlU2VjdGlvbk9iaiIsIm1haW5UaXRsZSIsImNsYXNzIiwic3ViVGl0bGUiLCJnZXRTdHJ1Y3R1cmUiLCJjb250ZW50RGF0YSIsInBhcmFtc0RhdGEiLCJzdHJ1Y3R1cmVEYXRhIiwidml6U2VjdGlvbklEcyIsIm9wdGlvbnMiLCJnZXRPcHRpb25zIiwiY29uc29sZSIsImxvZyIsInJvd0RhdGEiLCJjdXJBbW9yY2UiLCJzZWN0aW9uQmFja2dyb3VuZCIsInNlY3Rpb25UeXBlIiwicGFyc2VDbGFzc2VzIiwiZ2FtZWlkIiwidGl0bGVPYmoiLCJpc0pzb24iLCJKU09OIiwiY3VyRGF0YSIsImF0dHJpYnV0cyIsInNjcm9sbFR5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImN1clZpelNlY3Rpb24iLCJwdXNoIiwiY3VyU2VjdGlvbiIsInNlY3Rpb25BdHRyIiwibWVkaWFJbmZvIiwiT2JqZWN0IiwidmFsdWVzIiwic3RyIiwiZSIsImpvaW4iLCJpc1hTIiwiaW5uZXJXaWR0aCIsImlzU20iLCJjb25zdGFudHMiLCJ0b2tlbiIsIm1hcEJvdW5kcyIsIm1heCIsImNvbG9ycyIsImNsdXN0ZXJNYXhab29tIiwiY2x1c3RlclJhZGl1cyIsImNsdXN0ZXJNaW5Qb2ludHMiLCJtYXBib3hnbCIsIk1hcCIsImRpdiIsImRhdGFTb3VyY2VBcnJheSIsInN0eWxlVXJsIiwiaW5pdENvb3JkcyIsImRpc2FibGVDb250cm9scyIsIndpdGhIYW5kbGVycyIsInRoaXMiLCJkYXRhU291cmNlT2JqZWN0cyIsImNvbnRhaW5lciIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsImNlbnRlciIsInpvb20iLCJtYXhCb3VuZHMiLCJib3VuZHNMaXN0IiwiZGF0YVNvdXJjZSIsImV4dHJhQm91bmRzIiwic2Nyb2xsWm9vbSIsImRpc2FibGUiLCJkcmFnUGFuIiwiZHJhZ1JvdGF0ZSIsImJveFpvb20iLCJkb3VibGVDbGlja1pvb20iLCJzZXR1cEhhbmRsZXJzIiwiZGF0YUxpc3QiLCJib3VuZHMiLCJwYWRkaW5nIiwic2NyZWVuIiwiZHVyYXRpb24iLCJmaXRCb3VuZHMiLCJkYXRhUGFpciIsImZseVRvIiwic3BlZWQiLCJjdXJ2ZSIsImVhc2luZyIsInQiLCJvYmppbmRleCIsInVwZGF0ZUNvb3Jkc0FuZFpvb20iLCJrZXlOYW1lIiwic291cmNlSW5kZXgiLCJpdGVtSW5kZXgiLCJpbml0aWFsaXNlZCIsImFkZFNvdXJjZSIsInR5cGUiLCJhZGRMYXllciIsInBhaW50IiwicHJvcGVydHkiLCJ2YWx1ZSIsInNldFBhaW50UHJvcGVydHkiLCJvbiIsImdldENhbnZhcyIsImN1cnNvciIsImRyYXdQb3B1cCIsImNsb3NlUG9wdXAiLCJwcmV2ZW50RGVmYXVsdCIsImNvb3JkaW5hdGVzIiwiZmVhdHVyZXMiLCJnZW9tZXRyeSIsInNsaWNlIiwicHJvcGVydGllcyIsIm9wZW5kYXlzdHIiLCJvcGVubW9udGhzdHIiLCJvcGVueWVhcnN0ciIsImZlcm1kYXlzdHIiLCJmZXJtbW9udGhzdHIiLCJmZXJteWVhcnN0ciIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsImRhdGVTdHlsZSIsImZvcm1hdCIsIkRhdGUiLCJVVEMiLCJkYXRlX291dmVydHVyZSIsImRhdGVfZmVybWV0dXJlIiwiaHRtbF9wb3B1cF9jb250ZW50IiwiTWF0aCIsImFicyIsImxuZ0xhdCIsImxuZyIsInBvcHVwIiwic2V0TG5nTGF0Iiwic2V0SFRNTCIsImFkZFRvIiwicmVtb3ZlIiwiZGF0YVNvdXJjZU5hbWUiLCJpbml0TWFwU291cmNlc0FuZExheWVycyIsImdldFNvdXJjZSIsInNldERhdGEiLCJHYXVnZXMiLCJkb2xsYXJzIiwidHdoIiwiSW50cm9Cb3giLCJzdGFydEdhbWUiLCJtYXBPYmoiLCJ2aWV3RXh0cmFCb3VuZE9iaiIsImdhbWVTdGFydCIsImludHJvRWxlbSIsIm9uQ2xpY2siLCJNdWx0aXBsZUNob2ljZSIsIm5leHRQcm9tcHQiLCJjdXJJbmRleCIsImNoYW5nZVByb21wdCIsInByZXZpb3VzUHJvbXB0IiwiY2hvaWNlcyIsImNob2ljZSIsImNvc3QiLCJjaG9pY2VzX3ZhbHVlcyIsInVzZSIsIlByaW50UHJvbXB0IiwibWVzc2FnZSIsIlJlcGFydGl0aW9uIiwic2V0SmV0b25zIiwibWVnYXdhdHRzIiwic2V0TWVnYXdhdHRzIiwib3B0aW9uVmFsdWVzIiwic2V0T3B0aW9uVmFsdWVzIiwibmV3T3B0aW9uVmFsdWVzIiwiZ2V0T3B0aW9uUGFyYW1zIiwibmV3SmV0b25zIiwiYWNjIiwiY3VyVmFsIiwibmV3TVciLCJjdXJyZW50VXNlZFRva2VucyIsImNvbmNhdFRva2VucyIsInByb2Nlc3NDaG9pY2VzIiwic3BsaXR0ZWRDaG9pY2VzIiwidW5pdFZhbHVlIiwicGFyc2VJbnQiLCJ0b3RhbCIsInVuaXRNV3ZhbHVlIiwibW9kaWZ5T25DbGljayIsImRpZmYiLCJuZXdBcnJheSIsImN1ck9wdGlvblBhcmFtcyIsImZpbGwiLCJjb25jYXQiLCJhcHBseSIsImN1ckxldHRlciIsIlByb21wdEJveCIsIm5ld1ZhbHVlIiwiY3VyUHJvbXB0IiwicGFyYW0iLCJyZW5kZXJTd2l0Y2giLCJNYWluRnJhbWUiLCJnYW1lU3RhdHVzIiwic2V0U3RhdHVzIiwiZ2FtZUluZGV4Iiwic2V0R2FtZUluZGV4Iiwic2V0RG9sbGFycyIsInNldFR3aCIsImdldEdhbWVQcm9tcHQiLCJnYW1lRGF0YSIsImZpbHRlciIsInVwZGF0ZURvbGxhcnMiLCJ1cGRhdGVUd2giLCJFbmdpbmUiLCJpbnRyb09iaiIsInJvb3RFbGVtIiwiYXBwZW5kIiwiZW5naW5lUm9vdCIsIlJlYWN0RE9NIiwibm9kZSIsImluaXRFbmdpbmUiLCJyZW5kZXIiLCJtYXBCb3hTdHlsZSIsImluaXRpYWxpemUiLCJkMyIsInRoZW4iLCJnZW9EYXRhIiwibWFwU291cmNlIiwic291cmNlTmFtZSIsInNvdXJjZVR5cGUiLCJzb3VyY2VEYXRhIiwibGF5ZXJUeXBlIiwiY29sb3IiLCJvcGFjaXR5IiwiY29vcmRzIiwiZXh0cmFDb29yZHMiLCJ6b25lMSIsIm1hcENvbnRhaW5lciIsImF0dHIiLCJzZWxlY3QiLCJzZXR1cFZpeiIsImZ1bGxTdHJ1Y3R1cmUiLCJzZWN0aW9uT2JqIiwiU2Nyb2xsZXJTdGVwIiwiZWwiLCJjYWxsYmFjayIsIl9pc0FjdGl2YXRlIiwic2Nyb2xsRGlyZWN0aW9uIiwiY2xhc3NMaXN0IiwiYWRkIiwiaW5pdFNjcm9sbGVyIiwiZWxlbWVudHMiLCJzZWxlY3RvciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsInN0aWNreUJpdHMiLCJzdGlja3lCaXRTdGlja3lPZmZzZXQiLCJMYXp5TG9hZCIsImVsZW1lbnRzX3NlbGVjdG9yIiwidGhyZXNob2xkIiwiUHJvbWlzZSIsImFsbCIsInYxIiwiY2FsbGJhY2tzIiwiX29mZnNldFRvcCIsIl9vZmZzZXRCb3R0b20iLCJpbm5lckhlaWdodCIsImlzSW5pdGlhbGl6ZWQiLCJsYXN0U2Nyb2xsIiwidml6IiwidmlzaWJsZVN0ZXBzIiwiYXJ0aWNsZVJlbWluZGVyIiwicXVlcnlTZWxlY3RvciIsInNjcm9sbFByb2dyZXNzIiwidml6U2VjdGlvbnMiLCJFcnJvciIsInZpelNlY3Rpb24iLCJzZWN0aW9ucyIsImoiLCJfdXBkYXRlIiwiY3VycmVudFNjcm9sbCIsInBhZ2VZT2Zmc2V0IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsVG9wIiwiYm91bmRpbmdSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwiZGVhY3RpdmF0ZSIsImlzQXJ0aWNsZVJlbWluZGVyRGlzcGxheWVkIiwiYm90dG9tIiwiaXNBcnRpY2xlUmVtaW5kZXJJc1Zpc2libGUiLCJjb250YWlucyIsInNlY3Rpb24iLCJhY3RpdmF0ZSIsIl91cGRhdGVTY3JvbGxQcm9ncmVzcyIsInNjcm9sbGVkIiwiYm9keSIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInB1YmxpY0ludGVyZmFjZSIsIm9mZnNldFRvcCIsInVuZGVmaW5lZCIsIk51bWJlciIsImlzSW50ZWdlciIsIm9mZnNldEJvdHRvbSIsInNjcm9sbGVyIiwiUmVuZGVyU3RydWN0dXJlIiwicmVuZGVyZWQiLCJyZW5kZXJlZERhdGEiLCJrZXlzIiwic2VjdGlvbktleSIsImlubmVySFRNTCIsInN0cnVjdHVyZSIsInBhY2thZ2VzIiwiUmVhY3QiLCJnb29nbGVfY29uZmlnIiwiY3JlYXRlUm9vdCIsImdldEVsZW1lbnRCeUlkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=