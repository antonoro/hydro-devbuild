(self.webpackChunkscrollytelling_template=self.webpackChunkscrollytelling_template||[]).push([[179],{33425:(e,t,n)=>{"use strict";const a=JSON.parse('{"E":"<section id=\\"vizSection1_0\\" class=\\"viz-section full-page\\"><div class=\\"steps display-none\\"><section class=\\"display-none\\"><p>Bla bl abl abl ablalbalanl.</p></section></div><div class=\\"viz\\" id=\\"viz\\"><div id=\\"vizSection1_0_0\\" class=\\"iframeContainer map-area\\"></div></div></section>"}');var r=n(40207),o=n(67294);function c(e){var t=Array.from(String(e.optionData.authors).split(",")).map((function(t,n){var a=Array.from(String(e.optionData.authors).split(",")).length;return a>2?n===a-2?o.createElement("span",{key:n},o.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)," et "):n===a-1?o.createElement("span",{key:n},o.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)):o.createElement("span",{key:n},o.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t),", "):0===n?o.createElement("span",{key:n},o.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)," et "):o.createElement("span",{key:n},o.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t))})),n=o.createElement("section",{className:"intro-section ".concat(e.classes)},o.createElement("h1",null,e.optionData.title),o.createElement("address",null,o.createElement("div",{className:"authors"},"Par ",t),o.createElement("div",{className:"date"},e.optionData.date)),o.createElement("p",null,e.amorce));return e.background?o.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},n):n}var i=n(25935);function s(e){var t,n=String(e.classes).includes("citation");n&&(t={text:String(e.texts).split("/")[0],author:String(e.texts).split("/")[1]});var a,r=String(e.classes).includes("bigNumber");r&&(a={number:String(e.texts).split("/")[0],underText:String(e.texts).split("/")[1]});var c=e.visual,s=""!==c?"Photo"===e.visual?o.createElement("img",{key:"photoTextSection_".concat(e.id),id:"photoTextSection_".concat(e.id),src:"assets/img/675/".concat(e.filename),"data-srcset":"assets/img/2048/".concat(e.filename," 2048w, assets/img/990/").concat(e.filename," 990w, assets/img/675/").concat(e.filename," 675w, assets/img/1350/").concat(e.filename," 1350w, assets/img/100/").concat(e.filename," 100w, assets/img/495/").concat(e.filename," 495w, assets/img/1024/").concat(e.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(e.visuelclasses),style:{paddingBottom:"1rem"}}):"Video"===e.visual?o.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(e.visuelclasses),preload:"metadata",key:"videoTextSection_".concat(e.id),id:"videoTextSection_".concat(e.id)},o.createElement("source",{src:"assets/videos/".concat(e.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):o.createElement("div",null):o.createElement("div",null),l=o.createElement("section",{className:"text-section ".concat(e.classes)},n?o.createElement("blockquote",{className:"small"},o.createElement("div",null,o.createElement("p",null,o.createElement("b",null,(0,i.ZP)(t.text))),o.createElement("p",{className:"author"},t.author),o.createElement("div",{className:"symbol"}))):r?o.createElement("div",{className:"container-number"},o.createElement("div",{className:"numbers"},o.createElement("h2",null,a.number),o.createElement("small",null,a.underText))):o.createElement("div",null,c?s:o.createElement("div",null),String(e.texts).startsWith("<")?(0,i.ZP)(e.texts):o.createElement("p",null,(0,i.ZP)(e.texts))));return e.background?o.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},l):l}var l,u=n(45697),m=n.n(u),d=["title","src"];function p(){return p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},p.apply(this,arguments)}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function v(e){var t,n,a=e.title,r=e.src,c=function(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}(e,d),i=(0,o.useRef)(),s=(t=(0,o.useState)(500),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);c=!0);}catch(e){i=!0,r=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw r}}return o}}(t,n)||function(e,t){if(e){if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?f(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=s[0],u=s[1],m=(0,o.useCallback)((function(e){var t=e.data,n=void 0===t?{}:t;e.source===i.current.contentWindow&&"string"!=typeof n&&n["datawrapper-height"]}),[u,i]);return(0,o.useEffect)((function(){return window.addEventListener("message",m),function(){return window.removeEventListener("message",m)}}),[l,u,m]),o.createElement("iframe",p({ref:i,scrolling:"no",frameBorder:"0",width:"100%"},c,{title:a,src:r,height:l}))}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}v.propTypes={title:m().string.isRequired,src:m().string.isRequired,loading:m().oneOf(["eager","lazy"])};var g="intro-titre",y="pleine-page-titre",E="texte-classique",b="viz-section",w="centré",x="Photo",S="Video",k="Visualisation",N="iframe",T=(h(l={titre:"Titre",auteurs:"Auteurs",date:"Date"},"date","Date"),h(l,"urls","LienAuteurs"),h(l,"lienfichiersource","LienFichierSource"),l);function I(e){var t,n,a,r=o.createElement("section",{id:e.listID,className:e.classed},o.createElement("div",{className:"steps ".concat((t=e.steps,n=t.map((function(e,t){return e.stepclasses})),a=new Array(n.length),n.forEach((function(e,t){if(Array.isArray(e))e.forEach((function(e){for(var r=t;r<n.length;r++)n[r].includes(e)&&(a[r]=e)}));else if("string"==typeof e)for(var r=t;r<n.length;r++)n[r].includes(e)&&(a[r]=e)})),a.reduce((function(e,t){return e===t&&""!==e&&""!==t?e:""}))))},e.steps.map((function(e,t){var n,a=String(e.stepclasses).includes("citation");return a&&(n={text:String(e.text).split("/")[0],author:String(e.text).split("/")[1]}),o.createElement("section",{key:t,className:e.stepclasses},a?o.createElement("blockquote",{className:"small"},o.createElement("div",null,o.createElement("p",null,o.createElement("b",null,(0,i.ZP)(n.text))),o.createElement("p",{className:"author"},n.author),o.createElement("div",{className:"symbol"}))):String(e.text).startsWith("<")?(0,i.ZP)(e.text):o.createElement("p",null,e.text?(0,i.ZP)(e.text):""))}))),o.createElement("div",{className:"viz",id:"viz"},e.steps.map((function(t,n){return t.visual===x?o.createElement("img",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),src:"assets/img/675/".concat(t.filename),"data-srcset":"assets/img/2048/".concat(t.filename," 2048w, assets/img/990/").concat(t.filename," 990w, assets/img/675/").concat(t.filename," 675w, assets/img/1350/").concat(t.filename," 1350w, assets/img/100/").concat(t.filename," 100w, assets/img/495/").concat(t.filename," 495w, assets/img/1024/").concat(t.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(t.visuelclasses)}):t.visual===S?o.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(t.visuelclasses),preload:"metadata",key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n)},o.createElement("source",{src:"assets/videos/".concat(t.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):t.visual===N?o.createElement("div",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),className:"iframeContainer"},o.createElement(v,{title:"Mesures d'arsenic",src:"".concat(t.filename)})):t.visual===k?o.createElement("div",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),className:"iframeContainer ".concat(t.visuelclasses)}):void 0}))));return e.background?o.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},r):r}function C(e){var t=o.createElement("section",{className:"full-page-section ".concat(e.classes)},o.createElement("div",{className:"titleImage"},e.filename?"Photo"===e.visual?o.createElement("img",{key:"".concat(e.id),id:"".concat(e.id),src:"assets/img/675/".concat(e.filename),"data-srcset":"assets/img/2048/".concat(e.filename," 2048w, assets/img/990/").concat(e.filename," 990w, assets/img/675/").concat(e.filename," 675w, assets/img/1350/").concat(e.filename," 1350w, assets/img/100/").concat(e.filename," 100w, assets/img/495/").concat(e.filename," 495w, assets/img/1024/").concat(e.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(e.visuelclasses)}):"Video"===e.visual?o.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(e.visuelclasses),preload:"metadata",key:"".concat(e.id),id:"".concat(e.id)},o.createElement("source",{src:"assets/videos/".concat(e.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):o.createElement("div",null):o.createElement("div",null),e.filename?o.createElement("div",{className:"filter"}):o.createElement("div",null)),o.createElement("div",{className:"captionholder"},o.createElement("h2",{className:"caption ".concat(e.mainTitle.class)},e.mainTitle.text),e.subTitle?o.createElement("h3",{className:"caption ".concat(e.subTitle.class)},e.subTitle.text):o.createElement("div",null)));return e.background?o.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},t):t}n(93162);var P=n(4160);function A(e,t){var n={},a=[],r=j(t);return console.log("content Data",e),e.map((function(e,t){if(e.Section===g){var o=e.StepClasses,c=e.TEXTE,i=e.StyleFond;n[e.SectionID]={key:t,sectionType:g,optionData:r,amorce:c,background:i,classes:O(o),gameid:e.GameID}}else if(e.Section===E){var s=e.TEXTE,l=e.StepClasses,u=e.StyleFond;n[e.SectionID]={key:t,sectionType:E,texts:s,visual:e.VISUEL,filename:e.NomFichierSource,background:u,classes:O(l),visuelclasses:O(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===y){var m=e.TEXTE;D(e.TEXTE)&&(m=JSON.parse(e.TEXTE)),n[e.SectionID]={key:t,sectionType:y,texts:D(e.TEXTE)?m:{mainTitle:{class:"",text:m},subTitle:null},visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,classes:O(e.StepClasses),visuelclasses:O(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===b){var d={attributs:e.Attributs,scrollType:e.Step,text:e.TEXTE,visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,visuelclasses:O(e.VisuelClasses),stepclasses:O(e.StepClasses),gameid:e.GameID};if(n.hasOwnProperty(e.SectionID)){var p=n[e.SectionID];p.push(d),n[e.SectionID]=p}else n[e.SectionID]=[d],a.push(e.SectionID)}})),a.map((function(e){var t=n[e],a=t[0].attributs===w?" full-page":"",r=t[0].background;n[e]={key:e,sectionType:b,listID:e,steps:t,classed:"viz-section".concat(a),mediaInfo:0,background:r}})),Object.values(n)}function D(e){try{JSON.parse(e)}catch(e){return!1}return!0}function O(e){return Array.from(e.split(";")).join(" ")}function j(e){return{title:e[0][T.titre],authors:e[0][T.auteurs],urls:e[0][T.urls],date:e[0][T.date]}}n(9208);var _=n(83731);function R(){return window.innerWidth<400}function z(){return window.innerWidth<=576}function L(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);c=!0);}catch(e){i=!0,r=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return B(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?B(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function M(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function q(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var V={token:"pk.eyJ1IjoibGVkZXZvaXIiLCJhIjoiY2p2bW81dHU2MWV1cTRhcXIzaXZqMGYxciJ9.WrIF8o69aR_TstDFu6Qyag",mapBounds:{max:[-165,30.72833,-25.23636,82.229434]},colors:["#F4CBC6","#F4A39A","#EE6A5E","#CE3727","#A22823","#751A1A","#410000"],clusterMaxZoom:11,clusterRadius:30,clusterMinPoints:5};_.accessToken=V.token;var F=function(){function e(t,n,a,r,o){var c=!(arguments.length>5&&void 0!==arguments[5])||arguments[5],i=arguments.length>6&&void 0!==arguments[6]&&arguments[6];M(this,e),this.dataSourceObjects=a,this.constants=V,this.map=new _.Map({container:n,style:r,preserveDrawingBuffer:!0,center:o.center,zoom:o.zoom}),this.maxBounds=o,this.boundsList=this.dataSourceObjects.map((function(e){return e.coords})),this.extraBounds=this.dataSourceObjects.map((function(e){return e.extraCoords})),c&&(this.map.scrollZoom.disable(),this.map.dragPan.disable(),this.map.dragRotate.disable(),this.map.boxZoom.disable(),this.map.doubleClickZoom.disable()),i&&this.setupHandlers(),this.dataList=this.dataSourceObjects.map((function(e){return e.data}))}var t,n;return t=e,n=[{key:"updateBounds",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.maxBounds,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:R()?5:z()?15:20,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:100;this.map=this.map.fitBounds(e,{duration:n,padding:t})}},{key:"updateCoordsAndZoom",value:function(e){this.map.flyTo({center:e.center,zoom:e.zoom,speed:.7,curve:1,easing:function(e){return e}})}},{key:"viewBoundObj",value:function(e){this.updateCoordsAndZoom(this.boundsList[e])}},{key:"viewExtraBoundObj",value:function(e,t,n){var a=this.extraBounds[e];this.updateCoordsAndZoom(a[t])}},{key:"viewInitBounds",value:function(e){this.updateCoordsAndZoom(this.maxBounds)}},{key:"showSourceXItemY",value:function(e,t){this.updateCoordsAndZoom(this.dataList[e][t])}},{key:"initMapSourcesAndLayers",value:function(){var e=this;this.initialised||(this.initialised=!0,this.dataSourceObjects.map((function(t){e.map.addSource(t.sourceName,{type:t.sourceType,data:t.sourceData}),"fill"===t.layerType?e.map.addLayer({id:t.sourceName,type:t.layerType,source:t.sourceName,paint:{"fill-color":t.color,"fill-opacity":t.opacity}}):"circle"===t.layerType&&e.map.addLayer({id:t.sourceName,type:t.layerType,source:t.sourceName,paint:{"circle-color":["match",["get","statut"],"Recherches effectuées ou en cours","#ff561c","Phase préliminaire","#ffc734","#b7b7b7"],"circle-radius":5}})})))}},{key:"changeLayerPaint",value:function(e,t,n){this.map.setPaintProperty(e,t,n)}},{key:"setupHandlers",value:function(){var e=this;this.map.on("mouseover","pensionnatsSource",(function(t){e.map.getCanvas().style.cursor="pointer",e.drawPopup(t)})),this.map.on("mouseout","pensionnatsSource",(function(t){e.map.getCanvas().style.cursor="default",e.closePopup()})),this.map.on("click","pensionnatsSource",(function(t){t.preventDefault(),e.map.getCanvas().style.cursor="pointer",e.drawPopup(t)}))}},{key:"drawPopup",value:function(e){for(var t=e.features[0].geometry.coordinates.slice(),n=e.features[0].properties,a=L(n.ouverture.split("/"),3),r=a[0],o=a[1],c=a[2],i=L(n.fermeture.split("/"),3),s=i[0],l=i[1],u=i[2],m=[new Intl.DateTimeFormat("fr-CA",{dateStyle:"long"}).format(new Date(Date.UTC(c,o,r))),new Intl.DateTimeFormat("fr-CA",{dateStyle:"long"}).format(new Date(Date.UTC(u,l,s)))],d=m[0],p=m[1],f="\n      <h3>".concat(n.name,"</h3>\n      <h4>").concat(n.ville,", ").concat(n.province,"</h4>\n      <p>").concat(d," - ").concat(p,"</p>\n      <p>").concat(n.statut,"</p>\n    ");Math.abs(e.lngLat.lng-t[0])>180;)t[0]+=e.lngLat.lng>t[0]?360:-360;this.popup=(new _.Popup).setLngLat(t).setHTML(f).addTo(this.map)}},{key:"closePopup",value:function(){this.popup&&this.popup.remove()}},{key:"updateData",value:function(e,t){this.initialised||this.initMapSourcesAndLayers(),this.map.getSource(e).setData(t)}}],n&&q(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();n(6899);var Y=n(20745);function Z(e){return(0,o.useEffect)((function(){}),[]),o.createElement("div",{className:"gauges"},o.createElement("div",{className:"gauge dollarGauge"},o.createElement("div",{className:"textBox"},o.createElement("h5",null,"Dollars")),o.createElement("div",{className:"gaugeColor blue"},o.createElement("div",{className:"value"},o.createElement("p",null,e.dollars)))),o.createElement("div",{className:"gauge environmentGauge"},o.createElement("div",{className:"textBox"},o.createElement("h5",null,"TWh en 2050")),o.createElement("div",{className:"gaugeColor green"},o.createElement("div",{className:"value"},o.createElement("p",null,e.twh)))))}function U(e,t,n,a,r,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(a,r)}function W(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function c(e){U(o,a,r,c,i,"next",e)}function i(e){U(o,a,r,c,i,"throw",e)}c(void 0)}))}}function X(e){var t=(0,o.useCallback)(W(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("starting game"),e.mapObj.viewExtraBoundObj(0,"zone1"),e.gameStart();case 3:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"gameBox"},o.createElement("div",{className:"introBox"},e.introElem),o.createElement("div",{className:"userBox"},o.createElement("div",{className:"startbutton",onClick:t},o.createElement("p",null,"Commencer"))))}function H(e,t,n,a,r,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(a,r)}function G(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function c(e){H(o,a,r,c,i,"next",e)}function i(e){H(o,a,r,c,i,"throw",e)}c(void 0)}))}}function J(e){(0,o.useEffect)((function(){}),[]);var t=(0,o.useCallback)(G(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("next prompt!",e.curIndex+1),e.changePrompt(e.curIndex+1);case 2:case"end":return t.stop()}}),t)})))),n=(0,o.useCallback)(G(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("previous prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"choices"},o.createElement("div",{className:"column"},e.curIndex>0?o.createElement("div",{className:"actionbutton",onClick:n},o.createElement("div",{className:"butn"},o.createElement("p",null,"Previous"))):o.createElement("div",null)),o.createElement("div",{className:"column"},e.choices.map((function(n,a){var r=e.choices_values[a].split("_")[0],c=e.choices_values[a].split("_")[1];return o.createElement("div",{className:"actionbutton",key:a,onClick:t},o.createElement("div",{className:"butn"},o.createElement("p",null,n," (coût: ",r," ; effet: ",c,")")))}))))}function Q(e,t,n,a,r,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(a,r)}function $(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function c(e){Q(o,a,r,c,i,"next",e)}function i(e){Q(o,a,r,c,i,"throw",e)}c(void 0)}))}}function K(e){var t=(0,o.useCallback)($(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("next prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)})))),n=(0,o.useCallback)($(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("next prompt!",e.curIndex+1),e.changePrompt(e.curIndex+1);case 2:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"printprompt"},o.createElement("div",{className:"message"},e.message),o.createElement("div",{className:"actionbutton",onClick:t},o.createElement("div",{className:"butn"},o.createElement("p",null,"Previous"))),o.createElement("div",{className:"actionbutton",onClick:n},o.createElement("div",{className:"butn"},o.createElement("p",null,"Suivant"))))}function ee(e,t,n,a,r,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(a,r)}function te(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function c(e){ee(o,a,r,c,i,"next",e)}function i(e){ee(o,a,r,c,i,"throw",e)}c(void 0)}))}}function ne(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);c=!0);}catch(e){i=!0,r=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ae(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ae(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ae(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function re(e){var t=ne((0,o.useState)(0),2),n=t[0],a=t[1],r=ne((0,o.useState)(0),2),c=r[0],i=r[1];(0,o.useEffect)((function(){}),[]);var s=(0,o.useCallback)(te(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("next prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)})))),l=(0,o.useCallback)(te(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("next prompt!",e.curIndex+1),e.changePrompt(e.curIndex+1);case 2:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"repartition"},e.choices.map((function(t,n){return a=t,r=e.choices_values[n].split("_"),{name:a,unitValue:parseInt(r[0]),total:parseInt(r[1]),unitMWvalue:parseInt(r[2])};var a,r})).map((function(e,t){return o.createElement("div",{className:"row",key:t},o.createElement("div",{className:"choice_header"},o.createElement("h5",null,e.name),"//",o.createElement("p",null,e.unitValue," jetons et ",e.unitMWvalue," MW par unité")),o.createElement("div",{className:"selector"},o.createElement("div",{className:"band_row"},o.createElement("div",{className:"band_column"},o.createElement("div",{className:"band",onClick:function(t){return function(e,t,n,r){var o=function(e){return(e.clientX-e.target.getBoundingClientRect().left)/e.target.getBoundingClientRect().width}(e);console.log(" totals check: ",e,o,Math.round(parseFloat(o*n).toFixed(0)/t),t,n,r),P.Ys(e.target).select(".colored").style("width","".concat(Math.max(Math.round(parseFloat(o*n/t).toFixed(0)*t*10),3),"%")),P.Ys(e.target.offsetParent).select(".rowjetonsTotal").select(".value").html(Math.round(parseFloat(o*n/t).toFixed(0))*t),P.Ys(e.target.offsetParent).select(".rowmegawattsTotal").select(".value").html(Math.round(parseFloat(o*n/t).toFixed(0))*r);var c=0,s=0;P.Ys(".repartition").selectAll(".band_row").nodes().map((function(e){c+=parseInt(P.Ys(e).select(".rowjetonsTotal").select(".value").html()),s+=parseInt(P.Ys(e).select(".rowmegawattsTotal").select(".value").html())})),a(c),i(s)}(t,e.unitValue,e.total,e.unitMWvalue)}},o.createElement("div",{className:"colored"})),(n=e.unitValue,r=e.total,e.unitMWvalue,c=parseInt(Math.floor(r/n)),s=Array.apply(null,Array(c+1)).map((function(e,t){return o.createElement("div",{className:"tick",key:t,style:{paddingLeft:"".concat(Math.floor(t*n/r*100),"%")}},t*n)})),o.createElement("div",{className:"separator"},o.createElement("div",{className:"line"}),o.createElement("div",{className:"ticks"},s)))),o.createElement("div",{className:"values"},o.createElement("div",{className:"rowjetonsTotal"},o.createElement("p",{className:"value"},"0")),o.createElement("div",{className:"rowmegawattsTotal"},o.createElement("p",{className:"value"},"0"))))));var n,r,c,s})),e.curIndex>0?o.createElement("div",{className:"actionbutton",onClick:s},o.createElement("div",{className:"butn"},o.createElement("p",null,"Previous"))):o.createElement("div",null),o.createElement("div",{className:"monitoring"},o.createElement("div",{className:"column"},o.createElement("div",{className:"monitoring_header"},o.createElement("h5",null,"Jetons investis")),o.createElement("div",{className:"monitoring_valeur"},o.createElement("h3",null,n))),o.createElement("div",{className:"column"},o.createElement("div",{className:"monitoring_header"},o.createElement("h5",null,"Électricité produite")),o.createElement("div",{className:"monitoring_valeur"},o.createElement("h3",null,c)))),o.createElement("div",{className:"actionbutton",onClick:l},o.createElement("div",{className:"butn"},o.createElement("p",null,"Suivant"))))}function oe(e,t,n,a,r,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(a,r)}function ce(e){(0,o.useEffect)((function(){}),[]);var t=(0,o.useCallback)(function(){var t,n=(t=regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.changePrompt(n);case 1:case"end":return t.stop()}}),t)})),function(){var e=this,n=arguments;return new Promise((function(a,r){var o=t.apply(e,n);function c(e){oe(o,a,r,c,i,"next",e)}function i(e){oe(o,a,r,c,i,"throw",e)}c(void 0)}))});return function(e){return n.apply(this,arguments)}}());return o.createElement("div",{className:"gameBox"},o.createElement("div",{className:"promptBox"},o.createElement("div",{className:"header"},o.createElement("div",{className:"surtitre"},o.createElement("h3",null,e.curPrompt.Sujet)),o.createElement("div",{className:"question"},o.createElement("p",null,e.curPrompt.Question))),function(n){switch(n){case"Repartition":return o.createElement(re,{choices:String(e.curPrompt.Choix).split(";"),choices_values:String(e.curPrompt.Choix_Valeurs).split(";"),changePrompt:t,curIndex:e.curIndex});case"Carte":case"Suivi":case"Catastrophe":default:return o.createElement(J,{choices:String(e.curPrompt.Choix).split(";"),changePrompt:t,curIndex:e.curIndex});case"Print":return o.createElement(K,{message:String(e.curPrompt.Texte_Supp),changePrompt:t,curIndex:e.curIndex});case"choixReponse":return o.createElement(J,{choices:String(e.curPrompt.Choix).split(";"),choices_values:String(e.curPrompt.Choix_Valeurs).split(";"),changePrompt:t,curIndex:e.curIndex})}}(e.curPrompt.Type)))}function ie(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);c=!0);}catch(e){i=!0,r=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return se(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?se(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function se(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function le(e){var t=ie((0,o.useState)("IDLE"),2),n=t[0],a=t[1],r=ie((0,o.useState)(0),2),c=r[0],i=r[1],s=ie((0,o.useState)(100),2),l=s[0],u=s[1],m=ie((0,o.useState)(100),2),d=m[0],p=m[1];(0,o.useEffect)((function(){console.log("checking props mapObj:",e.mapObj)}),[]),(0,o.useEffect)((function(){console.log("game ",n)}),[n]),(0,o.useEffect)((function(){f(c)}),[c]);var f=function(t){console.log("current game prompt:",e.gameData.filter((function(e){return String(e.Index)===String(t)})))};return o.createElement("div",{className:"gameScreen"},o.createElement(Z,{dollars:l,twh:d}),"IDLE"===n?o.createElement(X,{introElem:e.introElem,mapObj:e.mapObj,gameStart:function(){a("STARTED"),i(0)}}):"END"===n?o.createElement("div",null):o.createElement(ce,{curIndex:c,curPrompt:e.gameData[c],changePrompt:i,updateDollars:function(e){u((function(t){return t+e}))},updateTwh:function(e){p((function(t){return t+e}))}}))}function ue(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}n(97762);var me=function(){function e(t,n,a,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t;var c=this.container.append("div").classed("rootElem",!0);this.engineRoot=Y.createRoot(c.node()),this.optionData=n,this.mapObj=r,this.amorce=a.TEXTE,this.gameData=o,console.log("game Data is : ",this.gameData),this.initEngine()}var t,n;return t=e,(n=[{key:"initEngine",value:function(){var e=o.createElement(c,{key:"gameIntro",sectionType:g,optionData:this.optionData,amorce:this.amorce,background:null,classes:""});this.engineRoot.render(o.createElement(le,{introElem:e,mapObj:this.mapObj,gameStatus:this.gameStatus,gameData:this.gameData}))}}])&&ue(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function de(e,t,n,a,r,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(a,r)}function pe(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function c(e){de(o,a,r,c,i,"next",e)}function i(e){de(o,a,r,c,i,"throw",e)}c(void 0)}))}}var fe="mapbox://styles/ledevoir/clal9zlfk004a15qohhr7r495";function ve(e,t){return he.apply(this,arguments)}function he(){return(he=pe(regeneratorRuntime.mark((function e(t,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",P.gyn("https://docs.google.com/spreadsheets/d/e/2PACX-1vQQZ3sz0q1vnZmoYYR5IrCfuONhHcNw50iDtbg1H2mIX8lHDL1BQ4sAMi7iApSE1G9WQTW2jHcWv4KW/pub?gid=0&single=true&output=csv").then((function(e){return P.AVB("./data/filtered_accidents.geojson").then((function(a){var r=[{sourceName:"mapSource",sourceType:"geojson",sourceData:a,layerType:"circle",color:"#f58366",opacity:.8,coords:{center:[-70.566,52.488],zoom:4},extraCoords:{zone1:{center:[-70.566,52.488],zoom:5}}}],o=P.Ys(".map-area");o.append("div").classed("map",!0).attr("id","qcmap");var c=new F(P.Ys("#qcmap"),"qcmap",r,fe,{center:[-70.566,52.488],zoom:4});return c.map.on("load",(function(){P.Ys("#qcmap").select(".mapbox-improve-map").text(""),c.initMapSourcesAndLayers(),P.Ys("#qcmap").select(".loading").style("display","none"),P.Ys("#qcmap").select(".options-bar").classed("disabled",!1)})),new me(o,j(n),t[0],c,e),ge(t,n),[[function(){}]]}))})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ge(e,t){var n=A(e,t);console.log("checking structure:",n),n.map((function(e){"viz-section"===e.sectionType&&e.steps.map((function(t,n){""!==t.visual&&(0===n?P.Ys("#".concat(e.key,"_").concat(n)).style("opacity",1):P.Ys("#".concat(e.key,"_").concat(n)).style("opacity",0))}))}))}function ye(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function Ee(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var be=function(){function e(t,n,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.index=n,this.callback=a,this._isActivate=!1}var t,n;return t=e,(n=[{key:"activate",value:function(e){this._isActivate||(this._isActivate=!0,this.el.classList.add("active"),this.callback(e))}},{key:"deactivate",value:function(){this._isActivate&&(this._isActivate=!1,this.el.classList.remove("active"))}}])&&Ee(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),we=n(52732),xe=n.n(we),Se=n(89438);function ke(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function Ne(e,t){var n=[];[".viz",".full-page-section > img",".full-page-section > video"].forEach((function(e){n=n.concat(Array.from(document.querySelectorAll(e)))})),(0,Se.Z)(n,{stickyBitStickyOffset:40}),new(xe())({elements_selector:".lazy",threshold:500}),Promise.all([ve(e,t)]).then((function(e){var t,n;(function(e){var t=0,n=0,a=window.innerHeight,r=!1,o=0,c=[],i=[],s=[],l=document.querySelector(".article-reminder"),u=document.querySelector("header > .progress"),m=document.querySelector(".intro-section h1"),d=document.querySelectorAll(".viz-section");if(d.length!==e.length)throw new Error("The number of viz sections (".concat(d.length,") mismatch with the length of the first ")+"dimension of the callbacks array (".concat(e.length,"). Please, be sure that the two elements ")+"have the same size.");d.forEach((function(t,n){var a,r=function(e){if(Array.isArray(e))return ye(e)}(a=t.querySelectorAll("section"))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(a)||function(e,t){if(e){if("string"==typeof e)return ye(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ye(e,t):void 0}}(a)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(r.length!==e[n].length)throw new Error("The number of steps (".concat(r.length,") in the viz section #").concat(n+1," mismatch with the ")+"number of callbacks specified (".concat(e[n].length,') at the index "').concat(n,'". Please, be sure that the two ')+"elements have the same size.");c=c.concat(r.map((function(t,a){return new be(t,"".concat(n,"-").concat(a),e[n][a])}))),i=i.concat(i,t.querySelector(".viz > *"))}));var p=function(){var e=window.pageYOffset||document.documentElement.scrollTop;c.forEach((function(e){var r=e.el.getBoundingClientRect();a-r.top-n>0&&r.top+r.height-t>0?s.push(e):e.deactivate()}));var r=m.getBoundingClientRect().bottom<=0,i=l.classList.contains("visible");r&&!i?l.classList.add("visible"):!r&&i&&l.classList.remove("visible"),s.forEach((function(t,n){e>=o?n===s.length-1?t.activate("down"):t.deactivate():0===n?t.activate("up"):t.deactivate()})),f(),s=[],o=e},f=function(){var e=(document.body.scrollTop||document.documentElement.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100;u.style.width=e+"%"},v={initialize:function(){if(r)throw new Error("The scroller is already initialized.");return r=!0,window.addEventListener("scroll",p),window.addEventListener("resize",(function(){a=window.innerHeight,f()})),(window.pageYOffset||document.documentElement.scrollTop)>0&&p(),f(),v},offsetTop:function(e){if(void 0===e)return t;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return t=e,v},offsetBottom:function(e){if(void 0===e)return n;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return n=e,v}};return v})((t=e,n=1,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);c=!0);}catch(e){i=!0,r=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw r}}return o}}(t,n)||function(e,t){if(e){if("string"==typeof e)return ke(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ke(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]).offsetTop(40).offsetBottom(0).initialize()}))}function Te(e){return e.rendered&&(0,o.useEffect)((function(){Ne(e.contentData,e.paramsData)}),[]),t=A(e.contentData,e.paramsData),n={},Object.keys(t).map((function(e,a){var r=t[e];r.sectionType===g?n[e]=o.createElement(c,{key:r.key,sectionType:r.sectionType,optionData:r.optionData,amorce:(0,i.ZP)(r.amorce),background:r.background,classes:r.classes}):r.sectionType===E?n[e]=o.createElement(s,{key:r.key,id:r.key,sectionType:r.sectionType,texts:r.texts,background:r.background,classes:r.classes,visuelclasses:r.visuelclasses,visual:r.visual,filename:r.filename}):r.sectionType===y?n[e]=o.createElement(C,{key:r.key,id:r.key,sectionType:r.sectionType,background:r.background,classes:r.classes,visuelclasses:r.visuelclasses,visual:r.visual,mainTitle:r.texts.mainTitle,subTitle:r.texts.subTitle,filename:r.filename}):r.sectionType===b&&(n[e]=o.createElement(I,{key:r.key,listID:r.listID,steps:r.steps,classed:r.classed,mediaInfo:r.mediaInfo,background:r.background}))})),Object.values(n);var t,n}document.querySelector("#root").innerHTML=a.E,Promise.all([Promise.resolve().then(n.t.bind(n,20745,19)),Promise.resolve().then(n.t.bind(n,67294,19))]).then((function(e){var t=e[0],n=e[1];P.gyn(r.google_config.contentURL).then((function(e){P.gyn(r.google_config.paramsURL).then((function(a){t.createRoot(document.getElementById("root")).render(n.createElement(Te,{contentData:e,paramsData:a,rendered:!0})),document.querySelector("#footerContainer").innerHTML=P.Ys("#footerContent").node().innerHTML}))}))}))},40207:e=>{e.exports={google_config:{contentURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=0&single=true&output=csv",paramsURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=409950237&single=true&output=csv",localContentURL:"./data/structure/contentData.csv",localParamsURL:"./data/structure/paramsData.csv"}}}},e=>{var t=t=>e(e.s=t);e.O(0,[216],(()=>(t(28594),t(35666),t(33425)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YyxjQUFkQSxZQUEwQnpGLE1BQU0sU0FBQXpOLEdBQ3JDNkssRUFBQUEsSUFBT3FJLEVBQWMsY0FBZEEsV0FBeUJ6RixNQUFNLFNBQUF4TixHQUN2Qm1OLEVBQVMrRixXQUFXOUQsU0FBUytELGVBQWUsU0FDcEQ5RixPQUNILGdCQUFDbUYsR0FBRCxDQUFpQnpTLFlBQWFBLEVBQWFDLFdBQVlBLEVBQVl5UyxVQUFVLEtBa0N2RnJELFNBQVNtQixjQUFjLG9CQUFvQnNDLFVBQVlqSSxFQUFBQSxHQUFBLGtCQUE0QlEsT0FBT3lILG9CLFVDN0Y1Rk8sRUFBT0MsUUFBVSxDQUFDSixjQVBJLENBQ2xCLFdBQWMsbUtBQ2QsVUFBYSwyS0FDYixnQkFBbUIsbUNBQ25CLGVBQWtCLHNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL2NvbXBvbmVudHMvSW50cm9TZWN0aW9uLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9jb21wb25lbnRzL1RleHRTZWN0aW9uLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9jb21wb25lbnRzL0RXQ2hhcnQuanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL2dlbmVyYXRvci9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL2NvbXBvbmVudHMvVml6U2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvY29tcG9uZW50cy9GdWxsUGFnZVNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL2dlbmVyYXRvci9zdHJ1Y3R1cmVHZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvZGF0YS9zdHJ1Y3R1cmUvY2FsbGJhY2tzLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4uL2xlZGV2b2lyLWRhdGF2aXovc3JjL21hcHMvc2NyZWVuLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4uL2xlZGV2b2lyLWRhdGF2aXovc3JjL21hcHMvaW50ZXJhY3RpdmUtbWFwLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4uL2xlZGV2b2lyLWRhdGF2aXovc3JjL2dyYXBocy9zdGFja2VkQXJlYUNoYXJ0LmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9nYW1lL2NvbXBvbmVudHMvZ2F1Z2VzL0dhdWdlcy5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvZ2FtZS9jb21wb25lbnRzL2ludHJvQm94LmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9nYW1lL2NvbXBvbmVudHMvcHJvbXB0ZmlsbC9NdWx0aXBsZUNob2ljZS5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvZ2FtZS9jb21wb25lbnRzL3Byb21wdGZpbGwvUHJpbnRQcm9tcHQuanMiLCJ3ZWJwYWNrOi8vc2Nyb2xseXRlbGxpbmctdGVtcGxhdGUvLi9zcmMvYXBwL2dhbWUvY29tcG9uZW50cy9wcm9tcHRmaWxsL1JlcGFydGl0aW9uLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9nYW1lL2NvbXBvbmVudHMvUHJvbXB0Qm94LmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9nYW1lL2NvbXBvbmVudHMvbWFpbmZyYW1lLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9nYW1lL2VuZ2luZS5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvdml6LmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2FwcC9zY3JvbGxlci5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvZ2VuZXJhdG9yL2luaXRTY3JvbGxlci5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvZ2VuZXJhdG9yL1JlbmRlclN0cnVjdHVyZS5qcyIsIndlYnBhY2s6Ly9zY3JvbGx5dGVsbGluZy10ZW1wbGF0ZS8uL3NyYy9hcHAvYXBwLmpzIiwid2VicGFjazovL3Njcm9sbHl0ZWxsaW5nLXRlbXBsYXRlLy4vc3JjL2RhdGEvZ29vZ2xlX2NvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gSW50cm9TZWN0aW9uKHByb3BzKXtcclxuICAgIFxyXG4gICAgbGV0IGF1dGhvcnNMaW5lID0gQXJyYXkuZnJvbShTdHJpbmcocHJvcHMub3B0aW9uRGF0YS5hdXRob3JzKS5zcGxpdCgnLCcpKS5tYXAoKG5hbWUsaSkgPT4ge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBjdXJMZW4gPSBBcnJheS5mcm9tKFN0cmluZyhwcm9wcy5vcHRpb25EYXRhLmF1dGhvcnMpLnNwbGl0KCcsJykpLmxlbmd0aDtcclxuICAgICAgICBpZihjdXJMZW4gPiAyKXtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIGkgPT09IChjdXJMZW4tMikgP1xyXG4gICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2Ake1N0cmluZyhwcm9wcy5vcHRpb25EYXRhLnVybHMpLnNwbGl0KCcsJylbaV19YH0+e25hbWV9PC9hPiZuYnNwO2V0Jm5ic3A7XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgKSAgICBcclxuICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICBpID09PSAoY3VyTGVuIC0gMSkgPyBcclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBrZXk9e2l9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtgJHtTdHJpbmcocHJvcHMub3B0aW9uRGF0YS51cmxzKS5zcGxpdCgnLCcpW2ldfWB9PntuYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2Ake1N0cmluZyhwcm9wcy5vcHRpb25EYXRhLnVybHMpLnNwbGl0KCcsJylbaV19YH0+e25hbWV9PC9hPiwmbmJzcDtcclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIGkgPT09IDAgP1xyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICA8c3BhbiBrZXk9e2l9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2Ake1N0cmluZyhwcm9wcy5vcHRpb25EYXRhLnVybHMpLnNwbGl0KCcsJylbaV19YH0+e25hbWV9PC9hPiZuYnNwO2V0Jm5ic3A7XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICkgICAgXHJcblxyXG4gICAgICAgICAgICA6XHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIDxzcGFuIGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPXtgJHtTdHJpbmcocHJvcHMub3B0aW9uRGF0YS51cmxzKS5zcGxpdCgnLCcpW2ldfWB9PntuYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIClcclxuICAgIH0pO1xyXG4gICAgbGV0IGludHJvU2VjdGlvbk9iaiA9IChcclxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e2BpbnRyby1zZWN0aW9uICR7cHJvcHMuY2xhc3Nlc31gfT5cclxuICAgICAgICAgICAgPGgxPntwcm9wcy5vcHRpb25EYXRhLnRpdGxlfTwvaDE+XHJcbiAgICAgICAgICAgIDxhZGRyZXNzPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhdXRob3JzXCI+UGFyIHthdXRob3JzTGluZX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkYXRlXCI+e3Byb3BzLm9wdGlvbkRhdGEuZGF0ZX08L2Rpdj5cclxuICAgICAgICAgICAgPC9hZGRyZXNzPlxyXG4gICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgIHtwcm9wcy5hbW9yY2V9XHJcbiAgICAgICAgICAgIDwvcD5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICApO1xyXG4gICAgbGV0IGNvbnRhaW5lZE9iaiA9IHByb3BzLmJhY2tncm91bmQgP1xyXG4gICAgICAgIChcclxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e2JhY2tncm91bmRDb2xvcjogYCR7cHJvcHMuYmFja2dyb3VuZH1gfX0gY2xhc3NOYW1lPXtcInNlY3Rpb25Db250YWluZXJcIn0+XHJcbiAgICAgICAgICAgICAgICB7aW50cm9TZWN0aW9uT2JqfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICAgICAgOlxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgaW50cm9TZWN0aW9uT2JqXHJcbiAgICAgICAgKVxyXG4gICAgXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIGNvbnRhaW5lZE9ialxyXG4gICAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgcGFyc2UgZnJvbSBcImh0bWwtcmVhY3QtcGFyc2VyXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVGV4dFNlY3Rpb24ocHJvcHMpe1xyXG5cclxuICAgIGxldCBpc1F1b3RlID0gU3RyaW5nKHByb3BzLmNsYXNzZXMpLmluY2x1ZGVzKCdjaXRhdGlvbicpO1xyXG4gICAgbGV0IHF1b3RlT2JqO1xyXG4gICAgaWYoaXNRdW90ZSl7XHJcbiAgICAgICAgcXVvdGVPYmogPSB7XHJcbiAgICAgICAgICAgIHRleHQ6U3RyaW5nKHByb3BzLnRleHRzKS5zcGxpdCgnLycpWzBdLFxyXG4gICAgICAgICAgICBhdXRob3I6U3RyaW5nKHByb3BzLnRleHRzKS5zcGxpdCgnLycpWzFdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaXNCaWdOdW1iZXIgPSBTdHJpbmcocHJvcHMuY2xhc3NlcykuaW5jbHVkZXMoJ2JpZ051bWJlcicpO1xyXG4gICAgbGV0IGJpZ051bWJlck9iajtcclxuICAgIGlmKGlzQmlnTnVtYmVyKXtcclxuICAgICAgICBiaWdOdW1iZXJPYmogPSB7XHJcbiAgICAgICAgICAgIG51bWJlcjpTdHJpbmcocHJvcHMudGV4dHMpLnNwbGl0KCcvJylbMF0sXHJcbiAgICAgICAgICAgIHVuZGVyVGV4dDpTdHJpbmcocHJvcHMudGV4dHMpLnNwbGl0KCcvJylbMV1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpc1Zpc3VhbCA9IHByb3BzLnZpc3VhbDtcclxuICAgIGxldCB2aXN1YWxPYmogPSAoXHJcbiAgICAgICAgKGlzVmlzdWFsICE9PSBcIlwiKSA/IFxyXG4gICAgICAgICAgICBwcm9wcy52aXN1YWwgPT09IFwiUGhvdG9cIiA/IFxyXG4gICAgICAgICAgICAgICAgPGltZyBcclxuICAgICAgICAgICAgICAgICAgICBrZXk9e2BwaG90b1RleHRTZWN0aW9uXyR7cHJvcHMuaWR9YH1cclxuICAgICAgICAgICAgICAgICAgICBpZD17YHBob3RvVGV4dFNlY3Rpb25fJHtwcm9wcy5pZH1gfVxyXG4gICAgICAgICAgICAgICAgICAgIHNyYz17YGFzc2V0cy9pbWcvNjc1LyR7cHJvcHMuZmlsZW5hbWV9YH1cclxuICAgICAgICAgICAgICAgICAgICBkYXRhLXNyY3NldD17YGFzc2V0cy9pbWcvMjA0OC8ke3Byb3BzLmZpbGVuYW1lfSAyMDQ4dywgYXNzZXRzL2ltZy85OTAvJHtwcm9wcy5maWxlbmFtZX0gOTkwdywgYXNzZXRzL2ltZy82NzUvJHtwcm9wcy5maWxlbmFtZX0gNjc1dywgYXNzZXRzL2ltZy8xMzUwLyR7cHJvcHMuZmlsZW5hbWV9IDEzNTB3LCBhc3NldHMvaW1nLzEwMC8ke3Byb3BzLmZpbGVuYW1lfSAxMDB3LCBhc3NldHMvaW1nLzQ5NS8ke3Byb3BzLmZpbGVuYW1lfSA0OTV3LCBhc3NldHMvaW1nLzEwMjQvJHtwcm9wcy5maWxlbmFtZX0gMTAyNHdgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtc2l6ZXM9XCIobWF4LXdpZHRoOiAxMDBweCkgMTAwcHgsIChtYXgtd2lkdGg6IDQ5NXB4KSA0OTVweCwgKG1heC13aWR0aDogNjc1cHgpIDY3NXB4LCAobWF4LXdpZHRoOiA5OTBweCkgOTkwcHgsIChtYXgtd2lkdGg6ICAxMDI0cHgpIDEwMjRweCwgKG1heC13aWR0aDogIDEzNTBweCkgMTM1MHB4LCAobWF4LXdpZHRoOiAgMjA0OHB4KSAyMDQ4cHhcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGxhenkgJHtwcm9wcy52aXN1ZWxjbGFzc2VzfWB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3twYWRkaW5nQm90dG9tOiAnMXJlbSd9fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICBwcm9wcy52aXN1YWwgPT09IFwiVmlkZW9cIiA/IFxyXG4gICAgICAgICAgICAgICAgPHZpZGVvIGF1dG9QbGF5IGxvb3AgbXV0ZWQgcGxheXNJbmxpbmUgY2xhc3NOYW1lPXtgdmlkZW8gJHtwcm9wcy52aXN1ZWxjbGFzc2VzfWB9IHByZWxvYWQ9XCJtZXRhZGF0YVwiIGtleT17YHZpZGVvVGV4dFNlY3Rpb25fJHtwcm9wcy5pZH1gfSBpZD17YHZpZGVvVGV4dFNlY3Rpb25fJHtwcm9wcy5pZH1gfT5cclxuICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz17YGFzc2V0cy92aWRlb3MvJHtwcm9wcy5maWxlbmFtZX1gfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgVmlkw6lvIG5vbiBzdXBwb3J0w6llLiBSw6ktZXNzYXlleiBzdXIgdW4gYXV0cmUgYXBwYXJlaWwgb3UgZnVyZXRldXIuXHJcbiAgICAgICAgICAgICAgICA8L3ZpZGVvPlxyXG4gICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICA6XHJcbiAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgIClcclxuXHJcbiAgICBsZXQgdGV4dFNlY3Rpb25PYmogPSAoXHJcbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtgdGV4dC1zZWN0aW9uICR7cHJvcHMuY2xhc3Nlc31gfT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlzUXVvdGUgPyBcclxuICAgICAgICAgICAgPGJsb2NrcXVvdGUgY2xhc3NOYW1lPVwic21hbGxcIj5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAgICA8Yj5cclxuICAgICAgICAgICAgICAgICAgICB7cGFyc2UocXVvdGVPYmoudGV4dCl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9iPlxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiYXV0aG9yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge3F1b3RlT2JqLmF1dGhvcn1cclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3ltYm9sXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9ibG9ja3F1b3RlPlxyXG4gICAgICAgICAgICA6XHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIGlzQmlnTnVtYmVyID9cclxuICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lci1udW1iZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJudW1iZXJzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+e2JpZ051bWJlck9iai5udW1iZXJ9PC9oMj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YmlnTnVtYmVyT2JqLnVuZGVyVGV4dH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc21hbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmlzdWFsID8gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzdWFsT2JqXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcocHJvcHMudGV4dHMpLnN0YXJ0c1dpdGgoJzwnKSA/ICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlKHByb3BzLnRleHRzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3BhcnNlKHByb3BzLnRleHRzKX08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgKTtcclxuICAgIGxldCBjb250YWluZWRPYmogPSBwcm9wcy5iYWNrZ3JvdW5kID8gXHJcbiAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e2JhY2tncm91bmRDb2xvcjogYCR7cHJvcHMuYmFja2dyb3VuZH1gfX0gY2xhc3NOYW1lPXtcInNlY3Rpb25Db250YWluZXJcIn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0ZXh0U2VjdGlvbk9ian1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0U2VjdGlvbk9ialxyXG4gICAgICAgICAgICAgICAgKVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgY29udGFpbmVkT2JqXHJcbiAgICApXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEV0NoYXJ0KHsgdGl0bGUsIHNyYywgLi4ucHJvcHMgfSkge1xyXG4gIGNvbnN0IGlmcmFtZVJlZiA9IHVzZVJlZigpXHJcbiAgY29uc3QgW2hlaWdodCwgc2V0U3RhdGVdID0gdXNlU3RhdGUoNTAwKVxyXG5cclxuICBjb25zdCBvbk1lc3NhZ2UgPSB1c2VDYWxsYmFjayhcclxuICAgICh7IGRhdGEgPSB7fSwgc291cmNlIH0pID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHNvdXJjZSAhPT0gaWZyYW1lUmVmLmN1cnJlbnQuY29udGVudFdpbmRvdyB8fFxyXG4gICAgICAgIHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICFkYXRhWydkYXRhd3JhcHBlci1oZWlnaHQnXVxyXG4gICAgICApXHJcbiAgICAgICAgcmV0dXJuXHJcblxyXG4gICAgICAvL3NldFN0YXRlKE9iamVjdC52YWx1ZXMoZGF0YVsnZGF0YXdyYXBwZXItaGVpZ2h0J10pWzBdKVxyXG4gICAgfSxcclxuICAgIFtzZXRTdGF0ZSwgaWZyYW1lUmVmXVxyXG4gIClcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgb25NZXNzYWdlKVxyXG4gICAgcmV0dXJuICgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgb25NZXNzYWdlKVxyXG4gIH0sIFtoZWlnaHQsIHNldFN0YXRlLCBvbk1lc3NhZ2VdKVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGlmcmFtZVxyXG4gICAgICByZWY9e2lmcmFtZVJlZn1cclxuICAgICAgc2Nyb2xsaW5nPVwibm9cIlxyXG4gICAgICBmcmFtZUJvcmRlcj1cIjBcIlxyXG4gICAgICB3aWR0aD1cIjEwMCVcIlxyXG4gICAgICB7Li4ucHJvcHN9XHJcbiAgICAgIHRpdGxlPXt0aXRsZX1cclxuICAgICAgc3JjPXtzcmN9XHJcbiAgICAgIGhlaWdodD17aGVpZ2h0fVxyXG4gICAgLz5cclxuICApXHJcbn1cclxuXHJcbkRXQ2hhcnQucHJvcFR5cGVzID0ge1xyXG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgbG9hZGluZzogUHJvcFR5cGVzLm9uZU9mKFsnZWFnZXInLCAnbGF6eSddKSxcclxufSIsImV4cG9ydCBjb25zdCBjb250ZW50SGVhZGVyQ29uc3RhbnRzID0ge1xuICAgIHNlY3Rpb246IFwiU2VjdGlvblwiLFxuICAgIHNlY3Rpb25JRDogXCJTZWN0aW9uSURcIixcbiAgICBhdHRyaWJ1dHM6IFwiQXR0cmlidXRzXCIsXG4gICAgc291c3NlY3Rpb246IFwiU3RlcFwiLFxuICAgIHRleHRlOiBcIlRFWFRFXCIsXG4gICAgdmlzdWVsOiBcIlZJU1VFTFwiLFxuICAgIG5vbWZpY2hpZXJzb3VyY2U6IFwiTm9tRmljaGllclNvdXJjZVwiLFxuICAgIHN0eWxlZm9uZDogXCJTdHlsZUZvbmRcIixcbiAgICBzdGVwY2xhc3NlczogXCJTdGVwQ2xhc3Nlc1wiLFxuICAgIHZpc3VlbGNsYXNzZXM6IFwiVmlzdWVsQ2xhc3Nlc1wiLFxuICAgIG5vdGVzOiBcIk5vdGVzXCIsXG4gICAgZ2FtZWlkOiBcIkdhbWVJRFwiXG59O1xuXG5leHBvcnQgY29uc3Qgb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzID0ge1xuICAgIHNlY3Rpb250eXBlczoge1xuICAgICAgICBpbnRyb3RpdHJlOiBcImludHJvLXRpdHJlXCIsXG4gICAgICAgIHBsZWluZXBhZ2V0aXRyZTogXCJwbGVpbmUtcGFnZS10aXRyZVwiLFxuICAgICAgICB0ZXh0ZWNsYXNzaXF1ZTogXCJ0ZXh0ZS1jbGFzc2lxdWVcIixcbiAgICAgICAgdml6c2VjdGlvbjogXCJ2aXotc2VjdGlvblwiXG4gICAgfSxcbiAgICBzZWN0aW9uYXR0cmlidXRlczp7XG4gICAgICAgIHBsZWluZXBhZ2U6IFwicGxlaW5lLXBhZ2VcIixcbiAgICAgICAgZm9uZG5vaXI6IFwiZm9uZC1ub2lyXCIsXG4gICAgICAgIGNlbnRyZTogXCJjZW50csOpXCIsXG4gICAgICAgIGNvdGVjb3RlOiBcImPDtHTDqS1jw7R0w6lcIlxuICAgIH0sXG4gICAgdmlzdWVsdHlwZXM6e1xuICAgICAgICBwaG90bzogXCJQaG90b1wiLFxuICAgICAgICB2aWRlbzogXCJWaWRlb1wiLFxuICAgICAgICBhdWRpbzogXCJBdWRpb1wiLFxuICAgICAgICB2aXN1YWxpc2F0aW9uOiBcIlZpc3VhbGlzYXRpb25cIixcbiAgICAgICAgaWZyYW1lOiBcImlmcmFtZVwiXG4gICAgfSxcbiAgICBzb3Vzc2VjdGlvbnR5cGVzOntcbiAgICAgICAgc2Nyb2xsbm9ybWFsOiBcInNjcm9sbC1ub3JtYWxcIixcbiAgICAgICAgc2Nyb2xsaW52aXNpYmxlOiBcInNjcm9sbC1pbnZpc2libGVcIixcbiAgICAgICAgc2Nyb2xsbG9uZzogXCJzY3JvbGwtbG9uZ1wiXG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHBhcmFtZXRlcnNIZWFkZXJDb25zdGFudHMgPSB7XG4gICAgdGl0cmU6IFwiVGl0cmVcIixcbiAgICBhdXRldXJzOiBcIkF1dGV1cnNcIixcbiAgICBkYXRlOiBcIkRhdGVcIixcbiAgICBkYXRlOiBcIkRhdGVcIixcbiAgICB1cmxzOiBcIkxpZW5BdXRldXJzXCIsXG4gICAgbGllbmZpY2hpZXJzb3VyY2U6IFwiTGllbkZpY2hpZXJTb3VyY2VcIlxufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHBhcnNlIGZyb20gXCJodG1sLXJlYWN0LXBhcnNlclwiO1xuaW1wb3J0IERXQ2hhcnQgZnJvbSBcIi4vRFdDaGFydFwiO1xuaW1wb3J0IHsgb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzIH0gZnJvbSBcIi4uL2dlbmVyYXRvci9jb25zdGFudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFZpelNlY3Rpb24ocHJvcHMpe1xuXG4gICAgbGV0IHZpelNlY3Rpb25PYmogPSAoXG4gICAgICAgIDxzZWN0aW9uIGlkPXtwcm9wcy5saXN0SUR9IGNsYXNzTmFtZT17cHJvcHMuY2xhc3NlZH0+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgc3RlcHMgJHtnZXRTdGVwQ29tbW9uQ2xhc3MocHJvcHMuc3RlcHMpfWB9PlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm9wcy5zdGVwcy5tYXAoKHN0ZXAsaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3N0ZXAgaXMgJywgc3RlcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNRdW90ZSA9IFN0cmluZyhzdGVwLnN0ZXBjbGFzc2VzKS5pbmNsdWRlcygnY2l0YXRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBxdW90ZU9iajtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzUXVvdGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1b3RlT2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OlN0cmluZyhzdGVwLnRleHQpLnNwbGl0KCcvJylbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjpTdHJpbmcoc3RlcC50ZXh0KS5zcGxpdCgnLycpWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlY3Rpb24ga2V5PXtpbmRleH0gY2xhc3NOYW1lPXtzdGVwLnN0ZXBjbGFzc2VzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNRdW90ZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmxvY2txdW90ZSBjbGFzc05hbWU9XCJzbWFsbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cGFyc2UocXVvdGVPYmoudGV4dCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiYXV0aG9yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtxdW90ZU9iai5hdXRob3J9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3ltYm9sXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Jsb2NrcXVvdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcoc3RlcC50ZXh0KS5zdGFydHNXaXRoKCc8JykgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlKHN0ZXAudGV4dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPntzdGVwLnRleHQgPyBwYXJzZShzdGVwLnRleHQpIDogXCJcIn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpelwiIGlkPVwidml6XCI+XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm9wcy5zdGVwcy5tYXAoKHN0ZXAsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzdGVwLnZpc3VhbCA9PT0gb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnZpc3VlbHR5cGVzLnBob3RvKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2Ake3Byb3BzLmxpc3RJRH1fJHtpbmRleH1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2Ake3Byb3BzLmxpc3RJRH1fJHtpbmRleH1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXtgYXNzZXRzL2ltZy82NzUvJHtzdGVwLmZpbGVuYW1lfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNyY3NldD17YGFzc2V0cy9pbWcvMjA0OC8ke3N0ZXAuZmlsZW5hbWV9IDIwNDh3LCBhc3NldHMvaW1nLzk5MC8ke3N0ZXAuZmlsZW5hbWV9IDk5MHcsIGFzc2V0cy9pbWcvNjc1LyR7c3RlcC5maWxlbmFtZX0gNjc1dywgYXNzZXRzL2ltZy8xMzUwLyR7c3RlcC5maWxlbmFtZX0gMTM1MHcsIGFzc2V0cy9pbWcvMTAwLyR7c3RlcC5maWxlbmFtZX0gMTAwdywgYXNzZXRzL2ltZy80OTUvJHtzdGVwLmZpbGVuYW1lfSA0OTV3LCBhc3NldHMvaW1nLzEwMjQvJHtzdGVwLmZpbGVuYW1lfSAxMDI0d2B9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNpemVzPVwiKG1heC13aWR0aDogMTAwcHgpIDEwMHB4LCAobWF4LXdpZHRoOiA0OTVweCkgNDk1cHgsIChtYXgtd2lkdGg6IDY3NXB4KSA2NzVweCwgKG1heC13aWR0aDogOTkwcHgpIDk5MHB4LCAobWF4LXdpZHRoOiAgMTAyNHB4KSAxMDI0cHgsIChtYXgtd2lkdGg6ICAxMzUwcHgpIDEzNTBweCwgKG1heC13aWR0aDogIDIwNDhweCkgMjA0OHB4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGxhenkgJHtzdGVwLnZpc3VlbGNsYXNzZXN9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHN0ZXAudmlzdWFsID09PSBvcHRpb25zRHJvcGRvd25Db25zdGFudHMudmlzdWVsdHlwZXMudmlkZW8pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2aWRlbyBhdXRvUGxheSBsb29wIG11dGVkIHBsYXlzSW5saW5lIGNsYXNzTmFtZT17YHZpZGVvICR7c3RlcC52aXN1ZWxjbGFzc2VzfWB9IHByZWxvYWQ9XCJtZXRhZGF0YVwiIGtleT17YCR7cHJvcHMubGlzdElEfV8ke2luZGV4fWB9IGlkPXtgJHtwcm9wcy5saXN0SUR9XyR7aW5kZXh9YH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz17YGFzc2V0cy92aWRlb3MvJHtzdGVwLmZpbGVuYW1lfWB9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZMOpbyBub24gc3VwcG9ydMOpZS4gUsOpLWVzc2F5ZXogc3VyIHVuIGF1dHJlIGFwcGFyZWlsIG91IGZ1cmV0ZXVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ZpZGVvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihzdGVwLnZpc3VhbCA9PT0gb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnZpc3VlbHR5cGVzLmlmcmFtZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e2Ake3Byb3BzLmxpc3RJRH1fJHtpbmRleH1gfSBpZD17YCR7cHJvcHMubGlzdElEfV8ke2luZGV4fWB9IGNsYXNzTmFtZT1cImlmcmFtZUNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERXQ2hhcnQgdGl0bGU9XCJNZXN1cmVzIGQnYXJzZW5pY1wiIHNyYz17YCR7c3RlcC5maWxlbmFtZX1gfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoc3RlcC52aXN1YWwgPT09IG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cy52aXN1ZWx0eXBlcy52aXN1YWxpc2F0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGtleT17YCR7cHJvcHMubGlzdElEfV8ke2luZGV4fWB9IGlkPXtgJHtwcm9wcy5saXN0SUR9XyR7aW5kZXh9YH0gY2xhc3NOYW1lPXtgaWZyYW1lQ29udGFpbmVyICR7c3RlcC52aXN1ZWxjbGFzc2VzfWB9PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgKTtcbiAgICBsZXQgY29udGFpbmVkT2JqID0gcHJvcHMuYmFja2dyb3VuZCA/XG4gICAgICAgIChcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tiYWNrZ3JvdW5kQ29sb3I6IGAke3Byb3BzLmJhY2tncm91bmR9YH19IGNsYXNzTmFtZT17XCJzZWN0aW9uQ29udGFpbmVyXCJ9PlxuICAgICAgICAgICAgICAgIHt2aXpTZWN0aW9uT2JqfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICAgICAgOlxuICAgICAgICAoXG4gICAgICAgICAgICB2aXpTZWN0aW9uT2JqXG4gICAgICAgIClcblxuICAgIHJldHVybiAoXG4gICAgICAgIGNvbnRhaW5lZE9ialxuICAgIClcbn1cblxuZnVuY3Rpb24gZ2V0U3RlcENvbW1vbkNsYXNzKHN0ZXBzKXtcbiAgICBsZXQgY3VyU3RlcENsYXNzZXMgPSBzdGVwcy5tYXAoKHN0ZXAsIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiBzdGVwLnN0ZXBjbGFzc2VzO1xuICAgIH0pO1xuICAgIGxldCBjdXJDb21tb25DbGFzcyA9IG5ldyBBcnJheShjdXJTdGVwQ2xhc3Nlcy5sZW5ndGgpO1xuICAgIGN1clN0ZXBDbGFzc2VzLmZvckVhY2goKHN0ZXBFbGVtLCBpZHgpID0+IHtcbiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShzdGVwRWxlbSkpe1xuICAgICAgICAgICAgc3RlcEVsZW0uZm9yRWFjaChlbGVtID0+IHtcbiAgICAgICAgICAgICAgICBmb3IoIGxldCBpID0gaWR4OyBpIDwgY3VyU3RlcENsYXNzZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICBpZihjdXJTdGVwQ2xhc3Nlc1tpXS5pbmNsdWRlcyhlbGVtKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJDb21tb25DbGFzc1tpXSA9IChlbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mKHN0ZXBFbGVtKSA9PT0gXCJzdHJpbmdcIil7XG4gICAgICAgICAgICBmb3IoIGxldCBpID0gaWR4OyBpIDwgY3VyU3RlcENsYXNzZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIGlmKGN1clN0ZXBDbGFzc2VzW2ldLmluY2x1ZGVzKHN0ZXBFbGVtKSl7XG4gICAgICAgICAgICAgICAgICAgIGN1ckNvbW1vbkNsYXNzW2ldID0gKHN0ZXBFbGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY3VyQ29tbW9uQ2xhc3MucmVkdWNlKGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gKGEgPT09IGIgJiYgYSAhPT0gXCJcIiAmJiBiICE9PSBcIlwiKSA/IGEgOiBcIlwiOyB9KTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBGdWxsUGFnZVNlY3Rpb24ocHJvcHMpe1xyXG5cclxuICAgIGxldCBmdWxscGFnZVNlY3Rpb25PYmogPSAoXHJcbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtgZnVsbC1wYWdlLXNlY3Rpb24gJHtwcm9wcy5jbGFzc2VzfWB9PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlSW1hZ2VcIj5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5maWxlbmFtZSA/IFxyXG4gICAgICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMudmlzdWFsID09PSBcIlBob3RvXCIgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YCR7cHJvcHMuaWR9YH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD17YCR7cHJvcHMuaWR9YH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9e2Bhc3NldHMvaW1nLzY3NS8ke3Byb3BzLmZpbGVuYW1lfWB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zcmNzZXQ9e2Bhc3NldHMvaW1nLzIwNDgvJHtwcm9wcy5maWxlbmFtZX0gMjA0OHcsIGFzc2V0cy9pbWcvOTkwLyR7cHJvcHMuZmlsZW5hbWV9IDk5MHcsIGFzc2V0cy9pbWcvNjc1LyR7cHJvcHMuZmlsZW5hbWV9IDY3NXcsIGFzc2V0cy9pbWcvMTM1MC8ke3Byb3BzLmZpbGVuYW1lfSAxMzUwdywgYXNzZXRzL2ltZy8xMDAvJHtwcm9wcy5maWxlbmFtZX0gMTAwdywgYXNzZXRzL2ltZy80OTUvJHtwcm9wcy5maWxlbmFtZX0gNDk1dywgYXNzZXRzL2ltZy8xMDI0LyR7cHJvcHMuZmlsZW5hbWV9IDEwMjR3YH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXNpemVzPVwiKG1heC13aWR0aDogMTAwcHgpIDEwMHB4LCAobWF4LXdpZHRoOiA0OTVweCkgNDk1cHgsIChtYXgtd2lkdGg6IDY3NXB4KSA2NzVweCwgKG1heC13aWR0aDogOTkwcHgpIDk5MHB4LCAobWF4LXdpZHRoOiAgMTAyNHB4KSAxMDI0cHgsIChtYXgtd2lkdGg6ICAxMzUwcHgpIDEzNTBweCwgKG1heC13aWR0aDogIDIwNDhweCkgMjA0OHB4XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BsYXp5ICR7cHJvcHMudmlzdWVsY2xhc3Nlc31gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnZpc3VhbCA9PT0gXCJWaWRlb1wiID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmlkZW8gYXV0b1BsYXkgbG9vcCBtdXRlZCBwbGF5c0lubGluZSBjbGFzc05hbWU9e2B2aWRlbyAke3Byb3BzLnZpc3VlbGNsYXNzZXN9YH0gcHJlbG9hZD1cIm1ldGFkYXRhXCIga2V5PXtgJHtwcm9wcy5pZH1gfSBpZD17YCR7cHJvcHMuaWR9YH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2Ugc3JjPXtgYXNzZXRzL3ZpZGVvcy8ke3Byb3BzLmZpbGVuYW1lfWB9Lz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlkw6lvIG5vbiBzdXBwb3J0w6llLiBSw6ktZXNzYXlleiBzdXIgdW4gYXV0cmUgYXBwYXJlaWwgb3UgZnVyZXRldXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92aWRlbz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICg8ZGl2PjwvZGl2PilcclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgKDxkaXY+PC9kaXY+KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLmZpbGVuYW1lID8gXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWx0ZXJcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcHRpb25ob2xkZXJcIj5cclxuICAgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9e2BjYXB0aW9uICR7cHJvcHMubWFpblRpdGxlLmNsYXNzfWB9Pntwcm9wcy5tYWluVGl0bGUudGV4dH08L2gyPlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnN1YlRpdGxlID8gXHJcbiAgICAgICAgICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPXtgY2FwdGlvbiAke3Byb3BzLnN1YlRpdGxlLmNsYXNzfWB9Pntwcm9wcy5zdWJUaXRsZS50ZXh0fTwvaDM+XHJcbiAgICAgICAgICAgICAgICAgICAgKTpcclxuICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvc2VjdGlvbj5cclxuICAgICk7XHJcbiAgICBsZXQgY29udGFpbmVkT2JqID0gcHJvcHMuYmFja2dyb3VuZCA/IFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e2JhY2tncm91bmRDb2xvcjogYCR7cHJvcHMuYmFja2dyb3VuZH1gfX0gY2xhc3NOYW1lPXtcInNlY3Rpb25Db250YWluZXJcIn0+XHJcbiAgICAgICAgICAgICAgICB7ZnVsbHBhZ2VTZWN0aW9uT2JqfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICAgICAgOlxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgZnVsbHBhZ2VTZWN0aW9uT2JqXHJcbiAgICAgICAgKVxyXG5cclxuICAgIHJldHVybiBjb250YWluZWRPYmo7XHJcblxyXG59IiwiXG5pbXBvcnQgeyBzYXZlQXMgfSBmcm9tICdmaWxlLXNhdmVyJztcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCB7IGNvbnRlbnRIZWFkZXJDb25zdGFudHMsIG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cywgcGFyYW1ldGVyc0hlYWRlckNvbnN0YW50cyB9IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RydWN0dXJlKGNvbnRlbnREYXRhLCBwYXJhbXNEYXRhKXtcblxuICAgIGxldCBzdHJ1Y3R1cmVEYXRhID0ge307IC8vIFdob2xlIHNjcm9sbHkgc3RydWN0dXJlXG4gICAgbGV0IHZpelNlY3Rpb25JRHMgPSBbXTsgLy8gTGlzdCBvZiBzZWN0aW9uSURzXG5cbiAgICBsZXQgb3B0aW9ucyA9IGdldE9wdGlvbnMocGFyYW1zRGF0YSk7XG5cbiAgICBjb25zb2xlLmxvZygnY29udGVudCBEYXRhJywgY29udGVudERhdGEpO1xuICAgIGNvbnRlbnREYXRhLm1hcCgocm93RGF0YSxpbmRleCkgPT4ge1xuXG4gICAgICAgIGlmKHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zZWN0aW9uXSA9PT0gb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnNlY3Rpb250eXBlcy5pbnRyb3RpdHJlKXtcbiAgICAgICAgICAgIGxldCBjbGFzc2VzID0gcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnN0ZXBjbGFzc2VzXTtcbiAgICAgICAgICAgIGxldCBjdXJBbW9yY2UgPSByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMudGV4dGVdO1xuICAgICAgICAgICAgbGV0IHNlY3Rpb25CYWNrZ3JvdW5kID0gcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnN0eWxlZm9uZF07XG4gICAgICAgICAgICBzdHJ1Y3R1cmVEYXRhW3Jvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zZWN0aW9uSURdXSA9IHtcbiAgICAgICAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgICAgICAgIHNlY3Rpb25UeXBlOiBvcHRpb25zRHJvcGRvd25Db25zdGFudHMuc2VjdGlvbnR5cGVzLmludHJvdGl0cmUsXG4gICAgICAgICAgICAgICAgb3B0aW9uRGF0YTogb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBhbW9yY2U6IGN1ckFtb3JjZSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBzZWN0aW9uQmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBjbGFzc2VzOiBwYXJzZUNsYXNzZXMoY2xhc3NlcyksXG4gICAgICAgICAgICAgICAgZ2FtZWlkOiByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuZ2FtZWlkXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zZWN0aW9uXSA9PT0gb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnNlY3Rpb250eXBlcy50ZXh0ZWNsYXNzaXF1ZSl7XG4gICAgICAgICAgICBsZXQgdGV4dHMgPSByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMudGV4dGVdO1xuICAgICAgICAgICAgbGV0IGNsYXNzZXMgPSByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc3RlcGNsYXNzZXNdO1xuICAgICAgICAgICAgbGV0IHNlY3Rpb25CYWNrZ3JvdW5kID0gcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnN0eWxlZm9uZF07XG4gICAgICAgICAgICBzdHJ1Y3R1cmVEYXRhW3Jvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zZWN0aW9uSURdXSA9IHtcbiAgICAgICAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgICAgICAgIHNlY3Rpb25UeXBlOiBvcHRpb25zRHJvcGRvd25Db25zdGFudHMuc2VjdGlvbnR5cGVzLnRleHRlY2xhc3NpcXVlLFxuICAgICAgICAgICAgICAgIHRleHRzOiB0ZXh0cyxcbiAgICAgICAgICAgICAgICB2aXN1YWw6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy52aXN1ZWxdLFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMubm9tZmljaGllcnNvdXJjZV0sXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogc2VjdGlvbkJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgY2xhc3NlczogcGFyc2VDbGFzc2VzKGNsYXNzZXMpLFxuICAgICAgICAgICAgICAgIHZpc3VlbGNsYXNzZXM6IHBhcnNlQ2xhc3Nlcyhyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMudmlzdWVsY2xhc3Nlc10pLFxuICAgICAgICAgICAgICAgIGdhbWVpZDogcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLmdhbWVpZF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc2VjdGlvbl0gPT09IG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cy5zZWN0aW9udHlwZXMucGxlaW5lcGFnZXRpdHJlKXtcbiAgICAgICAgICAgIGxldCB0aXRsZU9iaiA9IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy50ZXh0ZV07XG4gICAgICAgICAgICBpZiAoaXNKc29uKHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy50ZXh0ZV0pKXtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dE9iaiA9IEpTT04ucGFyc2Uocm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnRleHRlXSk7XG4gICAgICAgICAgICAgICAgdGl0bGVPYmogPSB0ZXh0T2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RydWN0dXJlRGF0YVtyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc2VjdGlvbklEXV0gPSB7XG4gICAgICAgICAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgICAgICAgICBzZWN0aW9uVHlwZTogb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnNlY3Rpb250eXBlcy5wbGVpbmVwYWdldGl0cmUsXG4gICAgICAgICAgICAgICAgdGV4dHM6IGlzSnNvbihyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMudGV4dGVdKSA/IHRpdGxlT2JqXG4gICAgICAgICAgICAgICAgOntcbiAgICAgICAgICAgICAgICAgICAgbWFpblRpdGxlOntjbGFzczogXCJcIiwgdGV4dDogdGl0bGVPYmp9LFxuICAgICAgICAgICAgICAgICAgICBzdWJUaXRsZTogbnVsbFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdmlzdWFsOiByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMudmlzdWVsXSxcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLm5vbWZpY2hpZXJzb3VyY2VdLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zdHlsZWZvbmRdLFxuICAgICAgICAgICAgICAgIGNsYXNzZXM6IHBhcnNlQ2xhc3Nlcyhyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc3RlcGNsYXNzZXNdKSxcbiAgICAgICAgICAgICAgICB2aXN1ZWxjbGFzc2VzOiBwYXJzZUNsYXNzZXMocm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnZpc3VlbGNsYXNzZXNdKSxcbiAgICAgICAgICAgICAgICBnYW1laWQ6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5nYW1laWRdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYocm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnNlY3Rpb25dID09PSBvcHRpb25zRHJvcGRvd25Db25zdGFudHMuc2VjdGlvbnR5cGVzLnZpenNlY3Rpb24pe1xuXG4gICAgICAgICAgICBsZXQgY3VyRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dHM6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5hdHRyaWJ1dHNdLFxuICAgICAgICAgICAgICAgIHNjcm9sbFR5cGU6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zb3Vzc2VjdGlvbl0sXG4gICAgICAgICAgICAgICAgdGV4dDogcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnRleHRlXSxcbiAgICAgICAgICAgICAgICB2aXN1YWw6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy52aXN1ZWxdLFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiByb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMubm9tZmljaGllcnNvdXJjZV0sXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogcm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnN0eWxlZm9uZF0sXG4gICAgICAgICAgICAgICAgdmlzdWVsY2xhc3NlczogcGFyc2VDbGFzc2VzKHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy52aXN1ZWxjbGFzc2VzXSksXG4gICAgICAgICAgICAgICAgc3RlcGNsYXNzZXM6IHBhcnNlQ2xhc3Nlcyhyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc3RlcGNsYXNzZXNdKSxcbiAgICAgICAgICAgICAgICBnYW1laWQ6IHJvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5nYW1laWRdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYoc3RydWN0dXJlRGF0YS5oYXNPd25Qcm9wZXJ0eShyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc2VjdGlvbklEXSkpe1xuICAgICAgICAgICAgICAgIC8vIEFkZCBzdGVwIHRvIGV4aXN0aW5nXG4gICAgICAgICAgICAgICAgbGV0IGN1clZpelNlY3Rpb24gPSBzdHJ1Y3R1cmVEYXRhW3Jvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zZWN0aW9uSURdXTtcbiAgICAgICAgICAgICAgICBjdXJWaXpTZWN0aW9uLnB1c2goY3VyRGF0YSk7XG4gICAgICAgICAgICAgICAgc3RydWN0dXJlRGF0YVtyb3dEYXRhW2NvbnRlbnRIZWFkZXJDb25zdGFudHMuc2VjdGlvbklEXV0gPSBjdXJWaXpTZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBzdHJ1Y3R1cmVEYXRhW3Jvd0RhdGFbY29udGVudEhlYWRlckNvbnN0YW50cy5zZWN0aW9uSURdXSA9IFtjdXJEYXRhXTtcbiAgICAgICAgICAgICAgICB2aXpTZWN0aW9uSURzLnB1c2gocm93RGF0YVtjb250ZW50SGVhZGVyQ29uc3RhbnRzLnNlY3Rpb25JRF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgdml6U2VjdGlvbklEcy5tYXAoKGtleSkgPT4ge1xuICAgICAgICBsZXQgY3VyU2VjdGlvbiA9IHN0cnVjdHVyZURhdGFba2V5XTtcbiAgICAgICAgbGV0IHNlY3Rpb25BdHRyID0gY3VyU2VjdGlvblswXS5hdHRyaWJ1dHMgPT09IG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cy5zZWN0aW9uYXR0cmlidXRlcy5jZW50cmUgPyBcIiBmdWxsLXBhZ2VcIiA6IFwiXCI7XG4gICAgICAgIGxldCBzZWN0aW9uQmFja2dyb3VuZCA9IGN1clNlY3Rpb25bMF0uYmFja2dyb3VuZDtcbiAgICAgICAgc3RydWN0dXJlRGF0YVtrZXldID0ge1xuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBzZWN0aW9uVHlwZTogb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnNlY3Rpb250eXBlcy52aXpzZWN0aW9uLFxuICAgICAgICAgICAgbGlzdElEOiBrZXksXG4gICAgICAgICAgICBzdGVwczogY3VyU2VjdGlvbixcbiAgICAgICAgICAgIGNsYXNzZWQ6IGB2aXotc2VjdGlvbiR7c2VjdGlvbkF0dHJ9YCxcbiAgICAgICAgICAgIG1lZGlhSW5mbzogMCxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHNlY3Rpb25CYWNrZ3JvdW5kXG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhzdHJ1Y3R1cmVEYXRhKTtcbn1cblxuLyoqXG4gKiBUYWtlIGFydGljbGUgc3RydWN0dXJlIGFzIENTViBhbmQgdHJhbnNmb3JtIGl0IGFzIGNhbGxiYWNrQXJyYXlcbiAqIEBwYXJhbSAge09iamVjdH0gY29udGVudERhdGEgYXJ0aWNsZSBzdHJ1Y3R1cmVcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyBhcnRpY2xlIG9wdGlvbnNcbiAqIEByZXR1cm4ge0FycmF5fSBTY3JvbGxlciBjYWxsYmFjayBhcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVDYWxsYmFja3MoY29udGVudERhdGEsIHBhcmFtc0RhdGEpe1xuXG4gICAgbGV0IGZ1bGxTdHJ1Y3R1cmUgPSBnZXRTdHJ1Y3R1cmUoY29udGVudERhdGEsIHBhcmFtc0RhdGEpO1xuICAgIGxldCBjYWxsYmFja3NBcnJheSA9IFtdO1xuICAgIGZ1bGxTdHJ1Y3R1cmUubWFwKGNhbGxiYWNrID0+IHtcbiAgICAgICAgaWYoY2FsbGJhY2suc2VjdGlvblR5cGUgPT09IFwidml6LXNlY3Rpb25cIil7XG4gICAgICAgICAgICBsZXQgY3VyU3RlcHMgPSBbXTtcbiAgICAgICAgICAgIGNhbGxiYWNrLnN0ZXBzLm1hcCgoc3RlcCxpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjdXJDb21tYW5kID0gKEVOVl9DT05GSUcuZG93bmxvYWRTdHJ1YyAmJiBFTlZfQ09ORklHLmF1dG9yZW5kZXIpID8gKCgpPT57fSkgOiBcIlwiO1xuICAgICAgICAgICAgICAgIGlmKHN0ZXAudmlzdWFsICE9PSBcIlwiKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1ck51bWJlckFycmF5ID0gQXJyYXkoY2FsbGJhY2suc3RlcHMubGVuZ3RoKS5maWxsKG51bGwpLm1hcCgoXywgaSkgPT4gaSkuZmlsdGVyKGQgPT4gZCAhPT0gaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3BhY2l0eVNlbGVjdG9yID0gY3VyTnVtYmVyQXJyYXkubWFwKGluZCA9PiBgIyR7Y2FsbGJhY2sua2V5fV8ke2luZH1gKS5qb2luKCcsJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmKEVOVl9DT05GSUcuZG93bmxvYWRTdHJ1YyAmJiBFTlZfQ09ORklHLmF1dG9yZW5kZXIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ29tbWFuZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoYCMke2NhbGxiYWNrLmtleX1fJHtpbmRleH1gKS50cmFuc2l0aW9uKCkuc3R5bGUoJ29wYWNpdHknLCAxKS5zdHlsZSgnZGlzcGxheScsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG9wYWNpdHlTZWxlY3RvciAhPT0gXCJcIil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdEFsbChgJHtvcGFjaXR5U2VsZWN0b3J9YCkudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywgMCkuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ29tbWFuZCA9IGBkMy5zZWxlY3QoJyMke2NhbGxiYWNrLmtleX1fJHtpbmRleH0nKS50cmFuc2l0aW9uKCkuc3R5bGUoJ29wYWNpdHknLCAxKS5zdHlsZSgnZGlzcGxheScsIG51bGwpOyR7b3BhY2l0eVNlbGVjdG9yICE9PSBcIlwiID8gYGQzLnNlbGVjdEFsbCgnJHtvcGFjaXR5U2VsZWN0b3J9JykudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywgMCkuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO2AgOiBcIlwifWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihTdHJpbmcoc3RlcC5maWxlbmFtZSkuc3RhcnRzV2l0aChcIlRBR0lEXCIpKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1clRhZ0lEID0gU3RyaW5nKHN0ZXAuZmlsZW5hbWUpLnNwbGl0KCc9JylbMV07XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJUYWdJRF9pbmRleCA9IHBhcnNlSW50KGN1clRhZ0lELnNwbGl0KFwiX1wiKVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJOdW1iZXJBcnJheSA9IEFycmF5KGNhbGxiYWNrLnN0ZXBzLmxlbmd0aCkuZmlsbChudWxsKS5tYXAoKF8sIGkpID0+IGkpLmZpbHRlcihkID0+IGQgIT09IGN1clRhZ0lEX2luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9wYWNpdHlTZWxlY3RvciA9IGN1ck51bWJlckFycmF5Lm1hcChpbmQgPT4gYCMke2NhbGxiYWNrLmtleX1fJHtpbmR9YCkuam9pbignLCcpO1xuICAgICAgICAgICAgICAgICAgICBpZihFTlZfQ09ORklHLmRvd25sb2FkU3RydWMgJiYgRU5WX0NPTkZJRy5hdXRvcmVuZGVyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNvbW1hbmQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChgIyR7Y3VyVGFnSUR9YCkudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywgMSkuc3R5bGUoJ2Rpc3BsYXknLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYob3BhY2l0eVNlbGVjdG9yICE9PSBcIlwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdEFsbChgJHtvcGFjaXR5U2VsZWN0b3J9YCkudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywgMCkuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ29tbWFuZCA9IGBkMy5zZWxlY3QoJyMke2N1clRhZ0lEfScpLnRyYW5zaXRpb24oKS5zdHlsZSgnb3BhY2l0eScsIDEpLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7JHtvcGFjaXR5U2VsZWN0b3IgIT09IFwiXCIgPyBgZDMuc2VsZWN0QWxsKCcke29wYWNpdHlTZWxlY3Rvcn0nKS50cmFuc2l0aW9uKCkuc3R5bGUoJ29wYWNpdHknLCAwKS5zdHlsZSgnZGlzcGxheScsICdub25lJyk7YCA6IFwiXCJ9YDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKEVOVl9DT05GSUcuZG93bmxvYWRTdHJ1YyAmJiBFTlZfQ09ORklHLmF1dG9yZW5kZXIpe1xuICAgICAgICAgICAgICAgICAgICAgIGN1clN0ZXBzLnB1c2goY3VyQ29tbWFuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGN1clN0ZXBzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBgKCkgPT4geyR7Y3VyQ29tbWFuZH19YFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjYWxsYmFja3NBcnJheS5wdXNoKGN1clN0ZXBzKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYoRU5WX0NPTkZJRy5kb3dubG9hZFN0cnVjICYmIEVOVl9DT05GSUcuYXV0b3JlbmRlcil7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ0dPVCBDQUxMQkFDS1MgQVJSQVk6ICcsIGNhbGxiYWNrc0FycmF5KTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrc0FycmF5O1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgICBjb25zb2xlLmxvZygnU2F2aW5nIGNhbGxiYWNrcyB0byBmaWxlLi4uJyk7XG4gICAgICAgIGNvbnN0IHRleHQgPSBgaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xcbmV4cG9ydCBjb25zdCBjYWxsYmFja3MgPSAke0pTT04uc3RyaW5naWZ5KGNhbGxiYWNrc0FycmF5LCBudWxsLCAyKX1gO1xuICAgICAgICBsZXQgYmxvYiA9IG5ldyBCbG9iKFt0ZXh0LnJlcGxhY2VBbGwoJ1wiJywgJycpXSwge3R5cGU6IFwidGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04XCJ9KTtcbiAgICAgICAgc2F2ZUFzKGJsb2IsIFwiY2FsbGJhY2tzLmpzXCIpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gaXNKc29uKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIEpTT04ucGFyc2Uoc3RyKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ2xhc3NlcyhzdHIpe1xuICAgIHJldHVybiBBcnJheS5mcm9tKHN0ci5zcGxpdCgnOycpKS5qb2luKCcgJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcHRpb25zKHBhcmFtc0RhdGEpe1xuXG4gIHJldHVybiB7XG4gICAgdGl0bGU6IHBhcmFtc0RhdGFbMF1bcGFyYW1ldGVyc0hlYWRlckNvbnN0YW50cy50aXRyZV0sXG4gICAgYXV0aG9yczogcGFyYW1zRGF0YVswXVtwYXJhbWV0ZXJzSGVhZGVyQ29uc3RhbnRzLmF1dGV1cnNdLFxuICAgIHVybHM6IHBhcmFtc0RhdGFbMF1bcGFyYW1ldGVyc0hlYWRlckNvbnN0YW50cy51cmxzXSxcbiAgICBkYXRlOiBwYXJhbXNEYXRhWzBdW3BhcmFtZXRlcnNIZWFkZXJDb25zdGFudHMuZGF0ZV1cbiAgfTtcbn1cbiIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmV4cG9ydCBjb25zdCBjYWxsYmFja3MgPSBbXG4gIFtcbiAgICAoKSA9PiB7ZDMuc2VsZWN0KCcjdml6U2VjdGlvbjFfMF8wJykudHJhbnNpdGlvbigpLnN0eWxlKCdvcGFjaXR5JywgMSkuc3R5bGUoJ2Rpc3BsYXknLCBudWxsKTt9XG4gIF1cbl0iLCJleHBvcnQgZnVuY3Rpb24gc2hvdWxkQnJlYWsoYnIpIHtcclxuICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCA8IGJyXHJcbiAgfVxyXG4gIFxyXG4gIGV4cG9ydCBmdW5jdGlvbiBpc1hTKCkge1xyXG4gICAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGggPCA0MDBcclxuICAgIH1cclxuICBcclxuICBleHBvcnQgZnVuY3Rpb24gaXNQb3J0cmFpdCAoKSB7XHJcbiAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0IC8gd2luZG93LmlubmVyV2lkdGggPiAxXHJcbiAgfVxyXG4gIFxyXG4gIGV4cG9ydCBmdW5jdGlvbiBpc1NtKCkge1xyXG4gICAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGggPD0gNTc2XHJcbiAgICB9XHJcbiAgXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGlzTWQoKSB7XHJcbiAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCA+IDU3NiAmJiB3aW5kb3cuaW5uZXJXaWR0aCA8PSA3NjhcclxuICAgIH1cclxuICBcclxuICBleHBvcnQgZnVuY3Rpb24gaXNMZygpIHtcclxuICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCA+IDc2OCAmJiB3aW5kb3cuaW5uZXJXaWR0aCA8PSA5OTJcclxuICB9XHJcbiAgXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGlzWExnKCkge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoID4gOTkyXHJcbiAgfSIsImltcG9ydCB7IGNvbnN0YW50IH0gZnJvbSBcImxvZGFzaFwiO1xyXG5pbXBvcnQgbWFwYm94Z2wgZnJvbSBcIm1hcGJveC1nbFwiO1xyXG5pbXBvcnQgKiBhcyBzY3JlZW4gZnJvbSBcIi4vc2NyZWVuLmpzXCI7XHJcblxyXG5jb25zdCBjb25zdGFudHMgPSB7XHJcbiAgdG9rZW46XHJcbiAgICBcInBrLmV5SjFJam9pYkdWa1pYWnZhWElpTENKaElqb2lZMnAyYlc4MWRIVTJNV1YxY1RSaGNYSXphWFpxTUdZeGNpSjkuV3JJRjhvNjlhUl9Uc3RERnU2UXlhZ1wiLFxyXG4gIG1hcEJvdW5kczoge1xyXG4gICAgbWF4OiBbLTE2NSwgMzAuNzI4MzMwLCAtMjUuMjM2MzYsIDgyLjIyOTQzNF0sXHJcbiAgfSxcclxuICBjb2xvcnM6IFtcclxuICAgIFwiI0Y0Q0JDNlwiLFxyXG4gICAgXCIjRjRBMzlBXCIsXHJcbiAgICBcIiNFRTZBNUVcIixcclxuICAgIFwiI0NFMzcyN1wiLFxyXG4gICAgXCIjQTIyODIzXCIsXHJcbiAgICBcIiM3NTFBMUFcIixcclxuICAgIFwiIzQxMDAwMFwiLFxyXG4gIF0sXHJcbiAgY2x1c3Rlck1heFpvb206IDExLFxyXG4gIGNsdXN0ZXJSYWRpdXM6IDMwLFxyXG4gIGNsdXN0ZXJNaW5Qb2ludHM6IDVcclxufTtcclxuXHJcbm1hcGJveGdsLmFjY2Vzc1Rva2VuID0gY29uc3RhbnRzLnRva2VuO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1hcCB7XHJcbiAgY29uc3RydWN0b3IoZGl2LCBjbGFzc05hbWUsIGRhdGFTb3VyY2VBcnJheSwgc3R5bGVVcmwsIGluaXRDb29yZHMsIGRpc2FibGVDb250cm9scz10cnVlLCB3aXRoSGFuZGxlcnM9ZmFsc2UsIG1heEJvdW5kcyA9IG51bGwpIHtcclxuXHJcbiAgICB0aGlzLmRhdGFTb3VyY2VPYmplY3RzID0gZGF0YVNvdXJjZUFycmF5O1xyXG4gICAgdGhpcy5jb25zdGFudHMgPSBjb25zdGFudHM7XHJcbiAgICB0aGlzLm1hcCA9IG5ldyBtYXBib3hnbC5NYXAoe1xyXG4gICAgICBjb250YWluZXI6IGNsYXNzTmFtZSxcclxuICAgICAgc3R5bGU6IHN0eWxlVXJsLFxyXG4gICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IHRydWUsXHJcbiAgICAgIGNlbnRlcjogaW5pdENvb3Jkcy5jZW50ZXIsXHJcbiAgICAgIHpvb206IGluaXRDb29yZHMuem9vbVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLm1heEJvdW5kcyA9IGluaXRDb29yZHM7XHJcbiAgICB0aGlzLmJvdW5kc0xpc3QgPSB0aGlzLmRhdGFTb3VyY2VPYmplY3RzLm1hcChkYXRhU291cmNlID0+IGRhdGFTb3VyY2VbJ2Nvb3JkcyddKTtcclxuICAgIHRoaXMuZXh0cmFCb3VuZHMgPSB0aGlzLmRhdGFTb3VyY2VPYmplY3RzLm1hcChkYXRhU291cmNlID0+IGRhdGFTb3VyY2VbJ2V4dHJhQ29vcmRzJ10pO1xyXG4gICAgaWYoZGlzYWJsZUNvbnRyb2xzKXtcclxuICAgICAgdGhpcy5tYXAuc2Nyb2xsWm9vbS5kaXNhYmxlKCk7XHJcbiAgICAgIHRoaXMubWFwLmRyYWdQYW4uZGlzYWJsZSgpO1xyXG4gICAgICB0aGlzLm1hcC5kcmFnUm90YXRlLmRpc2FibGUoKTtcclxuICAgICAgdGhpcy5tYXAuYm94Wm9vbS5kaXNhYmxlKCk7XHJcbiAgICAgIHRoaXMubWFwLmRvdWJsZUNsaWNrWm9vbS5kaXNhYmxlKCk7XHJcbiAgICB9XHJcbiAgICBpZih3aXRoSGFuZGxlcnMpe1xyXG4gICAgICB0aGlzLnNldHVwSGFuZGxlcnMoKTtcclxuICAgIH1cclxuICAgIHRoaXMuZGF0YUxpc3QgPSB0aGlzLmRhdGFTb3VyY2VPYmplY3RzLm1hcChkYXRhU291cmNlID0+IGRhdGFTb3VyY2VbJ2RhdGEnXSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVCb3VuZHMoXHJcbiAgICBib3VuZHMgPSB0aGlzLm1heEJvdW5kcyxcclxuICAgIHBhZGRpbmcgPSBzY3JlZW4uaXNYUygpID8gNSA6IHNjcmVlbi5pc1NtKCkgPyAxNSA6IDIwLFxyXG4gICAgZHVyYXRpb24gPSAxMDBcclxuICApIHtcclxuICAgIHRoaXMubWFwID0gdGhpcy5tYXAuZml0Qm91bmRzKGJvdW5kcywge1xyXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUNvb3Jkc0FuZFpvb20oZGF0YVBhaXIpe1xyXG4gICAgdGhpcy5tYXAuZmx5VG8oe1xyXG4gICAgICBjZW50ZXI6IGRhdGFQYWlyLmNlbnRlcixcclxuICAgICAgem9vbTogZGF0YVBhaXIuem9vbSxcclxuICAgICAgc3BlZWQ6IDAuNyxcclxuICAgICAgY3VydmU6IDEsXHJcbiAgICAgIGVhc2luZyh0KXtcclxuICAgICAgICByZXR1cm4gdFxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdmlld0JvdW5kT2JqKG9iamluZGV4KXtcclxuICAgIHRoaXMudXBkYXRlQ29vcmRzQW5kWm9vbSh0aGlzLmJvdW5kc0xpc3Rbb2JqaW5kZXhdKTtcclxuICB9XHJcblxyXG4gIHZpZXdFeHRyYUJvdW5kT2JqKG9iamluZGV4LCBrZXlOYW1lLCBkdXJhdGlvbil7XHJcbiAgICBsZXQgZXh0cmFCb3VuZHMgPSB0aGlzLmV4dHJhQm91bmRzW29iamluZGV4XTtcclxuICAgIHRoaXMudXBkYXRlQ29vcmRzQW5kWm9vbShleHRyYUJvdW5kc1trZXlOYW1lXSk7XHJcbiAgfVxyXG5cclxuICB2aWV3SW5pdEJvdW5kcyhkdXJhdGlvbil7XHJcbiAgICB0aGlzLnVwZGF0ZUNvb3Jkc0FuZFpvb20odGhpcy5tYXhCb3VuZHMpO1xyXG4gIH1cclxuICBzaG93U291cmNlWEl0ZW1ZKHNvdXJjZUluZGV4LCBpdGVtSW5kZXgpIHtcclxuICAgIHRoaXMudXBkYXRlQ29vcmRzQW5kWm9vbSh0aGlzLmRhdGFMaXN0W3NvdXJjZUluZGV4XVtpdGVtSW5kZXhdKVxyXG4gIH1cclxuXHJcbiAgaW5pdE1hcFNvdXJjZXNBbmRMYXllcnMoKSB7XHJcbiAgICBpZiAodGhpcy5pbml0aWFsaXNlZCkgcmV0dXJuO1xyXG4gICAgdGhpcy5pbml0aWFsaXNlZCA9IHRydWU7XHJcbiAgICBcclxuICAgIHRoaXMuZGF0YVNvdXJjZU9iamVjdHMubWFwKGRhdGFTb3VyY2UgPT4ge1xyXG4gICAgICB0aGlzLm1hcC5hZGRTb3VyY2UoZGF0YVNvdXJjZVsnc291cmNlTmFtZSddLCB7XHJcbiAgICAgICAgdHlwZTogZGF0YVNvdXJjZVsnc291cmNlVHlwZSddLFxyXG4gICAgICAgIGRhdGE6IGRhdGFTb3VyY2VbJ3NvdXJjZURhdGEnXVxyXG4gICAgICB9KTtcclxuICAgICAgaWYoZGF0YVNvdXJjZVsnbGF5ZXJUeXBlJ10gPT09ICdmaWxsJyl7XHJcbiAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIoe1xyXG4gICAgICAgICAgaWQ6IGRhdGFTb3VyY2VbJ3NvdXJjZU5hbWUnXSxcclxuICAgICAgICAgIHR5cGU6IGRhdGFTb3VyY2VbJ2xheWVyVHlwZSddLFxyXG4gICAgICAgICAgc291cmNlOiBkYXRhU291cmNlWydzb3VyY2VOYW1lJ10sXHJcbiAgICAgICAgICBwYWludDoge1xyXG4gICAgICAgICAgICAnZmlsbC1jb2xvcic6IGRhdGFTb3VyY2VbJ2NvbG9yJ10sXHJcbiAgICAgICAgICAgICdmaWxsLW9wYWNpdHknOiBkYXRhU291cmNlWydvcGFjaXR5J11cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihkYXRhU291cmNlWydsYXllclR5cGUnXSA9PT0gJ2NpcmNsZScpe1xyXG4gICAgICAgIHRoaXMubWFwLmFkZExheWVyKHtcclxuICAgICAgICAgIGlkOiBkYXRhU291cmNlWydzb3VyY2VOYW1lJ10sXHJcbiAgICAgICAgICB0eXBlOiBkYXRhU291cmNlWydsYXllclR5cGUnXSxcclxuICAgICAgICAgIHNvdXJjZTogZGF0YVNvdXJjZVsnc291cmNlTmFtZSddLFxyXG4gICAgICAgICAgcGFpbnQ6IHtcclxuICAgICAgICAgICAgJ2NpcmNsZS1jb2xvcic6IFsnbWF0Y2gnLCBbXCJnZXRcIiwgXCJzdGF0dXRcIl0sICdSZWNoZXJjaGVzIGVmZmVjdHXDqWVzIG91IGVuIGNvdXJzJywgJyNmZjU2MWMnLCAnUGhhc2UgcHLDqWxpbWluYWlyZScsICcjZmZjNzM0JywgJyNiN2I3YjcnXSxcclxuICAgICAgICAgICAgJ2NpcmNsZS1yYWRpdXMnOiA1XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgY2hhbmdlTGF5ZXJQYWludChpZCwgcHJvcGVydHksIHZhbHVlKXtcclxuICAgIHRoaXMubWFwLnNldFBhaW50UHJvcGVydHkoaWQsIHByb3BlcnR5LCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBzZXR1cEhhbmRsZXJzKCl7XHJcbiAgICBcclxuICAgIHRoaXMubWFwLm9uKFwibW91c2VvdmVyXCIsIFwicGVuc2lvbm5hdHNTb3VyY2VcIiwgKGUpID0+IHtcclxuICAgICAgdGhpcy5tYXAuZ2V0Q2FudmFzKCkuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XHJcbiAgICAgIHRoaXMuZHJhd1BvcHVwKGUpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLm1hcC5vbihcIm1vdXNlb3V0XCIsIFwicGVuc2lvbm5hdHNTb3VyY2VcIiwgKGUpID0+IHtcclxuICAgICAgdGhpcy5tYXAuZ2V0Q2FudmFzKCkuc3R5bGUuY3Vyc29yID0gXCJkZWZhdWx0XCI7XHJcbiAgICAgIHRoaXMuY2xvc2VQb3B1cCgpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLm1hcC5vbihcImNsaWNrXCIsIFwicGVuc2lvbm5hdHNTb3VyY2VcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLm1hcC5nZXRDYW52YXMoKS5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcclxuICAgICAgdGhpcy5kcmF3UG9wdXAoZSk7XHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuICB9XHJcblxyXG4gIGRyYXdQb3B1cChlKXtcclxuICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gZS5mZWF0dXJlc1swXS5nZW9tZXRyeS5jb29yZGluYXRlcy5zbGljZSgpO1xyXG4gICAgY29uc3QgcHJvcGVydGllcyA9IGUuZmVhdHVyZXNbMF0ucHJvcGVydGllcztcclxuICAgIGxldCBbb3BlbmRheXN0ciwgb3Blbm1vbnRoc3RyLCBvcGVueWVhcnN0cl0gPSBwcm9wZXJ0aWVzWydvdXZlcnR1cmUnXS5zcGxpdCgnLycpO1xyXG4gICAgbGV0IFtmZXJtZGF5c3RyLCBmZXJtbW9udGhzdHIsIGZlcm15ZWFyc3RyXSA9IHByb3BlcnRpZXNbJ2Zlcm1ldHVyZSddLnNwbGl0KCcvJyk7XHJcbiAgICBsZXQgW2RhdGVfb3V2ZXJ0dXJlLGRhdGVfZmVybWV0dXJlXSA9IFtcclxuICAgICAgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoXCJmci1DQVwiLCB7ZGF0ZVN0eWxlOlwibG9uZ1wifSkuZm9ybWF0KG5ldyBEYXRlKERhdGUuVVRDKG9wZW55ZWFyc3RyLCBvcGVubW9udGhzdHIsIG9wZW5kYXlzdHIpKSksXHJcbiAgICAgIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZnItQ0FcIiwge2RhdGVTdHlsZTpcImxvbmdcIn0pLmZvcm1hdChuZXcgRGF0ZShEYXRlLlVUQyhmZXJteWVhcnN0ciwgZmVybW1vbnRoc3RyLCBmZXJtZGF5c3RyKSkpXHJcbiAgICBdO1xyXG4gICAgbGV0IGh0bWxfcG9wdXBfY29udGVudCA9IGBcclxuICAgICAgPGgzPiR7cHJvcGVydGllc1snbmFtZSddfTwvaDM+XHJcbiAgICAgIDxoND4ke3Byb3BlcnRpZXNbJ3ZpbGxlJ119LCAke3Byb3BlcnRpZXNbJ3Byb3ZpbmNlJ119PC9oND5cclxuICAgICAgPHA+JHtkYXRlX291dmVydHVyZX0gLSAke2RhdGVfZmVybWV0dXJlfTwvcD5cclxuICAgICAgPHA+JHtwcm9wZXJ0aWVzWydzdGF0dXQnXX08L3A+XHJcbiAgICBgO1xyXG4gICAgd2hpbGUgKE1hdGguYWJzKGUubG5nTGF0LmxuZyAtIGNvb3JkaW5hdGVzWzBdKSA+IDE4MCkge1xyXG4gICAgICBjb29yZGluYXRlc1swXSArPSBlLmxuZ0xhdC5sbmcgPiBjb29yZGluYXRlc1swXSA/IDM2MCA6IC0zNjA7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wb3B1cCA9IG5ldyBtYXBib3hnbC5Qb3B1cCgpXHJcbiAgICAgIC5zZXRMbmdMYXQoY29vcmRpbmF0ZXMpXHJcbiAgICAgIC5zZXRIVE1MKGh0bWxfcG9wdXBfY29udGVudClcclxuICAgICAgLmFkZFRvKHRoaXMubWFwKTtcclxuICB9XHJcblxyXG4gIGNsb3NlUG9wdXAoKSB7XHJcbiAgICBpZiAodGhpcy5wb3B1cCkge1xyXG4gICAgICB0aGlzLnBvcHVwLnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlRGF0YShkYXRhU291cmNlTmFtZSwgZGF0YSkge1xyXG4gICAgaWYgKCF0aGlzLmluaXRpYWxpc2VkKSB0aGlzLmluaXRNYXBTb3VyY2VzQW5kTGF5ZXJzKCk7XHJcbiAgICB0aGlzLm1hcC5nZXRTb3VyY2UoZGF0YVNvdXJjZU5hbWUpLnNldERhdGEoZGF0YSk7XHJcbiAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XHJcblxyXG5jb25zdCBwb3NpdGl2ZU9yZGVyRGljdCA9IHtcclxuICAgIFwibGFuZF9zaW5rXCI6MCxcclxuICAgIFwiZm9zc2lsX2VtaXNzaW9uc1wiOjEsXHJcbiAgICBcImxhbmRfdXNlX2NoYW5nZVwiOjJ9O1xyXG5cclxuY29uc3QgbmVnYXRpdmVPcmRlckRpY3QgPSB7XCJvY2Vhbl9zaW5rXCI6MCxcclxuICAgIFwiYXRtb3Nfc2lua1wiOjEsXHJcbiAgICBcImxhbmRfc2lua1wiOjJ9O1xyXG5cclxuY29uc3QgY29sb3JEaWN0ID0ge1xyXG5cclxuICAgIGZvc3NpbF9lbWlzc2lvbnM6IFwiI2I3YzNjM1wiLFxyXG4gICAgbGFuZF91c2VfY2hhbmdlOiBcIiNFRkU2NkZcIixcclxuICAgIGxhbmRfc2luazogXCIjYTVkYWE4XCIsXHJcbiAgICBvY2Vhbl9zaW5rOiBcIiM3NWEzYjFcIixcclxuICAgIGF0bW9zX3Npbms6IFwiIzg5Y2ZmMFwiLFxyXG4gICAgY2VtZW50X3Npbms6IFwiI2EyYTE5OFwiXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBzdGFja2VkQXJlYUNoYXJ0e1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHN2Z29iaiwgcmF3ZGF0YSl7XHJcblxyXG4gICAgICAgIHRoaXMuc3ZnT2JqID0gc3Znb2JqO1xyXG4gICAgICAgIHRoaXMuc3ZnV2lkdGggPSB0aGlzLnN2Z09iai5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgICAgICAgdGhpcy5zdmdIZWlnaHQgPSB0aGlzLnN2Z09iai5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY2hhcnRXaWR0aCA9IHRoaXMuc3ZnV2lkdGggKiAwLjk7XHJcbiAgICAgICAgdGhpcy5jaGFydEhlaWdodCA9IHRoaXMuc3ZnSGVpZ2h0ICogMC45O1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuY2xlYW5EYXRhKHJhd2RhdGEpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjc3ZEYXRhOicsIHRoaXMuZGF0YSk7XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIHRoaXMubWFpbkdyb3VwID0gdGhpcy5zdmdPYmouYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgdGhpcy5jaGFydFdpZHRoKVxyXG4gICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgdGhpcy5jaGFydEhlaWdodClcclxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHsodGhpcy5zdmdXaWR0aC10aGlzLmNoYXJ0V2lkdGgpLzJ9LCR7KHRoaXMuc3ZnSGVpZ2h0LXRoaXMuY2hhcnRIZWlnaHQpLzJ9KWApO1xyXG4gICAgICAgIHRoaXMuaW5pdENoYXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYW5EYXRhKGRhdGEpe1xyXG4gICAgICAgIHJldHVybiBkYXRhLm1hcCh5ZWFyRGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB5ZWFyOiB5ZWFyRGF0YVtcIkFubsOpZVwiXSxcclxuICAgICAgICAgICAgICAgIGZvc3NpbF9lbWlzc2lvbnM6IHBhcnNlRmxvYXQoU3RyaW5nKHllYXJEYXRhW1wiw4ltaXNzaW9ucyBpc3N1ZXMgZGVzIMOpbmVyZ2llcyBmb3NzaWxlc1wiXSkucmVwbGFjZSgnLCcsXCIuXCIpKSxcclxuICAgICAgICAgICAgICAgIGxhbmRfdXNlX2NoYW5nZTogcGFyc2VGbG9hdChTdHJpbmcoeWVhckRhdGFbXCJDaGFuZ2VtZW50IGQnYWZmZWN0YXRpb24gZGVzIHRlcnJlc1wiXSkucmVwbGFjZSgnLCcsXCIuXCIpKSxcclxuICAgICAgICAgICAgICAgIGxhbmRfc2luazogcGFyc2VGbG9hdChTdHJpbmcoeWVhckRhdGFbXCJQdWl0cyB0ZXJyZXN0cmVcIl0pLnJlcGxhY2UoJywnLFwiLlwiKSksXHJcbiAgICAgICAgICAgICAgICBvY2Vhbl9zaW5rOiBwYXJzZUZsb2F0KFN0cmluZyh5ZWFyRGF0YVtcIk9jw6lhblwiXSkucmVwbGFjZSgnLCcsXCIuXCIpKSxcclxuICAgICAgICAgICAgICAgIGF0bW9zX3Npbms6IHBhcnNlRmxvYXQoU3RyaW5nKHllYXJEYXRhW1wiQXRtb3NwaMOocmVcIl0pLnJlcGxhY2UoJywnLFwiLlwiKSksXHJcbiAgICAgICAgICAgICAgICBjZW1lbnRfc2luazogcGFyc2VGbG9hdChTdHJpbmcoeWVhckRhdGFbXCJQdWl0cyBkZSBjaW1lbnRcIl0pLnJlcGxhY2UoJywnLFwiLlwiKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRDaGFydCgpe1xyXG5cclxuICAgICAgICBsZXQgbGVnZW5kRGF0YSA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiw4ltaXNzaW9ucyBpc3N1ZXMgZGVzIMOpbmVyZ2llcyBmb3NzaWxlc1wiLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiZm9zc2lsX2VtaXNzaW9uc1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkNoYW5nZW1lbnQgZCdhZmZlY3RhdGlvbiBkZXMgdGVycmVzXCIsXHJcbiAgICAgICAgICAgICAgICBjb2xvcjogXCJsYW5kX3VzZV9jaGFuZ2VcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJQdWl0cyB0ZXJyZXN0cmVcIixcclxuICAgICAgICAgICAgICAgIGNvbG9yOiBcImxhbmRfc2lua1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIk9jw6lhblwiLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6IFwib2NlYW5fc2lua1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBcIkF0bW9zcGjDqHJlXCIsXHJcbiAgICAgICAgICAgICAgICBjb2xvcjogXCJhdG1vc19zaW5rXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGNvbnN0IHhBeGlzID0gdGhpcy5kcmF3WEF4aXModGhpcy5tYWluR3JvdXAsIHRoaXMuY2hhcnRXaWR0aCwgdGhpcy5kYXRhKTtcclxuICAgICAgICBjb25zdCB5QXhpcyA9IHRoaXMuZHJhd1lBeGlzKHRoaXMubWFpbkdyb3VwLCB0aGlzLmNoYXJ0SGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmRyYXdBcmVhcyh0aGlzLm1haW5Hcm91cCwgeEF4aXMsIHlBeGlzKTtcclxuICAgICAgICAvL3RoaXMuZHJhd1JlY3RhbmdsZXModGhpcy5tYWluR3JvdXAsIHhBeGlzLCB5QXhpcyk7XHJcbiAgICAgICAgdGhpcy5kcmF3VGl0bGUodGhpcy5tYWluR3JvdXApO1xyXG4gICAgICAgIHRoaXMuZHJhd0JvdHRvbUJveCh0aGlzLm1haW5Hcm91cCwgdGhpcy5jaGFydFdpZHRoKVxyXG4gICAgICAgIHRoaXMuZHJhd0RldGFpbHModGhpcy5tYWluR3JvdXAsIGxlZ2VuZERhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtkMy5TZWxlY3Rpb259IGNvbnRhaW5lciBkMyBzZWxlY3Rpb25cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCB3aWR0aCBvZiB0aGUgY2hhcnRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIGRhdGEgT2JqIGNvbnRhaW5pbmcgc2VyaWVzIGFuZCBkb21haW5zXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXhpc1RpdGxlIHggYXhpcyB0aXRsZVxyXG4gICAgICovXHJcbiAgICAgZHJhd1hBeGlzKGNvbnRhaW5lciwgd2lkdGgsIGRhdGEsIGF4aXNUaXRsZSl7XHJcblxyXG4gICAgICAgIGNvbnN0IHhBeGlzR3JvdXAgPSBjb250YWluZXIuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgJ3hBeGlzR3JvdXAnKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgkezB9LCR7dGhpcy5jaGFydEhlaWdodCowLjkwfSlgKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBkMy5zY2FsZUJhbmQoKVxyXG4gICAgICAgICAgICAuZG9tYWluKGRhdGEubWFwKGVsZW0gPT4gZWxlbS55ZWFyKSlcclxuICAgICAgICAgICAgLnJhbmdlKFt0aGlzLmNoYXJ0V2lkdGgqMC4wNSwgd2lkdGhdKTtcclxuXHJcbiAgICAgICAgY29uc3QgYXhpcyA9IGQzLmF4aXNCb3R0b20oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGUoc2NhbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aWNrU2l6ZU91dGVyKDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aWNrVmFsdWVzKHNjYWxlLmRvbWFpbigpLmZpbHRlcigoZCxpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGkrMTApJTIwID09PSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRpY2tGb3JtYXQoKGQsaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc3BsaXQoJy0nKVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgeEF4aXNHcm91cC5jYWxsKGF4aXMpXHJcbiAgICAgICAgICAgIC5jYWxsKGcgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGlja0dyb3VwcyA9IGcuc2VsZWN0QWxsKFwiLnRpY2tcIik7XHJcbiAgICAgICAgICAgICAgICB0aWNrR3JvdXBzLnNlbGVjdCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmb250LXdlaWdodCcsIDQwMClcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtZmFtaWx5JywgJ2dyYXBoaWsnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzE0cHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIChkLGkpID0+IGkgPT09IHRpY2tHcm91cHMubm9kZXMoKS5sZW5ndGgtMSA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtkMy5TZWxlY3Rpb259IGNvbnRhaW5lciBkMyBzZWxlY3Rpb25cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCB3aWR0aCBvZiB0aGUgY2hhcnRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIGRhdGEgT2JqIGNvbnRhaW5pbmcgc2VyaWVzIGFuZCBkb21haW5zXHJcbiAgICAgKi9cclxuICAgICBkcmF3WUF4aXMoY29udGFpbmVyLCBoZWlnaHQpe1xyXG5cclxuICAgICAgICBjb25zdCB5QXhpc0dyb3VwID0gY29udGFpbmVyLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsICd5QXhpc0dyb3VwJylcclxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt0aGlzLmNoYXJ0V2lkdGgqMC4wNX0sJHswfSlgKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAgIC5kb21haW4oWzEyLC0xMl0pXHJcbiAgICAgICAgICAgIC5yYW5nZShbMCxoZWlnaHQqMC45MF0pO1xyXG5cclxuICAgICAgICBjb25zdCBheGlzID0gZDMuYXhpc0xlZnQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGUoc2NhbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aWNrU2l6ZU91dGVyKDApO1xyXG4gICAgICAgIHlBeGlzR3JvdXAuY2FsbChheGlzKVxyXG4gICAgICAgICAgICAuY2FsbChnID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpY2tHcm91cHMgPSBnLnNlbGVjdEFsbChcIi50aWNrXCIpO1xyXG4gICAgICAgICAgICAgICAgdGlja0dyb3Vwcy5zZWxlY3QoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCA0MDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmb250LWZhbWlseScsICdncmFwaGlrJylcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICcxMnB0Jyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3JvdGF0ZSgtOTApJylcclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIDApXHJcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAtc2NhbGUoMCkpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCItM2VtXCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ2JsYWNrJylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAnMTJwdCcpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC1mYW1pbHknLCAnZ3JhcGhpaycpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCAnNjAwJylcclxuICAgICAgICAgICAgLnRleHQoXCJGbHV4IGRlIENPMiAoR3RDIC8gYW5uw6llKVwiKTtcclxuICAgICAgICByZXR1cm4gc2NhbGU7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd0FyZWFzKGNvbnRhaW5lciwgeFNjYWxlLCB5U2NhbGUpe1xyXG5cclxuICAgICAgICBsZXQgcG9zaXRpdmVfcGF0aHNfYXJyYXkgPSB7fTtcclxuICAgICAgICBsZXQgbmVnYXRpdmVfcGF0aHNfYXJyYXkgPSB7fTtcclxuXHJcbiAgICAgICAgY29uc3QgcG9zRGF0YSA9IHRoaXMuZGF0YS5tYXAoeWVhckRhdGEgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcG9zRWxlbXMgPSBbXTtcclxuICAgICAgICAgICAgbGV0IGN1clRvdGFsID0gMDtcclxuICAgICAgICAgICAgbGV0IGN1clllYXIgPSB5ZWFyRGF0YS55ZWFyO1xyXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyh5ZWFyRGF0YSkuZm9yRWFjaCgoZW50cnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJFbGVtID0gZW50cnlbMV07XHJcbiAgICAgICAgICAgICAgICBpZihjdXJFbGVtPjAgJiYgZW50cnlbMF0gIT09IFwieWVhclwiKXtcclxuICAgICAgICAgICAgICAgICAgICBwb3NFbGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZW50cnlbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlbnRyeVsxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVG90OiBjdXJUb3RhbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyWWVhcjogY3VyWWVhclxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1clRvdGFsICs9IGVudHJ5WzFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihlbnRyeVswXSA9PT0gXCJjZW1lbnRfc2lua1wiKXsgLy8gQWRkIGNlbWVudCBzaW5rIHRvIHJlbW92ZSBpdCBhZnRlcndhcmRzIChpbiBmb3NzaWwgZnVlbCkgIFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc0VsZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBlbnRyeVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGVudHJ5WzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clllYXI6IGN1clllYXJcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgcmV0dXJuIHBvc0VsZW1zLnNvcnQoKGEsYikgPT4gcG9zaXRpdmVPcmRlckRpY3RbYS50eXBlXSAtIHBvc2l0aXZlT3JkZXJEaWN0W2IudHlwZV0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBuZWdEYXRhID0gdGhpcy5kYXRhLm1hcCh5ZWFyRGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBuZWdFbGVtcyA9IFtdO1xyXG4gICAgICAgICAgICBsZXQgY3VyVG90YWwgPSAwO1xyXG4gICAgICAgICAgICBsZXQgY3VyWWVhciA9IHllYXJEYXRhLnllYXI7XHJcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHllYXJEYXRhKS5zb3J0KChhLGIpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZWdhdGl2ZU9yZGVyRGljdFthWzBdXSAtIG5lZ2F0aXZlT3JkZXJEaWN0W2JbMF1dO1xyXG4gICAgICAgICAgICB9KS5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1ckVsZW0gPSBlbnRyeVsxXTtcclxuICAgICAgICAgICAgICAgIGlmKGN1ckVsZW08MCAmJiBlbnRyeVswXSAhPT0gXCJ5ZWFyXCIgJiYgZW50cnlbMF0gIT09IFwiY2VtZW50X3NpbmtcIiApe1xyXG4gICAgICAgICAgICAgICAgICAgIG5lZ0VsZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBlbnRyeVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGVudHJ5WzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IGN1clRvdGFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJZZWFyOiBjdXJZZWFyXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyVG90YWwgKz0gZW50cnlbMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHJldHVybiBuZWdFbGVtczsvLy5zb3J0KChhLGIpID0+IG5lZ2F0aXZlT3JkZXJEaWN0W2EudHlwZV0gLSBuZWdhdGl2ZU9yZGVyRGljdFtiLnR5cGVdKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ2dvdCBuZWdEYXRhOiAnLCBuZWdEYXRhKTtcclxuXHJcbiAgICAgICAgbGV0IGFyZWFHZW4gPSBkMy5hcmVhKClcclxuICAgICAgICAgICAgLngoZCA9PiB4U2NhbGUoZC5jdXJZZWFyKSlcclxuICAgICAgICAgICAgLnkwKGQgPT4geVNjYWxlKGQuY3VyVG90KSlcclxuICAgICAgICAgICAgLnkxKGQgPT4geVNjYWxlKGQuY3VyVG90K2QudmFsdWUpKTtcclxuICAgICAgICBPYmplY3QuZW50cmllcyhwb3NpdGl2ZU9yZGVyRGljdCkuZm9yRWFjaChvcmRlck9iaiA9PiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgY3VyS2V5ID0gb3JkZXJPYmpbMF07XHJcbiAgICAgICAgICAgIGxldCBjdXJPcmRlclZhbHVlID0gb3JkZXJPYmpbMV07XHJcbiAgICAgICAgICAgIGxldCBjdXJQYXRoQXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgcG9zRGF0YS5mb3JFYWNoKHllYXJEYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJFbGVtID0geWVhckRhdGFbMF07XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VyWWVhciA9IGN1ckVsZW1bJ2N1clllYXInXTtcclxuICAgICAgICAgICAgICAgIGxldCBrZXlPYmogPSB5ZWFyRGF0YS5maWx0ZXIoZWxlbSA9PiBjdXJLZXkgPT09IGVsZW0udHlwZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2VtZW50T2JqID0geWVhckRhdGEuZmlsdGVyKGVsZW0gPT4gJ2NlbWVudF9zaW5rJyA9PT0gZWxlbS50eXBlKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYoa2V5T2JqLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vQWRkIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY3VyS2V5ID09PSBcImZvc3NpbF9lbWlzc2lvbnNcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clBhdGhBcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGN1cktleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1clllYXI6IGN1clllYXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IGtleU9ialswXS5jdXJUb3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToga2V5T2JqWzBdLnZhbHVlIC0gTWF0aC5hYnMoY2VtZW50T2JqWzBdLnZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clBhdGhBcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGN1cktleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1clllYXI6IGN1clllYXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IGtleU9ialswXS5jdXJUb3QtIE1hdGguYWJzKGNlbWVudE9ialswXS52YWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToga2V5T2JqWzBdLnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9BZGQgemVyb1xyXG4gICAgICAgICAgICAgICAgICAgIGN1clBhdGhBcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogY3VyS2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJZZWFyOiBjdXJZZWFyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwb3NpdGl2ZV9wYXRoc19hcnJheVtjdXJLZXldID0gY3VyUGF0aEFycmF5O1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNvbnN0IHBvc2l0aXZlUGF0aHMgPSB0aGlzLm1haW5Hcm91cC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAuYXR0cignaWQnLCAncG9zaXRpdmVQYXRocycpO1xyXG5cclxuICAgICAgICBPYmplY3QuZW50cmllcyhwb3NpdGl2ZV9wYXRoc19hcnJheSkuZm9yRWFjaChjYXRlZ29yeU9iaiA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjdXJLZXkgPSBjYXRlZ29yeU9ialswXTtcclxuICAgICAgICAgICAgbGV0IGN1ckFycmF5ID0gY2F0ZWdvcnlPYmpbMV07XHJcblxyXG4gICAgICAgICAgICBwb3NpdGl2ZVBhdGhzLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBjdXJLZXkpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgICAgIC5kYXR1bShjdXJBcnJheSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgY29sb3JEaWN0W2N1cktleV0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgJ2JsYWNrJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAwKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBkID0+IGFyZWFHZW4oZCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBPYmplY3QuZW50cmllcyhuZWdhdGl2ZU9yZGVyRGljdCkuc29ydCgoYSxiKSA9PiBiWzFdIC0gYVsxXSkuZm9yRWFjaChvcmRlck9iaiA9PiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgY3VyS2V5ID0gb3JkZXJPYmpbMF07XHJcbiAgICAgICAgICAgIGxldCBjdXJPcmRlclZhbHVlID0gb3JkZXJPYmpbMV07XHJcbiAgICAgICAgICAgIGxldCBjdXJQYXRoQXJyYXkgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIG5lZ0RhdGEuZm9yRWFjaCh5ZWFyRGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VyRWxlbSA9IHllYXJEYXRhWzBdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1clllYXIgPSBjdXJFbGVtWydjdXJZZWFyJ107XHJcbiAgICAgICAgICAgICAgICBsZXQga2V5T2JqID0geWVhckRhdGEuZmlsdGVyKGVsZW0gPT4gY3VyS2V5ID09PSBlbGVtLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgaWYoa2V5T2JqLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vQWRkIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyUGF0aEFycmF5LnB1c2goa2V5T2JqWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9BZGQgemVyb1xyXG4gICAgICAgICAgICAgICAgICAgIGN1clBhdGhBcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogY3VyS2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJZZWFyOiBjdXJZZWFyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBuZWdhdGl2ZV9wYXRoc19hcnJheVtjdXJLZXldID0gY3VyUGF0aEFycmF5O1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNvbnN0IG5lZ2F0aXZlUGF0aHMgPSB0aGlzLm1haW5Hcm91cC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAuYXR0cignaWQnLCAnbmVnYXRpdmVwYXRocycpO1xyXG5cclxuICAgICAgICBPYmplY3QuZW50cmllcyhuZWdhdGl2ZV9wYXRoc19hcnJheSkuZm9yRWFjaChjYXRlZ29yeU9iaiA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjdXJLZXkgPSBjYXRlZ29yeU9ialswXTtcclxuICAgICAgICAgICAgbGV0IGN1ckFycmF5ID0gY2F0ZWdvcnlPYmpbMV07XHJcblxyXG4gICAgICAgICAgICBuZWdhdGl2ZVBhdGhzLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignaWQnLCBjdXJLZXkpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgICAgIC5kYXR1bShjdXJBcnJheSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgY29sb3JEaWN0W2N1cktleV0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgJ2JsYWNrJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAwKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBkID0+IGFyZWFHZW4oZCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBEcmF3IGxpbmVcclxuICAgICAgICBjb25zdCBsaW5lR2VuID0gZDMubGluZSgpLngoZCA9PiB4U2NhbGUoZC55ZWFyKSkueShkID0+IHlTY2FsZShkLnZhbHVlKSk7XHJcblxyXG4gICAgICAgIGxldCBuZWdZZWFyVG90YWwgPSBbXTtcclxuICAgICAgICBsZXQgcG9zWWVhclRvdGFsID0gW107XHJcbiAgICAgICAgcG9zRGF0YS5mb3JFYWNoKHllYXJEYXRhID0+IHtcclxuICAgICAgICAgICAgbGV0IGluaXRWYWx1ZSA9IDA7XHJcbiAgICAgICAgICAgIGxldCBjdXJWYWx1ZSA9IHllYXJEYXRhLnJlZHVjZSgocHJldlZhbCxjdXJWYWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWR1Y2luZy4uLicsIHByZXZWYWwgLCBjdXJWYWwpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZWYWwgKyBjdXJWYWwudmFsdWU7XHJcbiAgICAgICAgICAgIH0sIGluaXRWYWx1ZSk7XHJcbiAgICAgICAgICAgIG5lZ1llYXJUb3RhbC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHllYXI6IHllYXJEYXRhWzBdLmN1clllYXIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogLWN1clZhbHVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwb3NZZWFyVG90YWwucHVzaChcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB5ZWFyOiB5ZWFyRGF0YVswXS5jdXJZZWFyLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdXJWYWx1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3llYXIgdG90YWw6JywgKTtcclxuXHJcbiAgICAgICAgdmFyIHBvc2xpbmUgPSBkMy5zZWxlY3QoJ3N2ZycpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgICAgICAuZGF0dW0ocG9zWWVhclRvdGFsKVxyXG4gICAgICAgICAgICAuYXR0cignZCcsIGxpbmVHZW4pXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsICdub25lJylcclxuICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCAnYmxhY2snKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3RoaXMuY2hhcnRXaWR0aCowLjA1ICsgeFNjYWxlLmJhbmR3aWR0aCgpfSwke01hdGguYWJzKHlTY2FsZSgyKjAuNzQpLXlTY2FsZSgwKSl9KWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBuZWdsaW5lID0gZDMuc2VsZWN0KCdzdmcnKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgLmRhdHVtKG5lZ1llYXJUb3RhbClcclxuICAgICAgICAgICAgLmF0dHIoJ2QnLCBsaW5lR2VuKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnbm9uZScpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJ2JsYWNrJylcclxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLWRhc2hhcnJheVwiLCAoXCIzLCAzXCIpKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3RoaXMuY2hhcnRXaWR0aCowLjA1ICsgeFNjYWxlLmJhbmR3aWR0aCgpfSwke01hdGguYWJzKHlTY2FsZSgyKjAuNzQpLXlTY2FsZSgwKSl9KWApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBkcmF3VGl0bGUoY29udGFpbmVyKXtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgICAgICAgLmF0dHIoJ3gnLCAodGhpcy5zdmdXaWR0aCAtIHRoaXMuY2hhcnRXaWR0aCkgLyAyICsgdGhpcy5jaGFydFdpZHRoKjAuMDUpXHJcbiAgICAgICAgICAgIC5hdHRyKCd5JywgKHRoaXMuc3ZnSGVpZ2h0IC0gdGhpcy5jaGFydEhlaWdodCkvMiAtIDUwKVxyXG4gICAgICAgICAgICAuYXR0cignZmlsbCcsICdibGFjaycpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzE3cHQnKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtZmFtaWx5JywgJ2dyYXBoaWsnKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtd2VpZ2h0JywgJzYwMCcpXHJcbiAgICAgICAgICAgIC50ZXh0KFwiTGUgdGl0cmUgZHUgZ3JhcGhpcXVlXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAuYXR0cigneCcsKHRoaXMuc3ZnV2lkdGggLSB0aGlzLmNoYXJ0V2lkdGgpIC8gMiArIHRoaXMuY2hhcnRXaWR0aCowLjA1KVxyXG4gICAgICAgICAgICAuYXR0cigneScsICh0aGlzLnN2Z0hlaWdodCAtIHRoaXMuY2hhcnRIZWlnaHQpLzIgLSAyNSlcclxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnYmxhY2snKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICcxM3B0JylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LWZhbWlseScsICdncmFwaGlrJylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXdlaWdodCcsICc0MDAnKVxyXG4gICAgICAgICAgICAudGV4dChcIkxlIHNvdXMtdGl0cmUgZHUgZ3JhcGhpcXVlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdCb3R0b21Cb3goY29udGFpbmVyLCB3aWR0aCl7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoJ2xpbmUnKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsICdibGFjaycpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnc3Rva2Utd2lkdGgnLCAxKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAwLjMpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgdGhpcy5jaGFydFdpZHRoKjAuMDUpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgdGhpcy5jaGFydEhlaWdodC0zMClcclxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB0aGlzLmNoYXJ0V2lkdGgpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgdGhpcy5jaGFydEhlaWdodC0zMCk7XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAuYXR0cigneCcsIHRoaXMuY2hhcnRXaWR0aCowLjA1KVxyXG4gICAgICAgICAgICAuYXR0cigneScsIHRoaXMuY2hhcnRIZWlnaHQtMTcpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzhwdCcpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCA2MDApXHJcbiAgICAgICAgICAgIC50ZXh0KCdHcmFwaGlxdWUgOicpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJ3RzcGFuJylcclxuICAgICAgICAgICAgLmF0dHIoJ3gnLCB0aGlzLmNoYXJ0V2lkdGgqMC4wNSsgNjUpXHJcbiAgICAgICAgICAgIC5hdHRyKCd5JywgdGhpcy5jaGFydEhlaWdodC0xNylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAnOHB0JylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXdlaWdodCcsIDQwMClcclxuICAgICAgICAgICAgLnRleHQoJ0xlIERldm9pciAtICcpO1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAuYXR0cigneCcsIHRoaXMuY2hhcnRXaWR0aCowLjA1ICsgMTIyKVxyXG4gICAgICAgICAgICAuYXR0cigneScsIHRoaXMuY2hhcnRIZWlnaHQtMTcpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzhwdCcpXHJcbiAgICAgICAgICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCA2MDApXHJcbiAgICAgICAgICAgIC50ZXh0KCdTb3VyY2UgOicpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJ3RzcGFuJylcclxuICAgICAgICAgICAgLmF0dHIoJ3gnLCB0aGlzLmNoYXJ0V2lkdGgqMC4wNSArIDE2OSlcclxuICAgICAgICAgICAgLmF0dHIoJ3knLCB0aGlzLmNoYXJ0SGVpZ2h0LTE3KVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICc4cHQnKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtd2VpZ2h0JywgNDAwKVxyXG4gICAgICAgICAgICAudGV4dCgnIC4uLiAnKTtcclxuXHJcbiAgICAgICAgLy8gY29udGFpbmVyLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgLy8gICAgIC5hdHRyKCd4JywgdGhpcy5zdmdXaWR0aCowLjEpXHJcbiAgICAgICAgLy8gICAgIC5hdHRyKCd5JywgdGhpcy5zdmdIZWlnaHQqMC45NTEpXHJcbiAgICAgICAgLy8gICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzhwdCcpXHJcbiAgICAgICAgLy8gICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCA2MDApXHJcbiAgICAgICAgLy8gICAgIC50ZXh0KCdOb3RlIDonKVxyXG4gICAgICAgIC8vICAgICAuYXBwZW5kKCd0c3BhbicpXHJcbiAgICAgICAgLy8gICAgIC5hdHRyKCd4JywgdGhpcy5zdmdXaWR0aCowLjErMzUpXHJcbiAgICAgICAgLy8gICAgIC5hdHRyKCd5JywgdGhpcy5zdmdIZWlnaHQqMC45NTEpXHJcbiAgICAgICAgLy8gICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzhwdCcpXHJcbiAgICAgICAgLy8gICAgIC5zdHlsZSgnZm9udC13ZWlnaHQnLCA0MDApXHJcbiAgICAgICAgLy8gICAgIC50ZXh0KCdEb25uw6llcyBjb2xsZWN0w6llcyBkZXB1aXMgaHR0cHM6Ly9kb25uZWVzLm1vbnRyZWFsLmNhL3ZpbGxlLWRlLW1vbnRyZWFsL2NvbXB0YWdlLXZlaGljdWxlcy1waWV0b25zJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd0RldGFpbHMoY29udGFpbmVyLCBsZWdlbmREYXRhKXtcclxuXHJcbiAgICAgICAgY29uc3QgbGVnZW5kQ29udGFpbmVyID0gY29udGFpbmVyLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsICdsZWdlbmRDb250YWluZXInKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgkeyh0aGlzLnN2Z1dpZHRoIC0gdGhpcy5jaGFydFdpZHRoKSAvIDIgKyAodGhpcy5jaGFydFdpZHRoKjAuMDUgKyAxMCl9LCR7dGhpcy5zdmdIZWlnaHQqMC4wN30pYCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJvd3MgPSBsZWdlbmRDb250YWluZXIuc2VsZWN0QWxsKCdnJylcclxuICAgICAgICAgICAgLmRhdGEobGVnZW5kRGF0YSlcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsICdsZWdlbmRSb3cnKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQsaSkgPT4gYHRyYW5zbGF0ZSgwLCR7aSoyMH0pYCk7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIHJvd3MuYXBwZW5kKCdjaXJjbGUnKVxyXG4gICAgICAgICAgICAuYXR0cignY3gnLCAwKVxyXG4gICAgICAgICAgICAuYXR0cignY3knLCAwKVxyXG4gICAgICAgICAgICAuYXR0cigncicsIDgpXHJcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBjb2xvckRpY3RbZC5jb2xvcl0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICByb3dzLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCd4JywgMTgpXHJcbiAgICAgICAgICAgIC5hdHRyKCd5JywgNClcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAnOHB0JylcclxuICAgICAgICAgICAgLnN0eWxlKCdmb250LXdlaWdodCcsIDUwMClcclxuICAgICAgICAgICAgLnRleHQoIGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQubGFiZWw7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBkcmF3UmVjdGFuZ2xlcyhjb250YWluZXIsIHhTY2FsZSwgeVNjYWxlKXsgLy8gbm90IHVzZWRcclxuXHJcbiAgICAgICAgY29uc3QgcG9zaXRpdmVBcmVhR3JvdXAgPSBjb250YWluZXIuYXBwZW5kKCdnJylcclxuICAgICAgICAuYXR0cignaWQnLCAncG9zQXJlYWdyb3VwJylcclxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCR7MH0pYCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG5lZ2F0aXZlQXJlYUdyb3VwID0gY29udGFpbmVyLmFwcGVuZCgnZycpXHJcbiAgICAgICAgLmF0dHIoJ2lkJywgJ25lZ0FyZWFncm91cCcpXHJcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoMCwkezB9KWApO1xyXG5cclxuICAgICAgICBjb25zdCBwb3NZZWFyR3JvdXBzID0gcG9zaXRpdmVBcmVhR3JvdXAuc2VsZWN0QWxsKCdnJylcclxuICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgZCA9PiBgeWVhcl8ke2QueWVhcn1gKTtcclxuICAgICAgICBjb25zdCBwb3NSZWN0cyA9IHBvc1llYXJHcm91cHMuc2VsZWN0QWxsKCdyZWN0JylcclxuICAgICAgICAgICAgLmRhdGEoZCA9PiB7IFxyXG4gICAgICAgICAgICAgICAgbGV0IHBvc0VsZW1zID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VyVG90YWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1clllYXIgPSBkLnllYXI7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhkKS5mb3JFYWNoKChlbnRyeSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJFbGVtID0gZW50cnlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY3VyRWxlbT4wICYmIGVudHJ5WzBdICE9PSBcInllYXJcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc0VsZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZW50cnlbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZW50cnlbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IGN1clRvdGFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyWWVhcjogY3VyWWVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVG90YWwgKz0gZW50cnlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBwb3NFbGVtcy5zb3J0KChhLGIpID0+IHBvc2l0aXZlT3JkZXJEaWN0W2EudHlwZV0gLSBwb3NpdGl2ZU9yZGVyRGljdFtiLnR5cGVdKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsIGQgPT4gYCR7ZC50eXBlfV8ke2QudmFsdWV9YClcclxuICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgeFNjYWxlLmJhbmR3aWR0aCgpKVxyXG4gICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgKGQsaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHlTY2FsZSgwKSAtIHlTY2FsZShkLnZhbHVlKSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hdHRyKCd4JywgZCA9PiB4U2NhbGUoZC5jdXJZZWFyKSlcclxuICAgICAgICAgICAgLmF0dHIoJ3knLCBkID0+ICh5U2NhbGUoMCkgLSAoTWF0aC5hYnMoeVNjYWxlKDApIC0geVNjYWxlKGQudmFsdWUpKSkgLSAoTWF0aC5hYnMoeVNjYWxlKDApIC0geVNjYWxlKGQuY3VyVG90KSkpKSlcclxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+IGNvbG9yRGljdFtkLnR5cGVdKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmVnYXRpdmVZZWFyR3JvdXBzID0gbmVnYXRpdmVBcmVhR3JvdXAuc2VsZWN0QWxsKCdnJylcclxuICAgICAgICAgICAgLmRhdGEodGhpcy5kYXRhKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgZCA9PiBgeWVhcl8ke2QueWVhcn1gKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmVnUmVjdHMgPSBuZWdhdGl2ZVllYXJHcm91cHMuc2VsZWN0QWxsKCdyZWN0JylcclxuICAgICAgICAgICAgLmRhdGEoZCA9PiB7IFxyXG4gICAgICAgICAgICAgICAgbGV0IG5lZ0VsZW1zID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VyVG90YWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1clllYXIgPSBkLnllYXI7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhkKS5maWx0ZXIoZWxlbSA9PiBlbGVtWzFdPDApLnNvcnQoKGEsYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFWYWwgPSBuZWdhdGl2ZU9yZGVyRGljdFthWzBdXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBiVmFsID0gbmVnYXRpdmVPcmRlckRpY3RbYlswXV07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFWYWwgLSBiVmFsO1xyXG4gICAgICAgICAgICAgICAgfSkuZm9yRWFjaCgoZW50cnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyRWxlbSA9IGVudHJ5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVudHJ5WzBdICE9PSBcInllYXJcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZ0VsZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZW50cnlbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZW50cnlbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUb3Q6IGN1clRvdGFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyWWVhcjogY3VyWWVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVG90YWwgKz0gZW50cnlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZWdFbGVtcztcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsIGQgPT4gYCR7ZC50eXBlfV8ke2QudmFsdWV9YClcclxuICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgeFNjYWxlLmJhbmR3aWR0aCgpKVxyXG4gICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgKGQsaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHlTY2FsZSgwKSAtIHlTY2FsZShNYXRoLmFicyhkLnZhbHVlKSkpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYXR0cigneCcsIGQgPT4geFNjYWxlKGQuY3VyWWVhcikpXHJcbiAgICAgICAgICAgIC5hdHRyKCd5JywgZCA9PiAoeVNjYWxlKGQuY3VyVG90KSkpXHJcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBjb2xvckRpY3RbZC50eXBlXSk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlU3RhdGV9IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gR2F1Z2VzKHByb3BzKXtcblxuICB1c2VFZmZlY3QoICgpID0+IHtcblxuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImdhdWdlc1wiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnYXVnZSBkb2xsYXJHYXVnZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHRCb3hcIj5cbiAgICAgICAgICA8aDU+RG9sbGFyczwvaDU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdhdWdlQ29sb3IgYmx1ZVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmFsdWVcIj5cbiAgICAgICAgICAgIDxwPntwcm9wcy5kb2xsYXJzfTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2F1Z2UgZW52aXJvbm1lbnRHYXVnZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHRCb3hcIj5cbiAgICAgICAgICA8aDU+VFdoIGVuIDIwNTA8L2g1PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnYXVnZUNvbG9yIGdyZWVuXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2YWx1ZVwiPlxuICAgICAgICAgICAgPHA+e3Byb3BzLnR3aH08L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcblxufVxuIiwiaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2t9IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gSW50cm9Cb3gocHJvcHMpe1xuXG4gIGNvbnN0IHN0YXJ0R2FtZSA9IHVzZUNhbGxiYWNrKCBhc3luYyAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ3N0YXJ0aW5nIGdhbWUnKTtcbiAgICBwcm9wcy5tYXBPYmoudmlld0V4dHJhQm91bmRPYmooMCxcInpvbmUxXCIpO1xuICAgIHByb3BzLmdhbWVTdGFydCgpO1xuICB9KTtcblxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJnYW1lQm94XCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImludHJvQm94XCI+XG4gICAgICAgIHtwcm9wcy5pbnRyb0VsZW19XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlckJveFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0YXJ0YnV0dG9uXCIgb25DbGljaz17c3RhcnRHYW1lfT5cbiAgICAgICAgICA8cD5Db21tZW5jZXI8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgKVxuXG59XG4iLCJpbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZX0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBNdWx0aXBsZUNob2ljZShwcm9wcyl7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcblxuICB9LCBbXSk7XG5cbiAgY29uc3QgbmV4dFByb21wdCA9IHVzZUNhbGxiYWNrKCBhc3luYyAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ25leHQgcHJvbXB0IScsIHByb3BzLmN1ckluZGV4KyAxKTtcbiAgICBwcm9wcy5jaGFuZ2VQcm9tcHQocHJvcHMuY3VySW5kZXggKyAxKTtcbiAgfSk7XG5cbiAgY29uc3QgcHJldmlvdXNQcm9tcHQgPSB1c2VDYWxsYmFjayggYXN5bmMgKCkgPT4ge1xuICAgIGlmKHByb3BzLmN1ckluZGV4ID4gMCl7XG4gICAgICBjb25zb2xlLmxvZygncHJldmlvdXMgcHJvbXB0IScsIHByb3BzLmN1ckluZGV4IC0gMSk7XG4gICAgICBwcm9wcy5jaGFuZ2VQcm9tcHQocHJvcHMuY3VySW5kZXggLSAxKTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgcmV0dXJuKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvaWNlc1wiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2x1bW5cIj5cbiAgICAgICAge3Byb3BzLmN1ckluZGV4ID4gMCA/XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25idXR0b25cIiBvbkNsaWNrPXtwcmV2aW91c1Byb21wdH0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dG5cIj5cbiAgICAgICAgICAgICAgPHA+UHJldmlvdXM8L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA6XG4gICAgICAgICAgPGRpdj48L2Rpdj5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbHVtblwiPlxuICAgICAgICB7XG4gICAgICAgICAgcHJvcHMuY2hvaWNlcy5tYXAoKGNob2ljZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGxldCBjb3N0ID0gcHJvcHMuY2hvaWNlc192YWx1ZXNbaW5kZXhdLnNwbGl0KCdfJylbMF07XG4gICAgICAgICAgICBsZXQgdXNlID0gcHJvcHMuY2hvaWNlc192YWx1ZXNbaW5kZXhdLnNwbGl0KCdfJylbMV07XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbmJ1dHRvblwiIGtleT17aW5kZXh9IG9uQ2xpY2s9e25leHRQcm9tcHR9PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0blwiPlxuICAgICAgICAgICAgICAgICAgPHA+e2Nob2ljZX0gKGNvw7t0OiB7Y29zdH0gOyBlZmZldDoge3VzZX0pPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG5cbn1cbiIsImltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFByaW50UHJvbXB0KHByb3BzKXtcblxuICBjb25zdCBwcmV2aW91c1Byb21wdCA9IHVzZUNhbGxiYWNrKCBhc3luYyAoKSA9PiB7XG4gICAgaWYocHJvcHMuY3VySW5kZXggPiAwKXtcbiAgICAgIGNvbnNvbGUubG9nKCduZXh0IHByb21wdCEnLCBwcm9wcy5jdXJJbmRleCAtIDEpO1xuICAgICAgcHJvcHMuY2hhbmdlUHJvbXB0KHByb3BzLmN1ckluZGV4IC0gMSk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBuZXh0UHJvbXB0ID0gdXNlQ2FsbGJhY2soIGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnbmV4dCBwcm9tcHQhJywgcHJvcHMuY3VySW5kZXgrIDEpO1xuICAgIHByb3BzLmNoYW5nZVByb21wdChwcm9wcy5jdXJJbmRleCArIDEpO1xuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicHJpbnRwcm9tcHRcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVzc2FnZVwiPntwcm9wcy5tZXNzYWdlfTwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25idXR0b25cIiBvbkNsaWNrPXtwcmV2aW91c1Byb21wdH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0blwiPlxuICAgICAgICAgIDxwPlByZXZpb3VzPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhY3Rpb25idXR0b25cIiBvbkNsaWNrPXtuZXh0UHJvbXB0fT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXRuXCI+XG4gICAgICAgICAgPHA+U3VpdmFudDwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbilcbn1cbiIsImltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gUmVwYXJ0aXRpb24ocHJvcHMpe1xuXG4gIGNvbnN0IFtqZXRvbnMsIHNldEpldG9uc10gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW21lZ2F3YXR0cywgc2V0TWVnYXdhdHRzXSA9IHVzZVN0YXRlKDApO1xuXG4gIHVzZUVmZmVjdCggKCkgPT4ge1xuXG4gIH0sIFtdKTtcblxuICBjb25zdCBwcmV2aW91c1Byb21wdCA9IHVzZUNhbGxiYWNrKCBhc3luYyAoKSA9PiB7XG4gICAgaWYocHJvcHMuY3VySW5kZXggPiAwKXtcbiAgICAgIGNvbnNvbGUubG9nKCduZXh0IHByb21wdCEnLCBwcm9wcy5jdXJJbmRleCAtIDEpO1xuICAgICAgcHJvcHMuY2hhbmdlUHJvbXB0KHByb3BzLmN1ckluZGV4IC0gMSk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBuZXh0UHJvbXB0ID0gdXNlQ2FsbGJhY2soIGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnbmV4dCBwcm9tcHQhJywgcHJvcHMuY3VySW5kZXgrIDEpO1xuICAgIHByb3BzLmNoYW5nZVByb21wdChwcm9wcy5jdXJJbmRleCArIDEpO1xuICB9KTtcblxuICBjb25zdCBwcm9jZXNzQ2hvaWNlcyA9IChjaG9pY2UsIGNob2ljZXNfdmFsdWVzKSA9PiB7XG4gICAgY29uc3Qgc3BsaXR0ZWRDaG9pY2VzID0gY2hvaWNlc192YWx1ZXMuc3BsaXQoJ18nKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogY2hvaWNlLFxuICAgICAgdW5pdFZhbHVlOiBwYXJzZUludChzcGxpdHRlZENob2ljZXNbMF0pLFxuICAgICAgdG90YWw6IHBhcnNlSW50KHNwbGl0dGVkQ2hvaWNlc1sxXSksXG4gICAgICB1bml0TVd2YWx1ZTogcGFyc2VJbnQoc3BsaXR0ZWRDaG9pY2VzWzJdKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGNhbGN1bGF0ZVRvdGFscyA9IChldmVudCwgdW5pdFZhbHVlLCB0b3RhbCwgdW5pdE1XdmFsdWUpID0+IHtcbiAgICBjb25zdCBjbGlja1ZhbHVlID0gY2FsY3VsYXRlQ2xpY2soZXZlbnQpO1xuICAgIGNvbnNvbGUubG9nKCcgdG90YWxzIGNoZWNrOiAnLCBldmVudCwgY2xpY2tWYWx1ZSAsIE1hdGgucm91bmQocGFyc2VGbG9hdChjbGlja1ZhbHVlKnRvdGFsKS50b0ZpeGVkKDApL3VuaXRWYWx1ZSksIHVuaXRWYWx1ZSwgdG90YWwsIHVuaXRNV3ZhbHVlKTtcbiAgICBkMy5zZWxlY3QoZXZlbnQudGFyZ2V0KS5zZWxlY3QoJy5jb2xvcmVkJykuc3R5bGUoJ3dpZHRoJywgYCR7TWF0aC5tYXgoTWF0aC5yb3VuZChwYXJzZUZsb2F0KGNsaWNrVmFsdWUqdG90YWwvdW5pdFZhbHVlKS50b0ZpeGVkKDApKnVuaXRWYWx1ZSoxMCksIDMpfSVgKTtcbiAgICBkMy5zZWxlY3QoZXZlbnQudGFyZ2V0Lm9mZnNldFBhcmVudCkuc2VsZWN0KCcucm93amV0b25zVG90YWwnKS5zZWxlY3QoJy52YWx1ZScpLmh0bWwoTWF0aC5yb3VuZChwYXJzZUZsb2F0KGNsaWNrVmFsdWUqdG90YWwvdW5pdFZhbHVlKS50b0ZpeGVkKDApKSp1bml0VmFsdWUpO1xuICAgIGQzLnNlbGVjdChldmVudC50YXJnZXQub2Zmc2V0UGFyZW50KS5zZWxlY3QoJy5yb3dtZWdhd2F0dHNUb3RhbCcpLnNlbGVjdCgnLnZhbHVlJykuaHRtbChNYXRoLnJvdW5kKHBhcnNlRmxvYXQoY2xpY2tWYWx1ZSp0b3RhbC91bml0VmFsdWUpLnRvRml4ZWQoMCkpKnVuaXRNV3ZhbHVlKTtcblxuICAgIGxldCB0b3RhbEpldG9ucyA9IDA7XG4gICAgbGV0IHRvdGFsTVcgPSAwO1xuICAgIGQzLnNlbGVjdCgnLnJlcGFydGl0aW9uJykuc2VsZWN0QWxsKCcuYmFuZF9yb3cnKS5ub2RlcygpLm1hcChub2RlID0+IHtcbiAgICAgIHRvdGFsSmV0b25zICs9IHBhcnNlSW50KGQzLnNlbGVjdChub2RlKS5zZWxlY3QoJy5yb3dqZXRvbnNUb3RhbCcpLnNlbGVjdCgnLnZhbHVlJykuaHRtbCgpKTtcbiAgICAgIHRvdGFsTVcgKz0gcGFyc2VJbnQoZDMuc2VsZWN0KG5vZGUpLnNlbGVjdCgnLnJvd21lZ2F3YXR0c1RvdGFsJykuc2VsZWN0KCcudmFsdWUnKS5odG1sKCkpO1xuICAgIH0pO1xuICAgIHNldEpldG9ucyh0b3RhbEpldG9ucyk7XG4gICAgc2V0TWVnYXdhdHRzKHRvdGFsTVcpO1xuXG4gIH1cblxuICBjb25zdCBjYWxjdWxhdGVDbGljayA9IChldmVudCkgPT4ge1xuICAgIHJldHVybiAoZXZlbnQuY2xpZW50WCAtIGV2ZW50LnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSAvIGV2ZW50LnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgfVxuXG4gIGNvbnN0IGdlbmVyYXRlVGlja3MgPSAodW5pdFZhbHVlLCB0b3RhbCwgdW5pdE1XdmFsdWUpID0+IHtcblxuICAgIGxldCBudW1UaWNrcyA9IHBhcnNlSW50KE1hdGguZmxvb3IodG90YWwgLyB1bml0VmFsdWUpKTtcbiAgICBsZXQgdGlja19hcnJheSA9IEFycmF5LmFwcGx5KG51bGwsIEFycmF5KG51bVRpY2tzKzEpKS5tYXAoKGUsIGNvdW50KSA9PiB7XG4gICAgICByZXR1cm4oPGRpdiBjbGFzc05hbWU9XCJ0aWNrXCIga2V5PXtjb3VudH0gc3R5bGU9e3twYWRkaW5nTGVmdDogYCR7TWF0aC5mbG9vcigoY291bnQqdW5pdFZhbHVlKS90b3RhbCoxMDApfSVgfX0+e2NvdW50KnVuaXRWYWx1ZX08L2Rpdj4pO1xuICAgIH0pO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcGFyYXRvclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpbmVcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGlja3NcIj57dGlja19hcnJheX08L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHJlbmRlclJvd3MgPSAoY2hvaWNlcykgPT4ge1xuICAgIHJldHVybiBjaG9pY2VzLm1hcCggKGVsZW0saW5kZXgpID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCIga2V5PXtpbmRleH0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9pY2VfaGVhZGVyXCI+XG4gICAgICAgICAgICA8aDU+e2VsZW0ubmFtZX08L2g1PlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIDxwPntlbGVtLnVuaXRWYWx1ZX0gamV0b25zIGV0IHtlbGVtLnVuaXRNV3ZhbHVlfSBNVyBwYXIgdW5pdMOpPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VsZWN0b3JcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmFuZF9yb3dcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiYW5kX2NvbHVtblwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmFuZFwiIG9uQ2xpY2s9eyhlKSA9PiBjYWxjdWxhdGVUb3RhbHMoZSwgZWxlbS51bml0VmFsdWUsIGVsZW0udG90YWwsIGVsZW0udW5pdE1XdmFsdWUpfT5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sb3JlZFwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIHtnZW5lcmF0ZVRpY2tzKGVsZW0udW5pdFZhbHVlLCBlbGVtLnRvdGFsLCBlbGVtLnVuaXRNV3ZhbHVlKX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmFsdWVzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dqZXRvbnNUb3RhbFwiPlxuICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidmFsdWVcIj4wPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93bWVnYXdhdHRzVG90YWxcIj5cbiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInZhbHVlXCI+MDwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybihcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInJlcGFydGl0aW9uXCI+XG4gICAgICB7XG4gICAgICAgIHJlbmRlclJvd3MocHJvcHMuY2hvaWNlcy5tYXAoKGUsIGluZGV4KSA9PiBwcm9jZXNzQ2hvaWNlcyhlLCBwcm9wcy5jaG9pY2VzX3ZhbHVlc1tpbmRleF0pKSlcbiAgICAgIH1cbiAgICAgIHtwcm9wcy5jdXJJbmRleCA+IDAgP1xuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbmJ1dHRvblwiIG9uQ2xpY2s9e3ByZXZpb3VzUHJvbXB0fT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dG5cIj5cbiAgICAgICAgICAgIDxwPlByZXZpb3VzPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgOlxuICAgICAgICA8ZGl2PjwvZGl2PlxuICAgICAgfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb25pdG9yaW5nXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sdW1uXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb25pdG9yaW5nX2hlYWRlclwiPlxuICAgICAgICAgICAgPGg1PkpldG9ucyBpbnZlc3RpczwvaDU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb25pdG9yaW5nX3ZhbGV1clwiPlxuICAgICAgICAgICAgPGgzPntqZXRvbnN9PC9oMz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sdW1uXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb25pdG9yaW5nX2hlYWRlclwiPlxuICAgICAgICAgICAgPGg1PsOJbGVjdHJpY2l0w6kgcHJvZHVpdGU8L2g1PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9uaXRvcmluZ192YWxldXJcIj5cbiAgICAgICAgICAgIDxoMz57bWVnYXdhdHRzfTwvaDM+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbmJ1dHRvblwiIG9uQ2xpY2s9e25leHRQcm9tcHR9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dG5cIj5cbiAgICAgICAgICA8cD5TdWl2YW50PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG5cbn1cbiIsImltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IE11bHRpcGxlQ2hvaWNlIH0gZnJvbSBcIi4vcHJvbXB0ZmlsbC9NdWx0aXBsZUNob2ljZVwiO1xuaW1wb3J0IHsgUHJpbnRQcm9tcHQgfSBmcm9tIFwiLi9wcm9tcHRmaWxsL1ByaW50UHJvbXB0XCI7XG5pbXBvcnQgeyBSZXBhcnRpdGlvbiB9IGZyb20gXCIuL3Byb21wdGZpbGwvUmVwYXJ0aXRpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFByb21wdEJveChwcm9wcyl7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcblxuICB9LCBbXSk7XG5cbiAgY29uc3QgY2hhbmdlUHJvbXB0ID0gdXNlQ2FsbGJhY2soIGFzeW5jIChuZXdWYWx1ZSkgPT4ge1xuICAgIHByb3BzLmNoYW5nZVByb21wdChuZXdWYWx1ZSk7XG4gIH0pO1xuXG4gIGNvbnN0IHJlbmRlclN3aXRjaCA9IChwYXJhbSkgPT4ge1xuICAgIHN3aXRjaChwYXJhbSl7XG4gICAgICBjYXNlICdSZXBhcnRpdGlvbicgOlxuICAgICAgICByZXR1cm4gPFJlcGFydGl0aW9uIGNob2ljZXM9e1N0cmluZyhwcm9wcy5jdXJQcm9tcHRbJ0Nob2l4J10pLnNwbGl0KCc7Jyl9IGNob2ljZXNfdmFsdWVzPXtTdHJpbmcocHJvcHMuY3VyUHJvbXB0WydDaG9peF9WYWxldXJzJ10pLnNwbGl0KCc7Jyl9IGNoYW5nZVByb21wdD17Y2hhbmdlUHJvbXB0fSBjdXJJbmRleD17cHJvcHMuY3VySW5kZXh9Lz47XG4gICAgICBjYXNlICdDYXJ0ZSc6XG4gICAgICAgIHJldHVybiA8TXVsdGlwbGVDaG9pY2UgY2hvaWNlcz17U3RyaW5nKHByb3BzLmN1clByb21wdFsnQ2hvaXgnXSkuc3BsaXQoJzsnKX0gY2hhbmdlUHJvbXB0PXtjaGFuZ2VQcm9tcHR9IGN1ckluZGV4PXtwcm9wcy5jdXJJbmRleH0vPjtcbiAgICAgIGNhc2UgJ1N1aXZpJzpcbiAgICAgICAgcmV0dXJuIDxNdWx0aXBsZUNob2ljZSBjaG9pY2VzPXtTdHJpbmcocHJvcHMuY3VyUHJvbXB0WydDaG9peCddKS5zcGxpdCgnOycpfSBjaGFuZ2VQcm9tcHQ9e2NoYW5nZVByb21wdH0gY3VySW5kZXg9e3Byb3BzLmN1ckluZGV4fS8+O1xuICAgICAgY2FzZSAnUHJpbnQnOlxuICAgICAgICByZXR1cm4gPFByaW50UHJvbXB0IG1lc3NhZ2U9e1N0cmluZyhwcm9wcy5jdXJQcm9tcHRbJ1RleHRlX1N1cHAnXSl9IGNoYW5nZVByb21wdD17Y2hhbmdlUHJvbXB0fSBjdXJJbmRleD17cHJvcHMuY3VySW5kZXh9Lz47XG4gICAgICBjYXNlICdjaG9peFJlcG9uc2UnOlxuICAgICAgICByZXR1cm4gPE11bHRpcGxlQ2hvaWNlIGNob2ljZXM9e1N0cmluZyhwcm9wcy5jdXJQcm9tcHRbJ0Nob2l4J10pLnNwbGl0KCc7Jyl9IGNob2ljZXNfdmFsdWVzPXtTdHJpbmcocHJvcHMuY3VyUHJvbXB0WydDaG9peF9WYWxldXJzJ10pLnNwbGl0KCc7Jyl9IGNoYW5nZVByb21wdD17Y2hhbmdlUHJvbXB0fSBjdXJJbmRleD17cHJvcHMuY3VySW5kZXh9Lz47XG4gICAgICBjYXNlICdDYXRhc3Ryb3BoZSc6XG4gICAgICAgIHJldHVybiA8TXVsdGlwbGVDaG9pY2UgY2hvaWNlcz17U3RyaW5nKHByb3BzLmN1clByb21wdFsnQ2hvaXgnXSkuc3BsaXQoJzsnKX0gY2hhbmdlUHJvbXB0PXtjaGFuZ2VQcm9tcHR9IGN1ckluZGV4PXtwcm9wcy5jdXJJbmRleH0vPjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiA8TXVsdGlwbGVDaG9pY2UgY2hvaWNlcz17U3RyaW5nKHByb3BzLmN1clByb21wdFsnQ2hvaXgnXSkuc3BsaXQoJzsnKX0gY2hhbmdlUHJvbXB0PXtjaGFuZ2VQcm9tcHR9IGN1ckluZGV4PXtwcm9wcy5jdXJJbmRleH0vPjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2FtZUJveFwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9tcHRCb3hcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN1cnRpdHJlXCI+XG4gICAgICAgICAgICA8aDM+e3Byb3BzLmN1clByb21wdFsnU3VqZXQnXX08L2gzPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicXVlc3Rpb25cIj5cbiAgICAgICAgICAgIDxwPntwcm9wcy5jdXJQcm9tcHRbJ1F1ZXN0aW9uJ119PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge1xuICAgICAgICAgIHJlbmRlclN3aXRjaChwcm9wcy5jdXJQcm9tcHRbJ1R5cGUnXSlcbiAgICAgICAgfVxuXG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxuXG5cbn1cbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBHYXVnZXMgfSBmcm9tIFwiLi9nYXVnZXMvR2F1Z2VzXCI7XG5pbXBvcnQgeyBJbnRyb0JveCB9IGZyb20gXCIuL2ludHJvQm94XCI7XG5pbXBvcnQgeyBQcm9tcHRCb3ggfSBmcm9tIFwiLi9Qcm9tcHRCb3hcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIE1haW5GcmFtZShwcm9wcyl7XG5cbiAgY29uc3QgW2dhbWVTdGF0dXMsIHNldFN0YXR1c10gPSB1c2VTdGF0ZSgnSURMRScpO1xuICBjb25zdCBbZ2FtZUluZGV4LCBzZXRHYW1lSW5kZXhdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IFtkb2xsYXJzLCBzZXREb2xsYXJzXSA9IHVzZVN0YXRlKDEwMCk7XG4gIGNvbnN0IFt0d2gsIHNldFR3aF0gPSB1c2VTdGF0ZSgxMDApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2NoZWNraW5nIHByb3BzIG1hcE9iajonLCBwcm9wcy5tYXBPYmopO1xuICB9LFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdnYW1lICcsIGdhbWVTdGF0dXMpO1xuXG4gIH0sIFtnYW1lU3RhdHVzXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBnZXRHYW1lUHJvbXB0KGdhbWVJbmRleCk7XG4gIH0sIFtnYW1lSW5kZXhdKTtcblxuICBjb25zdCBnYW1lU3RhcnRlZCA9ICgpID0+IHtcbiAgICBzZXRTdGF0dXMoJ1NUQVJURUQnKTtcbiAgICBzZXRHYW1lSW5kZXgoMCk7XG4gIH1cblxuICBjb25zdCBnZXRHYW1lUHJvbXB0ID0gKGdhbWVJbmRleCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdjdXJyZW50IGdhbWUgcHJvbXB0OicsIHByb3BzLmdhbWVEYXRhLmZpbHRlcihlbGVtID0+IHtyZXR1cm4gU3RyaW5nKGVsZW1bXCJJbmRleFwiXSkgPT09IFN0cmluZyhnYW1lSW5kZXgpO30pKTtcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZURvbGxhcnMgPSAoZGlmZikgPT4ge1xuICAgIHNldERvbGxhcnMoZG9sbGFycyA9PiBkb2xsYXJzICsgZGlmZik7XG4gIH1cblxuICBjb25zdCB1cGRhdGVUd2ggPSAoZGlmZikgPT4ge1xuICAgIHNldFR3aCh0d2ggPT4gdHdoICsgZGlmZik7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2FtZVNjcmVlblwiPlxuICAgICAgPEdhdWdlcyBkb2xsYXJzPXtkb2xsYXJzfSB0d2g9e3R3aH0vPlxuICAgICAge1xuICAgICAgICBnYW1lU3RhdHVzID09PSBcIklETEVcIiA/XG4gICAgICAgIDxJbnRyb0JveCBpbnRyb0VsZW09e3Byb3BzLmludHJvRWxlbX0gbWFwT2JqPXtwcm9wcy5tYXBPYmp9IGdhbWVTdGFydD17Z2FtZVN0YXJ0ZWR9IC8+XG4gICAgICAgIDpcbiAgICAgICAgZ2FtZVN0YXR1cyA9PT0gXCJFTkRcIiA/XG4gICAgICAgICAgPGRpdj48L2Rpdj5cbiAgICAgICAgICA6XG4gICAgICAgICAgPFByb21wdEJveCBjdXJJbmRleD17Z2FtZUluZGV4fSBjdXJQcm9tcHQ9e3Byb3BzLmdhbWVEYXRhW2dhbWVJbmRleF19IGNoYW5nZVByb21wdD17c2V0R2FtZUluZGV4fSB1cGRhdGVEb2xsYXJzPXt1cGRhdGVEb2xsYXJzfSB1cGRhdGVUd2g9e3VwZGF0ZVR3aH0vPlxuICAgICAgfVxuICAgIDwvZGl2PlxuXG4gIClcblxufVxuIiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XG5pbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gJ3JlYWN0LWRvbS9zZXJ2ZXInO1xuaW1wb3J0IHsgTWFpbkZyYW1lIH0gZnJvbSAnLi9jb21wb25lbnRzL21haW5mcmFtZSc7XG5pbXBvcnQgeyBvcHRpb25zRHJvcGRvd25Db25zdGFudHMsIGNvbnRlbnRIZWFkZXJDb25zdGFudHMgfSBmcm9tIFwiLi4vZ2VuZXJhdG9yL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgSW50cm9TZWN0aW9uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9JbnRyb1NlY3Rpb24nO1xuXG5leHBvcnQgY2xhc3MgRW5naW5lIHtcblxuICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIG9wdGlvbkRhdGEsIGludHJvT2JqLCBtYXBPYmosIGdhbWVEYXRhKXtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICBjb25zdCByb290RWxlbSA9IHRoaXMuY29udGFpbmVyLmFwcGVuZCgnZGl2JylcbiAgICAgIC5jbGFzc2VkKCdyb290RWxlbScsIHRydWUpO1xuICAgIHRoaXMuZW5naW5lUm9vdCA9IFJlYWN0RE9NLmNyZWF0ZVJvb3Qocm9vdEVsZW0ubm9kZSgpKTtcbiAgICB0aGlzLm9wdGlvbkRhdGEgPSBvcHRpb25EYXRhO1xuICAgIHRoaXMubWFwT2JqID0gbWFwT2JqO1xuICAgIHRoaXMuYW1vcmNlID0gaW50cm9PYmpbY29udGVudEhlYWRlckNvbnN0YW50cy50ZXh0ZV07XG4gICAgdGhpcy5nYW1lRGF0YSA9IGdhbWVEYXRhO1xuICAgIGNvbnNvbGUubG9nKCdnYW1lIERhdGEgaXMgOiAnLCB0aGlzLmdhbWVEYXRhKTtcbiAgICB0aGlzLmluaXRFbmdpbmUoKTtcbiAgfVxuXG4gIGluaXRFbmdpbmUoKXtcbiAgICBjb25zdCBpbnRyb0VsZW0gPSAoPEludHJvU2VjdGlvblxuICAgICAga2V5PXtcImdhbWVJbnRyb1wifVxuICAgICAgc2VjdGlvblR5cGU9e29wdGlvbnNEcm9wZG93bkNvbnN0YW50cy5zZWN0aW9udHlwZXMuaW50cm90aXRyZX1cbiAgICAgIG9wdGlvbkRhdGE9e3RoaXMub3B0aW9uRGF0YX1cbiAgICAgIGFtb3JjZT17dGhpcy5hbW9yY2V9XG4gICAgICBiYWNrZ3JvdW5kPXtudWxsfVxuICAgICAgY2xhc3Nlcz17XCJcIn1cbiAgICAgIC8+KTtcblxuICAgIHRoaXMuZW5naW5lUm9vdC5yZW5kZXIoPE1haW5GcmFtZSBpbnRyb0VsZW09e2ludHJvRWxlbX0gbWFwT2JqPXt0aGlzLm1hcE9ian0gZ2FtZVN0YXR1cz17dGhpcy5nYW1lU3RhdHVzfSBnYW1lRGF0YT17dGhpcy5nYW1lRGF0YX0vPik7XG4gIH1cblxufVxuIiwiLyoqXG4gKiB2aXouanNcbiAqID09PT09PT1cbiAqIEZpbGUgdXNlZCB0byBkZWZpbmUgdGhlIHZpc3VhbGl6YXRpb24gc2VjdGlvbi5cbiAqL1xuXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgeyBnZXRTdHJ1Y3R1cmUsIGdlbmVyYXRlQ2FsbGJhY2tzLCBnZXRPcHRpb25zIH0gZnJvbSAnLi9nZW5lcmF0b3Ivc3RydWN0dXJlR2VuZXJhdG9yLmpzJztcbmltcG9ydCB7IGNhbGxiYWNrcyB9IGZyb20gJy4uL2RhdGEvc3RydWN0dXJlL2NhbGxiYWNrcy5qcyc7XG5cbmltcG9ydCB7IE1hcCB9IGZyb20gJ2xlZGV2b2lyLWRhdGF2aXonO1xuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnLi9nYW1lL2VuZ2luZS5qcyc7XG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgd2lkdGg6IDUwMCxcbiAgaGVpZ2h0OiA1MDAsXG4gIG1hcmdpbjoge1xuICAgIHRvcDogMTAwLFxuICAgIHJpZ2h0OiAxMDAsXG4gICAgYm90dG9tOiAxMDAsXG4gICAgbGVmdDogMTAwXG4gIH1cbn1cbmNvbnN0IGZ1bGxXaWR0aCA9IGNvbmZpZy5tYXJnaW4ubGVmdCArIGNvbmZpZy53aWR0aCArIGNvbmZpZy5tYXJnaW4ucmlnaHQ7XG5jb25zdCBmdWxsSGVpZ2h0ID0gY29uZmlnLm1hcmdpbi50b3AgKyBjb25maWcuaGVpZ2h0ICsgY29uZmlnLm1hcmdpbi5ib3R0b207XG5jb25zdCBtYXBCb3hTdHlsZSA9IFwibWFwYm94Oi8vc3R5bGVzL2xlZGV2b2lyL2NsYWw5emxmazAwNGExNXFvaGhyN3I0OTVcIjtcblxuY29uc3QgY3VzdG9tQ2FsbGJhY2tzTmVlZGVkID0gdHJ1ZTsgLy8gU2V0IHRvIHRydWUgaWYgY3VzdG9tIGNhbGxiYWNrcyBhcmUgbmVlZGVkXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplKGNvbnRlbnREYXRhLCBvcHRpb25zKSB7XG5cbiAgcmV0dXJuIGQzLmNzdihcImh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3NwcmVhZHNoZWV0cy9kL2UvMlBBQ1gtMXZRUVozc3owcTF2blptb1lZUjVJckNmdU9OaEhjTnc1MGlEdGJnMUgybUlYOGxIREwxQlE0c0FNaTdpQXBTRTFHOVdRVFcyakhjV3Y0S1cvcHViP2dpZD0wJnNpbmdsZT10cnVlJm91dHB1dD1jc3ZcIilcbiAgICAudGhlbiggZ2FtZURhdGEgPT4ge1xuICAgICAgcmV0dXJuIGQzLmpzb24oXCIuL2RhdGEvZmlsdGVyZWRfYWNjaWRlbnRzLmdlb2pzb25cIilcbiAgICAgIC50aGVuKCBnZW9EYXRhID0+IHtcblxuICAgICAgICBjb25zdCBtYXBTb3VyY2UgPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc291cmNlTmFtZTonbWFwU291cmNlJyxcbiAgICAgICAgICAgIHNvdXJjZVR5cGU6J2dlb2pzb24nLFxuICAgICAgICAgICAgc291cmNlRGF0YTogZ2VvRGF0YSxcbiAgICAgICAgICAgIGxheWVyVHlwZTonY2lyY2xlJyxcbiAgICAgICAgICAgIGNvbG9yOicjZjU4MzY2JyxcbiAgICAgICAgICAgIG9wYWNpdHk6MC44LFxuICAgICAgICAgICAgY29vcmRzOntcbiAgICAgICAgICAgICAgY2VudGVyOiBbLTcwLjU2NiwgNTIuNDg4XSxcbiAgICAgICAgICAgICAgem9vbTogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV4dHJhQ29vcmRzOntcbiAgICAgICAgICAgICAgem9uZTE6IHtcbiAgICAgICAgICAgICAgICBjZW50ZXI6IFstNzAuNTY2LCA1Mi40ODhdLFxuICAgICAgICAgICAgICAgIHpvb206IDVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgbWFwQ29udGFpbmVyID0gZDMuc2VsZWN0KFwiLm1hcC1hcmVhXCIpO1xuXG4gICAgICAgIG1hcENvbnRhaW5lci5hcHBlbmQoJ2RpdicpXG4gICAgICAgICAgLmNsYXNzZWQoJ21hcCcsIHRydWUpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgJ3FjbWFwJylcblxuICAgICAgICBjb25zdCBtYXBPYmogPSBuZXcgTWFwKGQzLnNlbGVjdChcIiNxY21hcFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInFjbWFwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwU291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcEJveFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjpbLTcwLjU2NiwgNTIuNDg4XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IDRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICBtYXBPYmoubWFwLm9uKFwibG9hZFwiLCAoKSA9PiB7XG4gICAgICAgICAgZDMuc2VsZWN0KFwiI3FjbWFwXCIpLnNlbGVjdChcIi5tYXBib3gtaW1wcm92ZS1tYXBcIikudGV4dChcIlwiKVxuICAgICAgICAgIG1hcE9iai5pbml0TWFwU291cmNlc0FuZExheWVycygpO1xuICAgICAgICAgIGQzLnNlbGVjdChcIiNxY21hcFwiKS5zZWxlY3QoXCIubG9hZGluZ1wiKS5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgZDMuc2VsZWN0KFwiI3FjbWFwXCIpLnNlbGVjdChcIi5vcHRpb25zLWJhclwiKS5jbGFzc2VkKFwiZGlzYWJsZWRcIiwgZmFsc2UpXG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgY29uc3QgZW5naW5lID0gbmV3IEVuZ2luZShtYXBDb250YWluZXIsIGdldE9wdGlvbnMob3B0aW9ucyksIGNvbnRlbnREYXRhWzBdLCBtYXBPYmosIGdhbWVEYXRhKTtcblxuICAgICAgICBsZXQgYXV0b0NhbGxiYWNrcztcbiAgICAgICAgc2V0dXBWaXooY29udGVudERhdGEsb3B0aW9ucyk7XG4gICAgICAgIGlmKEVOVl9DT05GSUcuZG93bmxvYWRTdHJ1YyAmJiBFTlZfQ09ORklHLmF1dG9yZW5kZXIpe1xuICAgICAgICAgIGF1dG9DYWxsYmFja3MgPSBnZW5lcmF0ZUNhbGxiYWNrcyhjb250ZW50RGF0YSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICBhdXRvQ2FsbGJhY2tzID0gY2FsbGJhY2tzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoY3VzdG9tQ2FsbGJhY2tzTmVlZGVkKXtcbiAgICAgICAgICAvL2lmIGN1c3RvbSBjYWxsYmFja3MgYXJlIG5lZWRlZCwgc3VjaCBhcyBWaXN1YWxpemF0aW9uIHRyYW5zZm9ybWF0aW9ucywgaW5jbHVkZSB0aGVtIGhlcmUuXG4gICAgICAgICAgLy8gVGhpcyBhbGxvd3MgdG8gdXNlIGFueSBvYmplY3QgY3JlYXRlZCBpbiB2aXouanMgKGdyYXBocywgdG9vbHMsIGV0YykgaW4gdGhlIGNhbGxiYWNrcy5cbiAgICAgICAgICAvLyBZb3Ugd2lsbCBuZWVkIHRvIG1hbnVhbGx5IGNyZWF0ZSB0aGUgY29ycmVjdCBudW1iZXIgb2YgY2FsbGJhY2tzIHRvIG1hdGNoIHRoZSB2aXogc2VjdGlvbnNcblxuICAgICAgICAgIGxldCBjdXN0b21DYWxsYmFja3MgPSBbXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICgpID0+IHtcblxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgXVxuICAgICAgICAgIHJldHVybiBjdXN0b21DYWxsYmFja3M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF1dG9DYWxsYmFja3M7XG4gICAgICB9KTtcblxuICAgIH0pXG59XG5cbmZ1bmN0aW9uIHNldHVwVml6KGNvbnRlbnREYXRhLCBvcHRpb25zKXtcblxuICBjb25zdCBmdWxsU3RydWN0dXJlID0gZ2V0U3RydWN0dXJlKGNvbnRlbnREYXRhLCBvcHRpb25zKTtcbiAgY29uc29sZS5sb2coJ2NoZWNraW5nIHN0cnVjdHVyZTonLCBmdWxsU3RydWN0dXJlKTtcbiAgZnVsbFN0cnVjdHVyZS5tYXAoc2VjdGlvbk9iaiA9PiB7XG5cbiAgICBpZihzZWN0aW9uT2JqLnNlY3Rpb25UeXBlID09PSBcInZpei1zZWN0aW9uXCIpe1xuICAgICAgc2VjdGlvbk9iai5zdGVwcy5tYXAoKHN0ZXAsaW5kZXgpID0+IHtcbiAgICAgICAgICBpZihzdGVwLnZpc3VhbCAhPT0gXCJcIil7XG4gICAgICAgICAgICBpZihpbmRleCA9PT0gMCl7XG4gICAgICAgICAgICAgIGQzLnNlbGVjdChgIyR7c2VjdGlvbk9iai5rZXl9XyR7aW5kZXh9YCkuc3R5bGUoJ29wYWNpdHknLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgIGQzLnNlbGVjdChgIyR7c2VjdGlvbk9iai5rZXl9XyR7aW5kZXh9YCkuc3R5bGUoJ29wYWNpdHknLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG59KTtcbn1cblxuZnVuY3Rpb24gc2V0dXBWaWRlb3MoKXtcbiAgbGV0IHZpZGVvcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJ2aWRlb1wiKTtcbiAgICB2aWRlb3MuZm9yRWFjaCgodmlkZW8pID0+IHtcbiAgICAgIC8vIFdlIGNhbiBvbmx5IGNvbnRyb2wgcGxheWJhY2sgd2l0aG91dCBpbnN0ZXJhY3Rpb24gaWYgdmlkZW8gaXMgbXV0ZVxuICAgICAgdmlkZW8ubXV0ZWQgPSB0cnVlO1xuICAgICAgdmlkZW8uY3VycmVudFRpbWUgPSAwO1xuICAgICAgLy8gUGxheSBpcyBhIHByb21pc2Ugc28gd2UgbmVlZCB0byBjaGVjayB3ZSBoYXZlIGl0XG4gICAgICBsZXQgcGxheVByb21pc2UgPSB2aWRlby5wbGF5KCk7XG4gICAgICBpZiAocGxheVByb21pc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHBsYXlQcm9taXNlLnRoZW4oKF8pID0+IHtcbiAgICAgICAgICAgICAgbGV0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgICAgICAgICAgICAgICAgKGVudHJpZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LmludGVyc2VjdGlvblJhdGlvICE9PSAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdmlkZW8ucGF1c2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW8ucGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvLmN1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2aWRlby5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvLnBsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHsgdGhyZXNob2xkOiAwLjIgfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHZpZGVvKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbn1cbiIsIi8qKlxyXG4gKiBzY3JvbGxlci5qc1xyXG4gKiA9PT09PT09PT09PVxyXG4gKiBEZWZpbmVzIHRoZSBsb2dpYyB1c2VkIGJ5IHRoZSBzY3JvbGxlci4gVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCBleHRlcm5hbCBkZXBlbmRlbmNpZXMgYW5kIHVzZXMgbmF0aXZlIGZ1bmN0aW9uc1xyXG4gKiBvZiB0aGUgYnJvd3Nlci5cclxuICpcclxuICogLyFcXCBQTEVBU0UsIERPIE5PVCBNT0RJRlkgVEhJUyBGSUxFLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEFudG9pbmUgQsOpbGFuZCA8YWJlbGFuZEBsZWRldm9pci5jb20+XHJcbiAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgYSBzdGVwIGFzc29jaWF0ZWQgd2l0aCBhIHNwZWNpZmljIHZpc3VhbGl6YXRpb24uIEEgc3RlcCBpcyBhY3RpdmF0ZWQgb3IgZGVhY3RpdmF0ZWQgYmFzZWQgb24gdGhlIHNjcm9sbFxyXG4gKiBwb3NpdGlvbi4gVGhpcyBjbGFzcyBpcyB1c2VkIGJ5IHRoZSBzY3JvbGxlciBmdW5jdGlvbi5cclxuICovXHJcbmNsYXNzIFNjcm9sbGVyU3RlcCB7XHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgU2Nyb2xsZXJTdGVwLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGVsICAgICAgICAgIFRoZSBuYXRpdmUgZWxlbWVudCB0aGF0IHJlcHJlc2VudHMgdGhlIHN0ZXAgaW4gdGhlIEhUTUwgZG9jdW1lbnQuXHJcbiAgICogQHBhcmFtIGluZGV4ICAgICAgIFRoZSBpbmRleCBvZiB0aGUgc3RlcC5cclxuICAgKiBAcGFyYW0gY2FsbGJhY2sgICAgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgc3RlcCBpcyBhY3RpdmF0ZS5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihlbCwgaW5kZXgsIGNhbGxiYWNrKSB7XHJcbiAgICB0aGlzLmVsID0gZWw7XHJcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICB0aGlzLl9pc0FjdGl2YXRlID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBY3RpdmF0ZXMgdGhlIGN1cnJlbnQgc3RlcC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBzY3JvbGxEaXJlY3Rpb24gICBUaGUgY3VycmVudCBzY3JvbGwgZGlyZWN0aW9uLlxyXG4gICAqL1xyXG4gIGFjdGl2YXRlKHNjcm9sbERpcmVjdGlvbikge1xyXG4gICAgaWYgKHRoaXMuX2lzQWN0aXZhdGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5faXNBY3RpdmF0ZSA9IHRydWU7XHJcbiAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgdGhpcy5jYWxsYmFjayhzY3JvbGxEaXJlY3Rpb24pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGVhY3RpdmF0ZXMgdGhlIGN1cnJlbnQgc3RlcC5cclxuICAgKi9cclxuICBkZWFjdGl2YXRlKCkge1xyXG4gICAgaWYgKCF0aGlzLl9pc0FjdGl2YXRlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuX2lzQWN0aXZhdGUgPSBmYWxzZTtcclxuICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogRGVmaW5lcyB0aGUgc2Nyb2xsIGRpcmVjdGlvbnMuXHJcbiAqXHJcbiAqIEB0eXBlIHt7dXA6IHN0cmluZywgZG93bjogc3RyaW5nfX1cclxuICovXHJcbmV4cG9ydCBjb25zdCBzY3JvbGxEaXJlY3Rpb25zID0ge1xyXG4gIHVwOiAndXAnLFxyXG4gIGRvd246ICdkb3duJ1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgdGhlIHNjcm9sbGVyIHRvIHVzZSB3aXRoIHRoZSBMZSBEZXZvaXIncyBzY3JvbGx5dGVsbGluZyBhcnRpY2xlcy4gUGxlYXNlIHNlZSBcIlJFQURNRS5tZFwiXHJcbiAqIHRvIGtub3cgaG93IHRvIHVzZSBpdC5cclxuICpcclxuICogLyFcXCBCZSBzdXJlIHRvIHVzZSB0aGUgZ29vZCBDU1MgY2xhc3MgbmFtZXMgaW4geW91ciBIVE1MIGZpbGUgYmVmb3JlIHRvIHVzZSB0aGUgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSBjYWxsYmFja3MgICBBIG11bHRpLWRpbWVuc2lvbmFsIGFycmF5IG9mIGNhbGxiYWNrcyB0byB1c2Ugd2l0aCBlYWNoIHN0ZXAuXHJcbiAqIEByZXR1cm5zIHsqfSAgICAgICBUaGUgaW5zdGFuY2Ugb2YgdGhlIHNjcm9sbGVyLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbGVyKGNhbGxiYWNrcykge1xyXG4gIGxldCBfb2Zmc2V0VG9wID0gMDtcclxuICBsZXQgX29mZnNldEJvdHRvbSA9IDA7XHJcblxyXG4gIGxldCBpbm5lckhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICBsZXQgaXNJbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gIGxldCBsYXN0U2Nyb2xsID0gMDtcclxuICBsZXQgc3RlcHMgPSBbXTtcclxuICBsZXQgdml6ID0gW107XHJcbiAgbGV0IHZpc2libGVTdGVwcyA9IFtdO1xyXG4gIFxyXG4gIGNvbnN0IGFydGljbGVSZW1pbmRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnRpY2xlLXJlbWluZGVyJyk7XHJcbiAgY29uc3Qgc2Nyb2xsUHJvZ3Jlc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkZXIgPiAucHJvZ3Jlc3MnKTtcclxuICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnRyby1zZWN0aW9uIGgxJyk7XHJcblxyXG4gIGNvbnN0IHZpelNlY3Rpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnZpei1zZWN0aW9uJyk7XHJcbiAgaWYgKHZpelNlY3Rpb25zLmxlbmd0aCAhPT0gY2FsbGJhY2tzLmxlbmd0aCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgbnVtYmVyIG9mIHZpeiBzZWN0aW9ucyAoJHt2aXpTZWN0aW9ucy5sZW5ndGh9KSBtaXNtYXRjaCB3aXRoIHRoZSBsZW5ndGggb2YgdGhlIGZpcnN0IGAgK1xyXG4gICAgICBgZGltZW5zaW9uIG9mIHRoZSBjYWxsYmFja3MgYXJyYXkgKCR7Y2FsbGJhY2tzLmxlbmd0aH0pLiBQbGVhc2UsIGJlIHN1cmUgdGhhdCB0aGUgdHdvIGVsZW1lbnRzIGAgK1xyXG4gICAgICBgaGF2ZSB0aGUgc2FtZSBzaXplLmApO1xyXG4gIH1cclxuICB2aXpTZWN0aW9ucy5mb3JFYWNoKCh2aXpTZWN0aW9uLCBpKSA9PiB7XHJcbiAgICBjb25zdCBzZWN0aW9ucyA9IFsuLi52aXpTZWN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlY3Rpb24nKV07XHJcbiAgICBpZiAoc2VjdGlvbnMubGVuZ3RoICE9PSBjYWxsYmFja3NbaV0ubGVuZ3RoKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIG51bWJlciBvZiBzdGVwcyAoJHtzZWN0aW9ucy5sZW5ndGh9KSBpbiB0aGUgdml6IHNlY3Rpb24gIyR7aSArIDF9IG1pc21hdGNoIHdpdGggdGhlIGAgK1xyXG4gICAgICAgIGBudW1iZXIgb2YgY2FsbGJhY2tzIHNwZWNpZmllZCAoJHtjYWxsYmFja3NbaV0ubGVuZ3RofSkgYXQgdGhlIGluZGV4IFwiJHtpfVwiLiBQbGVhc2UsIGJlIHN1cmUgdGhhdCB0aGUgdHdvIGAgK1xyXG4gICAgICAgIGBlbGVtZW50cyBoYXZlIHRoZSBzYW1lIHNpemUuYCk7XHJcbiAgICB9XHJcbiAgICBzdGVwcyA9IHN0ZXBzLmNvbmNhdChzZWN0aW9ucy5tYXAoKGUsIGopID0+IG5ldyBTY3JvbGxlclN0ZXAoZSwgYCR7aX0tJHtqfWAsIGNhbGxiYWNrc1tpXVtqXSkpKTtcclxuICAgIHZpeiA9IHZpei5jb25jYXQodml6LCB2aXpTZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy52aXogPiAqJykpO1xyXG4gIH0pO1xyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGVzIHRoZSBkaXNwbGF5IGJhc2VkIG9uIHNjcm9sbGJhciBwb3NpdGlvbi5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGNvbnN0IF91cGRhdGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjdXJyZW50U2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICBzdGVwcy5mb3JFYWNoKHN0ZXAgPT4ge1xyXG4gICAgICAvLyBDaGVjayBpZiB0aGUgY3VycmVudCBzdGVwIGlzIGluIHRoZSB2aWV3cG9ydC5cclxuICAgICAgY29uc3QgYm91bmRpbmdSZWN0ID0gc3RlcC5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgaWYgKGlubmVySGVpZ2h0IC0gYm91bmRpbmdSZWN0LnRvcCAtIF9vZmZzZXRCb3R0b20gPiAwXHJcbiAgICAgICAgJiYgYm91bmRpbmdSZWN0LnRvcCArIGJvdW5kaW5nUmVjdC5oZWlnaHQgLSBfb2Zmc2V0VG9wID4gMCkge1xyXG4gICAgICAgIHZpc2libGVTdGVwcy5wdXNoKHN0ZXApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0ZXAuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBEaXNwbGF5IHRoZSB0aXRsZSBhcyBhIHJlbWluZGVyIHdoZW4gdGhlIG1haW4gYXJ0aWNsZSB0aXRsZSBpcyBoaWRkZW4uXHJcbiAgICBjb25zdCBpc0FydGljbGVSZW1pbmRlckRpc3BsYXllZCA9IHRpdGxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSA8PSAwO1xyXG4gICAgY29uc3QgaXNBcnRpY2xlUmVtaW5kZXJJc1Zpc2libGUgPSBhcnRpY2xlUmVtaW5kZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCd2aXNpYmxlJyk7XHJcbiAgICBpZiAoaXNBcnRpY2xlUmVtaW5kZXJEaXNwbGF5ZWQgJiYgIWlzQXJ0aWNsZVJlbWluZGVySXNWaXNpYmxlKSB7XHJcbiAgICAgIGFydGljbGVSZW1pbmRlci5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJylcclxuICAgIH0gZWxzZSBpZiAoIWlzQXJ0aWNsZVJlbWluZGVyRGlzcGxheWVkICYmIGlzQXJ0aWNsZVJlbWluZGVySXNWaXNpYmxlKSB7XHJcbiAgICAgIGFydGljbGVSZW1pbmRlci5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJylcclxuICAgIH1cclxuXHJcbiAgICAvLyBGb3IgdGhlIHZpc2libGUgc3RlcHMsIGNob29zZSB0aGUgZ29vZCBvbmUgYmFzZWQgb24gdGhlIHNjcm9sbCBkaXJlY3Rpb24uXHJcbiAgICB2aXNpYmxlU3RlcHMuZm9yRWFjaCgoc2VjdGlvbiwgaSkgPT4ge1xyXG4gICAgICBpZiAoY3VycmVudFNjcm9sbCA+PSBsYXN0U2Nyb2xsKSB7IC8vIFNjcm9sbCBkb3duICjihpMpXHJcbiAgICAgICAgaWYgKGkgPT09IHZpc2libGVTdGVwcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICBzZWN0aW9uLmFjdGl2YXRlKHNjcm9sbERpcmVjdGlvbnMuZG93bik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNlY3Rpb24uZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHsgLy8gU2Nyb2xsIHVwICjihpEpXHJcbiAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgIHNlY3Rpb24uYWN0aXZhdGUoc2Nyb2xsRGlyZWN0aW9ucy51cCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNlY3Rpb24uZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBfdXBkYXRlU2Nyb2xsUHJvZ3Jlc3MoKTtcclxuXHJcbiAgICAvLyBSZXNldCB0aGUgdmFyaWFibGVzIGZvciB0aGUgbmV4dCBmdW5jdGlvbiBjYWxsLlxyXG4gICAgdmlzaWJsZVN0ZXBzID0gW107XHJcbiAgICBsYXN0U2Nyb2xsID0gY3VycmVudFNjcm9sbDtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGVzIHRoZSBzY3JvbGwgcHJvZ3Jlc3Npb24gaW5kaWNhdG9yLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgY29uc3QgX3VwZGF0ZVNjcm9sbFByb2dyZXNzID0gKCkgPT4ge1xyXG4gICAgY29uc3Qgd2luU2Nyb2xsID0gZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgIGNvbnN0IGhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG4gICAgY29uc3Qgc2Nyb2xsZWQgPSAod2luU2Nyb2xsIC8gaGVpZ2h0KSAqIDEwMDtcclxuICAgIHNjcm9sbFByb2dyZXNzLnN0eWxlLndpZHRoID0gc2Nyb2xsZWQgKyAnJSc7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgcHVibGljSW50ZXJmYWNlID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgc2Nyb2xsZXIuIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBjYW4gYmUgb25seSBjYWxsZWQgb25jZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIGluc3RhbmNlIG9mIHRoZSBzY3JvbGxlci5cclxuICAgICAqL1xyXG4gICAgaW5pdGlhbGl6ZTogKCkgPT4ge1xyXG4gICAgICBpZiAoaXNJbml0aWFsaXplZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHNjcm9sbGVyIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWQuJyk7XHJcbiAgICAgIH1cclxuICAgICAgaXNJbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBfdXBkYXRlKTtcclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcclxuICAgICAgICBpbm5lckhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICBfdXBkYXRlU2Nyb2xsUHJvZ3Jlc3MoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGlmICgod2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApID4gMCkge1xyXG4gICAgICAgIF91cGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgICBfdXBkYXRlU2Nyb2xsUHJvZ3Jlc3MoKTtcclxuICAgICAgcmV0dXJuIHB1YmxpY0ludGVyZmFjZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRvcCBvZmZzZXQgdG8gdXNlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBvZmZzZXRUb3BcclxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgaW5zdGFuY2Ugb2YgdGhlIHNjcm9sbGVyLlxyXG4gICAgICovXHJcbiAgICBvZmZzZXRUb3A6IG9mZnNldFRvcCA9PiB7XHJcbiAgICAgIGlmIChvZmZzZXRUb3AgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBfb2Zmc2V0VG9wO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihvZmZzZXRUb3ApKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgb2Zmc2V0IG11c3QgYmUgYW4gaW50ZWdlciBudW1iZXIuJyk7XHJcbiAgICAgIH1cclxuICAgICAgX29mZnNldFRvcCA9IG9mZnNldFRvcDtcclxuICAgICAgcmV0dXJuIHB1YmxpY0ludGVyZmFjZTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBib3R0b20gb2Zmc2V0IHRvIHVzZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gb2Zmc2V0Qm90dG9tXHJcbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIGluc3RhbmNlIG9mIHRoZSBzY3JvbGxlci5cclxuICAgICAqL1xyXG4gICAgb2Zmc2V0Qm90dG9tOiBvZmZzZXRCb3R0b20gPT4ge1xyXG4gICAgICBpZiAob2Zmc2V0Qm90dG9tID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gX29mZnNldEJvdHRvbTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIob2Zmc2V0Qm90dG9tKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIG9mZnNldCBtdXN0IGJlIGFuIGludGVnZXIgbnVtYmVyLicpO1xyXG4gICAgICB9XHJcbiAgICAgIF9vZmZzZXRCb3R0b20gPSBvZmZzZXRCb3R0b207XHJcbiAgICAgIHJldHVybiBwdWJsaWNJbnRlcmZhY2U7XHJcbiAgICB9XHJcbiAgfTtcclxuICByZXR1cm4gcHVibGljSW50ZXJmYWNlO1xyXG59XHJcbiIsIlxyXG5pbXBvcnQgeyBpbml0aWFsaXplIGFzIHYxIH0gZnJvbSAnLi4vdml6JztcclxuaW1wb3J0IHsgc2Nyb2xsZXIgfSBmcm9tICcuLi9zY3JvbGxlcic7XHJcbmltcG9ydCBMYXp5TG9hZCBmcm9tIFwidmFuaWxsYS1sYXp5bG9hZFwiO1xyXG5jb25zdCBoZWFkZXJIZWlnaHQgPSA0MDtcclxuaW1wb3J0IHN0aWNreUJpdHMgZnJvbSAnc3RpY2t5Yml0cydcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0U2Nyb2xsZXIoY29udGVudERhdGEsIHBhcmFtc0RhdGEpe1xyXG5cclxuICAgIGxldCBlbGVtZW50cyA9IFtdO1xyXG4gICAgWycudml6JywgJy5mdWxsLXBhZ2Utc2VjdGlvbiA+IGltZycsICcuZnVsbC1wYWdlLXNlY3Rpb24gPiB2aWRlbyddLmZvckVhY2goc2VsZWN0b3IgPT4ge1xyXG4gICAgICBlbGVtZW50cyA9IGVsZW1lbnRzLmNvbmNhdChBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKSk7XHJcbiAgICB9KTtcclxuICAgIHN0aWNreUJpdHMoZWxlbWVudHMsIHsgc3RpY2t5Qml0U3RpY2t5T2Zmc2V0OiBoZWFkZXJIZWlnaHQgfSk7XHJcbiAgXHJcbiAgICBjb25zdCBsbCA9IG5ldyBMYXp5TG9hZCh7XHJcbiAgICAgIGVsZW1lbnRzX3NlbGVjdG9yOiBcIi5sYXp5XCIsXHJcbiAgICAgIHRocmVzaG9sZDogNTAwXHJcbiAgICB9KTtcclxuICBcclxuICAgIFByb21pc2UuYWxsKFt2MShjb250ZW50RGF0YSwgcGFyYW1zRGF0YSldKS50aGVuKChbY2FsbGJhY2tzVjFdKSA9PiAge1xyXG4gICAgICBzY3JvbGxlcihjYWxsYmFja3NWMSlcclxuICAgICAgICAub2Zmc2V0VG9wKGhlYWRlckhlaWdodClcclxuICAgICAgICAub2Zmc2V0Qm90dG9tKDApXHJcbiAgICAgICAgLmluaXRpYWxpemUoKTtcclxuICAgIH0pO1xyXG4gIH0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBJbnRyb1NlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9JbnRyb1NlY3Rpb24uanNcIjtcbmltcG9ydCB7IFRleHRTZWN0aW9uIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvVGV4dFNlY3Rpb24uanNcIjtcbmltcG9ydCB7IFZpelNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9WaXpTZWN0aW9uLmpzXCI7XG5pbXBvcnQgeyBGdWxsUGFnZVNlY3Rpb24gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9GdWxsUGFnZVNlY3Rpb24uanNcIjtcbmltcG9ydCB7IG9wdGlvbnNEcm9wZG93bkNvbnN0YW50cyB9IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHBhcnNlIGZyb20gXCJodG1sLXJlYWN0LXBhcnNlclwiO1xuaW1wb3J0IHsgZ2V0U3RydWN0dXJlIH0gZnJvbSBcIi4vc3RydWN0dXJlR2VuZXJhdG9yLmpzXCI7XG5pbXBvcnQgeyBpbml0U2Nyb2xsZXIgfSBmcm9tIFwiLi9pbml0U2Nyb2xsZXIuanNcIjtcblxuXG4vKipcbiAqIFRha2UgcHJvcHMgKGFydGljbGUgc3RydWN0dXJlIGFzIENTViBhbmQgcGFyYW1zKSBhbmQgdHJhbnNmb3JtIGl0IGFzIEhUTUwgYXJjaGl0ZWN0dXJlXG4gKiBAcGFyYW0gIHtPYmplY3R9IGNvbnRlbnREYXRhIEFydGljbGUncyBDU1Ygc3RydWN0dXJlXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zRGF0YSBBcnRpY2xlIHBhcmFtZXRlcnNcbiAqIEByZXR1cm4ge09iamVjdH0gT2JqIEhUTUwgY29kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gUmVuZGVyU3RydWN0dXJlKHByb3BzKXtcbiAgICBpZihwcm9wcy5yZW5kZXJlZCl7XG4gICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XG5cbiAgICAgICAgICAgIGluaXRTY3JvbGxlcihwcm9wcy5jb250ZW50RGF0YSwgcHJvcHMucGFyYW1zRGF0YSk7XG5cbiAgICAgICAgfSwgW10pO1xuICAgIH1cblxuICAgIHJldHVybiByZW5kZXJEYXRhKGdldFN0cnVjdHVyZShwcm9wcy5jb250ZW50RGF0YSwgcHJvcHMucGFyYW1zRGF0YSkpO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJEYXRhKHN0cnVjdHVyZURhdGEpe1xuXG4gICAgbGV0IHJlbmRlcmVkRGF0YSA9IHt9O1xuXG4gICAgT2JqZWN0LmtleXMoc3RydWN0dXJlRGF0YSkubWFwKChzZWN0aW9uS2V5LGluZGV4KSA9PiB7XG4gICAgICAgIGxldCBjdXJTZWN0aW9uID0gc3RydWN0dXJlRGF0YVtzZWN0aW9uS2V5XTtcbiAgICAgICAgaWYoY3VyU2VjdGlvbi5zZWN0aW9uVHlwZSA9PT0gb3B0aW9uc0Ryb3Bkb3duQ29uc3RhbnRzLnNlY3Rpb250eXBlcy5pbnRyb3RpdHJlKXtcbiAgICAgICAgICAgIHJlbmRlcmVkRGF0YVtzZWN0aW9uS2V5XSA9ICgoPEludHJvU2VjdGlvbiBrZXk9e2N1clNlY3Rpb24ua2V5fSBzZWN0aW9uVHlwZT17Y3VyU2VjdGlvbi5zZWN0aW9uVHlwZX0gb3B0aW9uRGF0YT17Y3VyU2VjdGlvbi5vcHRpb25EYXRhfSBhbW9yY2U9e3BhcnNlKGN1clNlY3Rpb24uYW1vcmNlKX0gYmFja2dyb3VuZD17Y3VyU2VjdGlvbi5iYWNrZ3JvdW5kfSBjbGFzc2VzPXtjdXJTZWN0aW9uLmNsYXNzZXN9IC8+KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihjdXJTZWN0aW9uLnNlY3Rpb25UeXBlID09PSBvcHRpb25zRHJvcGRvd25Db25zdGFudHMuc2VjdGlvbnR5cGVzLnRleHRlY2xhc3NpcXVlKXtcblxuICAgICAgICAgICAgcmVuZGVyZWREYXRhW3NlY3Rpb25LZXldID0gKCg8VGV4dFNlY3Rpb24ga2V5PXtjdXJTZWN0aW9uLmtleX0gaWQ9e2N1clNlY3Rpb24ua2V5fSBzZWN0aW9uVHlwZT17Y3VyU2VjdGlvbi5zZWN0aW9uVHlwZX0gdGV4dHM9e2N1clNlY3Rpb24udGV4dHN9IGJhY2tncm91bmQ9e2N1clNlY3Rpb24uYmFja2dyb3VuZH0gY2xhc3Nlcz17Y3VyU2VjdGlvbi5jbGFzc2VzfSB2aXN1ZWxjbGFzc2VzPXtjdXJTZWN0aW9uLnZpc3VlbGNsYXNzZXN9IHZpc3VhbD17Y3VyU2VjdGlvbi52aXN1YWx9IGZpbGVuYW1lPXtjdXJTZWN0aW9uLmZpbGVuYW1lfS8+KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihjdXJTZWN0aW9uLnNlY3Rpb25UeXBlID09PSBvcHRpb25zRHJvcGRvd25Db25zdGFudHMuc2VjdGlvbnR5cGVzLnBsZWluZXBhZ2V0aXRyZSl7XG4gICAgICAgICAgICByZW5kZXJlZERhdGFbc2VjdGlvbktleV0gPSAoKDxGdWxsUGFnZVNlY3Rpb24ga2V5PXtjdXJTZWN0aW9uLmtleX0gaWQ9e2N1clNlY3Rpb24ua2V5fSBzZWN0aW9uVHlwZT17Y3VyU2VjdGlvbi5zZWN0aW9uVHlwZX0gYmFja2dyb3VuZD17Y3VyU2VjdGlvbi5iYWNrZ3JvdW5kfSBjbGFzc2VzPXtjdXJTZWN0aW9uLmNsYXNzZXN9IHZpc3VlbGNsYXNzZXM9e2N1clNlY3Rpb24udmlzdWVsY2xhc3Nlc30gdmlzdWFsPXtjdXJTZWN0aW9uLnZpc3VhbH0gbWFpblRpdGxlPXtjdXJTZWN0aW9uLnRleHRzLm1haW5UaXRsZX0gc3ViVGl0bGU9e2N1clNlY3Rpb24udGV4dHMuc3ViVGl0bGV9IGZpbGVuYW1lPXtjdXJTZWN0aW9uLmZpbGVuYW1lfSAvPikpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihjdXJTZWN0aW9uLnNlY3Rpb25UeXBlID09PSBvcHRpb25zRHJvcGRvd25Db25zdGFudHMuc2VjdGlvbnR5cGVzLnZpenNlY3Rpb24pe1xuICAgICAgICAgICAgcmVuZGVyZWREYXRhW3NlY3Rpb25LZXldID0gKDxWaXpTZWN0aW9uIGtleT17Y3VyU2VjdGlvbi5rZXl9IGxpc3RJRD17Y3VyU2VjdGlvbi5saXN0SUR9IHN0ZXBzPXtjdXJTZWN0aW9uLnN0ZXBzfSBjbGFzc2VkPXtjdXJTZWN0aW9uLmNsYXNzZWR9IG1lZGlhSW5mbz17Y3VyU2VjdGlvbi5tZWRpYUluZm99IGJhY2tncm91bmQ9e2N1clNlY3Rpb24uYmFja2dyb3VuZH0vPik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZW5kZXJlZERhdGEpO1xufVxuIiwiLyoqXG4gKiBhcHAuanNcbiAqID09PT09PVxuICogTWFpbiBmaWxlIG9mIHRoZSBhcHBsaWNhdGlvbi4gVGhpcyBmaWxlIGlzIHVzZWQgdG8gaW5pdGlhbGl6ZSB0aGUgc2Nyb2xsZXIgYW5kIGltcG9ydHMgdGhlIHZpc3VhbGl6YXRpb25zIHVzZWQuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHN0cnVjdHVyZSBmcm9tICcuLi9kYXRhL3N0cnVjdHVyZS9zdHJ1Y3R1cmUuanNvbic7XG5cbmlmKCFFTlZfQ09ORklHLmRvd25sb2FkU3RydWMpe1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcm9vdCcpLmlubmVySFRNTCA9IChzdHJ1Y3R1cmUuaHRtbHN0cnVjKTtcbn1cblxuaW1wb3J0ICcuLi9hc3NldHMvc3R5bGVzL3N0eWxlLnNjc3MnO1xuaW1wb3J0IHtnb29nbGVfY29uZmlnfSBmcm9tIFwiLi4vZGF0YS9nb29nbGVfY29uZmlnXCI7XG5pbXBvcnQgeyBSZW5kZXJTdHJ1Y3R1cmUgfSBmcm9tICcuL2dlbmVyYXRvci9SZW5kZXJTdHJ1Y3R1cmUnO1xuaW1wb3J0IHsgaW5pdFNjcm9sbGVyIH0gZnJvbSAnLi9nZW5lcmF0b3IvaW5pdFNjcm9sbGVyJztcbmltcG9ydCB7IGdlbmVyYXRlQ2FsbGJhY2tzIH0gZnJvbSAnLi9nZW5lcmF0b3Ivc3RydWN0dXJlR2VuZXJhdG9yJztcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuXG5pZihFTlZfQ09ORklHLmRvd25sb2FkU3RydWMpe1xuICBQcm9taXNlLmFsbChbaW1wb3J0KFwicmVhY3QtZG9tL2NsaWVudFwiKSwgaW1wb3J0KFwicmVhY3QtZG9tL3NlcnZlclwiKSwgaW1wb3J0KFwicmVhY3RcIildKVxuICAgIC50aGVuKHBhY2thZ2VzID0+IHtcbiAgICAgIGNvbnN0IFJlYWN0RE9NID0gcGFja2FnZXNbMF07XG4gICAgICBjb25zdCBSZWFjdERPTVNlcnZlciA9IHBhY2thZ2VzWzFdO1xuICAgICAgY29uc3QgUmVhY3QgPSBwYWNrYWdlc1syXTtcbiAgICAgIGFkZE5vdFB1Ymxpc2hlZCgpO1xuICAgICAgaWYoRU5WX0NPTkZJRy5hdXRvcmVuZGVyKXtcbiAgICAgICAgZDMuY3N2KGdvb2dsZV9jb25maWcuY29udGVudFVSTCkudGhlbiggY29udGVudERhdGEgPT4ge1xuICAgICAgICAgIGQzLmNzdihnb29nbGVfY29uZmlnLnBhcmFtc1VSTCkudGhlbiggcGFyYW1zRGF0YSA9PiB7XG4gICAgICAgICAgICBjb25zdCByb290ID0gUmVhY3RET00uY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikpO1xuICAgICAgICAgICAgcm9vdC5yZW5kZXIoXG4gICAgICAgICAgICAgIDxSZW5kZXJTdHJ1Y3R1cmUgY29udGVudERhdGE9e2NvbnRlbnREYXRhfSBwYXJhbXNEYXRhPXtwYXJhbXNEYXRhfSByZW5kZXJlZD17dHJ1ZX0vPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGFkZEZvb3RlcigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIGQzLmNzdihnb29nbGVfY29uZmlnLmNvbnRlbnRVUkwpLnRoZW4oIGNvbnRlbnREYXRhID0+IHtcbiAgICAgICAgICBkMy5jc3YoZ29vZ2xlX2NvbmZpZy5wYXJhbXNVUkwpLnRoZW4oIHBhcmFtc0RhdGEgPT4ge1xuICAgICAgICAgICAgZDMuYmxvYihnb29nbGVfY29uZmlnLmNvbnRlbnRVUkwpLnRoZW4oY29udGVudEJsb2IgPT4ge1xuICAgICAgICAgICAgICBkMy5ibG9iKGdvb2dsZV9jb25maWcucGFyYW1zVVJMKS50aGVuKHBhcmFtc0Jsb2IgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZFN0cnVjID0gUmVuZGVyU3RydWN0dXJlKHtjb250ZW50RGF0YTogY29udGVudERhdGEsIHBhcmFtc0RhdGE6IHBhcmFtc0RhdGEsIHJlbmRlcjogZmFsc2V9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBodG1sU3RydWMgPSBSZWFjdERPTVNlcnZlci5yZW5kZXJUb1N0YXRpY01hcmt1cChnZW5lcmF0ZWRTdHJ1Yyk7XG4gICAgICAgICAgICAgICAgd3JpdGVIVE1MZmlsZShodG1sU3RydWMsIGNvbnRlbnRCbG9iLCBwYXJhbXNCbG9iKTtcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUNhbGxiYWNrcyhjb250ZW50RGF0YSxwYXJhbXNEYXRhKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KVxufVxuZWxzZXtcbiAgaWYoRU5WX0NPTkZJRy5hdXRvcmVuZGVyKXtcbiAgICBQcm9taXNlLmFsbChbaW1wb3J0KFwicmVhY3QtZG9tL2NsaWVudFwiKSwgaW1wb3J0KFwicmVhY3RcIildKVxuICAgIC50aGVuKHBhY2thZ2VzID0+IHtcbiAgICAgIGNvbnN0IFJlYWN0RE9NID0gcGFja2FnZXNbMF07XG4gICAgICBjb25zdCBSZWFjdCA9IHBhY2thZ2VzWzFdO1xuICAgICAgZDMuY3N2KGdvb2dsZV9jb25maWcuY29udGVudFVSTCkudGhlbiggY29udGVudERhdGEgPT4ge1xuICAgICAgICBkMy5jc3YoZ29vZ2xlX2NvbmZpZy5wYXJhbXNVUkwpLnRoZW4oIHBhcmFtc0RhdGEgPT4ge1xuICAgICAgICAgIGNvbnN0IHJvb3QgPSBSZWFjdERPTS5jcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSk7XG4gICAgICAgICAgcm9vdC5yZW5kZXIoXG4gICAgICAgICAgICA8UmVuZGVyU3RydWN0dXJlIGNvbnRlbnREYXRhPXtjb250ZW50RGF0YX0gcGFyYW1zRGF0YT17cGFyYW1zRGF0YX0gcmVuZGVyZWQ9e3RydWV9Lz5cbiAgICAgICAgICApO1xuICAgICAgICAgIGFkZEZvb3RlcigpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGVsc2V7XG4gICAgZDMuY3N2KGdvb2dsZV9jb25maWcubG9jYWxDb250ZW50VVJMKS50aGVuKCBjb250ZW50RGF0YSA9PiB7XG4gICAgICBkMy5jc3YoZ29vZ2xlX2NvbmZpZy5sb2NhbFBhcmFtc1VSTCkudGhlbiggcGFyYW1zRGF0YSA9PiB7XG4gICAgICAgIGluaXRTY3JvbGxlcihjb250ZW50RGF0YSwgcGFyYW1zRGF0YSk7XG4gICAgICAgIGFkZEZvb3RlcigpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JpdGVIVE1MZmlsZShIVE1MU3RydWN0LCBjb250ZW50RGF0YSwgcGFyYW1zRGF0YSl7XG4gIGxldCBibG9iID0gbmV3IEJsb2IoW0pTT04uc3RyaW5naWZ5KHtodG1sc3RydWM6IGAke0hUTUxTdHJ1Y3R9YH0sIG51bGwsIDIpXSwge3R5cGU6IFwidGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04XCJ9KTtcbiAgbGV0IGNvbnRlbnRDU1YgPSBuZXcgQmxvYihbY29udGVudERhdGFdLCB7dHlwZTogXCJ0ZXh0L2NzdjtjaGFyc2V0PXV0Zi04XCJ9KTtcbiAgbGV0IHBhcmFtc0NTViA9IG5ldyBCbG9iKFtwYXJhbXNEYXRhXSwge3R5cGU6IFwidGV4dC9jc3Y7Y2hhcnNldD11dGYtOFwifSk7XG5cbiAgc2F2ZUFzKGNvbnRlbnRDU1YsIFwiY29udGVudERhdGEuY3N2XCIpO1xuICBzYXZlQXMocGFyYW1zQ1NWLCBcInBhcmFtc0RhdGEuY3N2XCIpO1xuICBzYXZlQXMoYmxvYiwgXCJzdHJ1Y3R1cmUuanNvblwiKTtcbn1cblxuZnVuY3Rpb24gYWRkTm90UHVibGlzaGVkKCl7XG4gIGNvbnN0IGRpdiA9IGQzLnNlbGVjdCgnLnB1bGwtcmlnaHQnKS5pbnNlcnQoXCJsaVwiLCdsaScpO1xuICBkaXYuaHRtbChgPHAgY2xhc3M9J25vdC1wdWJsaXNoZWQnPk5lIHBhcyBwdWJsaWVyPC9wPmApO1xufVxuXG5mdW5jdGlvbiBhZGRGb290ZXIoKXtcbiAgLy9kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZm9vdGVyQ29udGFpbmVyJykucmVtb3ZlKCk7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmb290ZXJDb250YWluZXInKS5pbm5lckhUTUwgPSBkMy5zZWxlY3QoYCNmb290ZXJDb250ZW50YCkubm9kZSgpLmlubmVySFRNTDtcbn1cbiIsImNvbnN0IGdvb2dsZV9jb25maWcgPSB7XG4gICAgXCJjb250ZW50VVJMXCI6IFwiaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvZS8yUEFDWC0xdlNFeXdKRTBWVWd5M05zcTNUZ19vaC1WczYzM1RTaW1kSUhma1hUeXo5QmJFdFdOVmd1cmQxVG91LVE1YW52ZE9pdzNjb0NGa0RDaVNZcS9wdWI/Z2lkPTAmc2luZ2xlPXRydWUmb3V0cHV0PWNzdlwiLFxuICAgIFwicGFyYW1zVVJMXCI6IFwiaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvZS8yUEFDWC0xdlNFeXdKRTBWVWd5M05zcTNUZ19vaC1WczYzM1RTaW1kSUhma1hUeXo5QmJFdFdOVmd1cmQxVG91LVE1YW52ZE9pdzNjb0NGa0RDaVNZcS9wdWI/Z2lkPTQwOTk1MDIzNyZzaW5nbGU9dHJ1ZSZvdXRwdXQ9Y3N2XCIsXG4gICAgXCJsb2NhbENvbnRlbnRVUkxcIjogXCIuL2RhdGEvc3RydWN0dXJlL2NvbnRlbnREYXRhLmNzdlwiLFxuICAgIFwibG9jYWxQYXJhbXNVUkxcIjogXCIuL2RhdGEvc3RydWN0dXJlL3BhcmFtc0RhdGEuY3N2XCJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge2dvb2dsZV9jb25maWd9O1xuIl0sIm5hbWVzIjpbIkludHJvU2VjdGlvbiIsInByb3BzIiwiYXV0aG9yc0xpbmUiLCJBcnJheSIsImZyb20iLCJTdHJpbmciLCJvcHRpb25EYXRhIiwiYXV0aG9ycyIsInNwbGl0IiwibWFwIiwibmFtZSIsImkiLCJjdXJMZW4iLCJsZW5ndGgiLCJrZXkiLCJocmVmIiwidXJscyIsImludHJvU2VjdGlvbk9iaiIsImNsYXNzTmFtZSIsImNsYXNzZXMiLCJ0aXRsZSIsImRhdGUiLCJhbW9yY2UiLCJiYWNrZ3JvdW5kIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJUZXh0U2VjdGlvbiIsInF1b3RlT2JqIiwiaXNRdW90ZSIsImluY2x1ZGVzIiwidGV4dCIsInRleHRzIiwiYXV0aG9yIiwiYmlnTnVtYmVyT2JqIiwiaXNCaWdOdW1iZXIiLCJudW1iZXIiLCJ1bmRlclRleHQiLCJpc1Zpc3VhbCIsInZpc3VhbCIsInZpc3VhbE9iaiIsImlkIiwic3JjIiwiZmlsZW5hbWUiLCJ2aXN1ZWxjbGFzc2VzIiwicGFkZGluZ0JvdHRvbSIsImF1dG9QbGF5IiwibG9vcCIsIm11dGVkIiwicGxheXNJbmxpbmUiLCJwcmVsb2FkIiwidGV4dFNlY3Rpb25PYmoiLCJwYXJzZSIsInN0YXJ0c1dpdGgiLCJEV0NoYXJ0IiwiaWZyYW1lUmVmIiwidXNlUmVmIiwidXNlU3RhdGUiLCJoZWlnaHQiLCJzZXRTdGF0ZSIsIm9uTWVzc2FnZSIsInVzZUNhbGxiYWNrIiwiZGF0YSIsInNvdXJjZSIsImN1cnJlbnQiLCJjb250ZW50V2luZG93IiwidXNlRWZmZWN0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWYiLCJzY3JvbGxpbmciLCJmcmFtZUJvcmRlciIsIndpZHRoIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwibG9hZGluZyIsIm9wdGlvbnNEcm9wZG93bkNvbnN0YW50cyIsInBhcmFtZXRlcnNIZWFkZXJDb25zdGFudHMiLCJ0aXRyZSIsImF1dGV1cnMiLCJWaXpTZWN0aW9uIiwic3RlcHMiLCJjdXJTdGVwQ2xhc3NlcyIsImN1ckNvbW1vbkNsYXNzIiwidml6U2VjdGlvbk9iaiIsImxpc3RJRCIsImNsYXNzZWQiLCJzdGVwIiwiaW5kZXgiLCJzdGVwY2xhc3NlcyIsImZvckVhY2giLCJzdGVwRWxlbSIsImlkeCIsImlzQXJyYXkiLCJlbGVtIiwicmVkdWNlIiwiYSIsImIiLCJGdWxsUGFnZVNlY3Rpb24iLCJmdWxscGFnZVNlY3Rpb25PYmoiLCJtYWluVGl0bGUiLCJjbGFzcyIsInN1YlRpdGxlIiwiZ2V0U3RydWN0dXJlIiwiY29udGVudERhdGEiLCJwYXJhbXNEYXRhIiwic3RydWN0dXJlRGF0YSIsInZpelNlY3Rpb25JRHMiLCJvcHRpb25zIiwiZ2V0T3B0aW9ucyIsImNvbnNvbGUiLCJsb2ciLCJyb3dEYXRhIiwiY3VyQW1vcmNlIiwic2VjdGlvbkJhY2tncm91bmQiLCJzZWN0aW9uVHlwZSIsInBhcnNlQ2xhc3NlcyIsImdhbWVpZCIsInRpdGxlT2JqIiwiaXNKc29uIiwiSlNPTiIsImN1ckRhdGEiLCJhdHRyaWJ1dHMiLCJzY3JvbGxUeXBlIiwiaGFzT3duUHJvcGVydHkiLCJjdXJWaXpTZWN0aW9uIiwicHVzaCIsImN1clNlY3Rpb24iLCJzZWN0aW9uQXR0ciIsIm1lZGlhSW5mbyIsIk9iamVjdCIsInZhbHVlcyIsInN0ciIsImUiLCJqb2luIiwiaXNYUyIsImlubmVyV2lkdGgiLCJpc1NtIiwiY29uc3RhbnRzIiwidG9rZW4iLCJtYXBCb3VuZHMiLCJtYXgiLCJjb2xvcnMiLCJjbHVzdGVyTWF4Wm9vbSIsImNsdXN0ZXJSYWRpdXMiLCJjbHVzdGVyTWluUG9pbnRzIiwibWFwYm94Z2wiLCJNYXAiLCJkaXYiLCJkYXRhU291cmNlQXJyYXkiLCJzdHlsZVVybCIsImluaXRDb29yZHMiLCJkaXNhYmxlQ29udHJvbHMiLCJ3aXRoSGFuZGxlcnMiLCJ0aGlzIiwiZGF0YVNvdXJjZU9iamVjdHMiLCJjb250YWluZXIiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJjZW50ZXIiLCJ6b29tIiwibWF4Qm91bmRzIiwiYm91bmRzTGlzdCIsImRhdGFTb3VyY2UiLCJleHRyYUJvdW5kcyIsInNjcm9sbFpvb20iLCJkaXNhYmxlIiwiZHJhZ1BhbiIsImRyYWdSb3RhdGUiLCJib3hab29tIiwiZG91YmxlQ2xpY2tab29tIiwic2V0dXBIYW5kbGVycyIsImRhdGFMaXN0IiwiYm91bmRzIiwicGFkZGluZyIsInNjcmVlbiIsImR1cmF0aW9uIiwiZml0Qm91bmRzIiwiZGF0YVBhaXIiLCJmbHlUbyIsInNwZWVkIiwiY3VydmUiLCJlYXNpbmciLCJ0Iiwib2JqaW5kZXgiLCJ1cGRhdGVDb29yZHNBbmRab29tIiwia2V5TmFtZSIsInNvdXJjZUluZGV4IiwiaXRlbUluZGV4IiwiaW5pdGlhbGlzZWQiLCJhZGRTb3VyY2UiLCJ0eXBlIiwiYWRkTGF5ZXIiLCJwYWludCIsInByb3BlcnR5IiwidmFsdWUiLCJzZXRQYWludFByb3BlcnR5Iiwib24iLCJnZXRDYW52YXMiLCJjdXJzb3IiLCJkcmF3UG9wdXAiLCJjbG9zZVBvcHVwIiwicHJldmVudERlZmF1bHQiLCJjb29yZGluYXRlcyIsImZlYXR1cmVzIiwiZ2VvbWV0cnkiLCJzbGljZSIsInByb3BlcnRpZXMiLCJvcGVuZGF5c3RyIiwib3Blbm1vbnRoc3RyIiwib3BlbnllYXJzdHIiLCJmZXJtZGF5c3RyIiwiZmVybW1vbnRoc3RyIiwiZmVybXllYXJzdHIiLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJkYXRlU3R5bGUiLCJmb3JtYXQiLCJEYXRlIiwiVVRDIiwiZGF0ZV9vdXZlcnR1cmUiLCJkYXRlX2Zlcm1ldHVyZSIsImh0bWxfcG9wdXBfY29udGVudCIsIk1hdGgiLCJhYnMiLCJsbmdMYXQiLCJsbmciLCJwb3B1cCIsInNldExuZ0xhdCIsInNldEhUTUwiLCJhZGRUbyIsInJlbW92ZSIsImRhdGFTb3VyY2VOYW1lIiwiaW5pdE1hcFNvdXJjZXNBbmRMYXllcnMiLCJnZXRTb3VyY2UiLCJzZXREYXRhIiwiR2F1Z2VzIiwiZG9sbGFycyIsInR3aCIsIkludHJvQm94Iiwic3RhcnRHYW1lIiwibWFwT2JqIiwidmlld0V4dHJhQm91bmRPYmoiLCJnYW1lU3RhcnQiLCJpbnRyb0VsZW0iLCJvbkNsaWNrIiwiTXVsdGlwbGVDaG9pY2UiLCJuZXh0UHJvbXB0IiwiY3VySW5kZXgiLCJjaGFuZ2VQcm9tcHQiLCJwcmV2aW91c1Byb21wdCIsImNob2ljZXMiLCJjaG9pY2UiLCJjb3N0IiwiY2hvaWNlc192YWx1ZXMiLCJ1c2UiLCJQcmludFByb21wdCIsIm1lc3NhZ2UiLCJSZXBhcnRpdGlvbiIsImpldG9ucyIsInNldEpldG9ucyIsIm1lZ2F3YXR0cyIsInNldE1lZ2F3YXR0cyIsInNwbGl0dGVkQ2hvaWNlcyIsInVuaXRWYWx1ZSIsInBhcnNlSW50IiwidG90YWwiLCJ1bml0TVd2YWx1ZSIsImV2ZW50IiwiY2xpY2tWYWx1ZSIsImNsaWVudFgiLCJ0YXJnZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwiY2FsY3VsYXRlQ2xpY2siLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwiZDMiLCJzZWxlY3QiLCJvZmZzZXRQYXJlbnQiLCJodG1sIiwidG90YWxKZXRvbnMiLCJ0b3RhbE1XIiwic2VsZWN0QWxsIiwibm9kZXMiLCJub2RlIiwiY2FsY3VsYXRlVG90YWxzIiwibnVtVGlja3MiLCJmbG9vciIsInRpY2tfYXJyYXkiLCJhcHBseSIsImNvdW50IiwicGFkZGluZ0xlZnQiLCJQcm9tcHRCb3giLCJuZXdWYWx1ZSIsImN1clByb21wdCIsInBhcmFtIiwicmVuZGVyU3dpdGNoIiwiTWFpbkZyYW1lIiwiZ2FtZVN0YXR1cyIsInNldFN0YXR1cyIsImdhbWVJbmRleCIsInNldEdhbWVJbmRleCIsInNldERvbGxhcnMiLCJzZXRUd2giLCJnZXRHYW1lUHJvbXB0IiwiZ2FtZURhdGEiLCJmaWx0ZXIiLCJ1cGRhdGVEb2xsYXJzIiwiZGlmZiIsInVwZGF0ZVR3aCIsIkVuZ2luZSIsImludHJvT2JqIiwicm9vdEVsZW0iLCJhcHBlbmQiLCJlbmdpbmVSb290IiwiUmVhY3RET00iLCJpbml0RW5naW5lIiwicmVuZGVyIiwibWFwQm94U3R5bGUiLCJpbml0aWFsaXplIiwidGhlbiIsImdlb0RhdGEiLCJtYXBTb3VyY2UiLCJzb3VyY2VOYW1lIiwic291cmNlVHlwZSIsInNvdXJjZURhdGEiLCJsYXllclR5cGUiLCJjb2xvciIsIm9wYWNpdHkiLCJjb29yZHMiLCJleHRyYUNvb3JkcyIsInpvbmUxIiwibWFwQ29udGFpbmVyIiwiYXR0ciIsInNldHVwVml6IiwiZnVsbFN0cnVjdHVyZSIsInNlY3Rpb25PYmoiLCJTY3JvbGxlclN0ZXAiLCJlbCIsImNhbGxiYWNrIiwiX2lzQWN0aXZhdGUiLCJzY3JvbGxEaXJlY3Rpb24iLCJjbGFzc0xpc3QiLCJhZGQiLCJpbml0U2Nyb2xsZXIiLCJlbGVtZW50cyIsInNlbGVjdG9yIiwiY29uY2F0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwic3RpY2t5Qml0cyIsInN0aWNreUJpdFN0aWNreU9mZnNldCIsIkxhenlMb2FkIiwiZWxlbWVudHNfc2VsZWN0b3IiLCJ0aHJlc2hvbGQiLCJQcm9taXNlIiwiYWxsIiwidjEiLCJjYWxsYmFja3MiLCJfb2Zmc2V0VG9wIiwiX29mZnNldEJvdHRvbSIsImlubmVySGVpZ2h0IiwiaXNJbml0aWFsaXplZCIsImxhc3RTY3JvbGwiLCJ2aXoiLCJ2aXNpYmxlU3RlcHMiLCJhcnRpY2xlUmVtaW5kZXIiLCJxdWVyeVNlbGVjdG9yIiwic2Nyb2xsUHJvZ3Jlc3MiLCJ2aXpTZWN0aW9ucyIsIkVycm9yIiwidml6U2VjdGlvbiIsInNlY3Rpb25zIiwiaiIsIl91cGRhdGUiLCJjdXJyZW50U2Nyb2xsIiwicGFnZVlPZmZzZXQiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxUb3AiLCJib3VuZGluZ1JlY3QiLCJ0b3AiLCJkZWFjdGl2YXRlIiwiaXNBcnRpY2xlUmVtaW5kZXJEaXNwbGF5ZWQiLCJib3R0b20iLCJpc0FydGljbGVSZW1pbmRlcklzVmlzaWJsZSIsImNvbnRhaW5zIiwic2VjdGlvbiIsImFjdGl2YXRlIiwiX3VwZGF0ZVNjcm9sbFByb2dyZXNzIiwic2Nyb2xsZWQiLCJib2R5Iiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwicHVibGljSW50ZXJmYWNlIiwib2Zmc2V0VG9wIiwidW5kZWZpbmVkIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwib2Zmc2V0Qm90dG9tIiwic2Nyb2xsZXIiLCJSZW5kZXJTdHJ1Y3R1cmUiLCJyZW5kZXJlZCIsInJlbmRlcmVkRGF0YSIsImtleXMiLCJzZWN0aW9uS2V5IiwiaW5uZXJIVE1MIiwic3RydWN0dXJlIiwicGFja2FnZXMiLCJSZWFjdCIsImdvb2dsZV9jb25maWciLCJjcmVhdGVSb290IiwiZ2V0RWxlbWVudEJ5SWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==