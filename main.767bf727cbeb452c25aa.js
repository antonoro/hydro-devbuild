(self.webpackChunkscrollytelling_template=self.webpackChunkscrollytelling_template||[]).push([[179],{70128:(e,t,n)=>{"use strict";const r=JSON.parse('{"E":"<section id=\\"vizSection1_0\\" class=\\"viz-section full-page\\"><div class=\\"steps display-none\\"><section class=\\"display-none\\"><p>Bla bl abl abl ablalbalanl.</p></section></div><div class=\\"viz\\" id=\\"viz\\"><div id=\\"vizSection1_0_0\\" class=\\"iframeContainer map-area\\"></div></div></section>"}');var a=n(40207),c=n(67294);function o(e){var t=c.createElement("section",{className:"intro-section ".concat(e.classes)},c.createElement("h5",{className:"overTitle"},e.amorce),c.createElement("h1",null,e.optionData.title),c.createElement("address",null,c.createElement("div",{className:"date"})));return e.background?c.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},t):t}var i=n(25935);function s(e){var t,n=String(e.classes).includes("citation");n&&(t={text:String(e.texts).split("/")[0],author:String(e.texts).split("/")[1]});var r,a=String(e.classes).includes("bigNumber");a&&(r={number:String(e.texts).split("/")[0],underText:String(e.texts).split("/")[1]});var o=e.visual,s=""!==o?"Photo"===e.visual?c.createElement("img",{key:"photoTextSection_".concat(e.id),id:"photoTextSection_".concat(e.id),src:"assets/img/675/".concat(e.filename),"data-srcset":"assets/img/2048/".concat(e.filename," 2048w, assets/img/990/").concat(e.filename," 990w, assets/img/675/").concat(e.filename," 675w, assets/img/1350/").concat(e.filename," 1350w, assets/img/100/").concat(e.filename," 100w, assets/img/495/").concat(e.filename," 495w, assets/img/1024/").concat(e.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(e.visuelclasses),style:{paddingBottom:"1rem"}}):"Video"===e.visual?c.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(e.visuelclasses),preload:"metadata",key:"videoTextSection_".concat(e.id),id:"videoTextSection_".concat(e.id)},c.createElement("source",{src:"assets/videos/".concat(e.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):c.createElement("div",null):c.createElement("div",null),l=c.createElement("section",{className:"text-section ".concat(e.classes)},n?c.createElement("blockquote",{className:"small"},c.createElement("div",null,c.createElement("p",null,c.createElement("b",null,(0,i.ZP)(t.text))),c.createElement("p",{className:"author"},t.author),c.createElement("div",{className:"symbol"}))):a?c.createElement("div",{className:"container-number"},c.createElement("div",{className:"numbers"},c.createElement("h2",null,r.number),c.createElement("small",null,r.underText))):c.createElement("div",null,o?s:c.createElement("div",null),String(e.texts).startsWith("<")?(0,i.ZP)(e.texts):c.createElement("p",null,(0,i.ZP)(e.texts))));return e.background?c.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},l):l}var l,u=n(45697),m=n.n(u),p=["title","src"];function d(){return d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d.apply(this,arguments)}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function v(e){var t,n,r=e.title,a=e.src,o=function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,p),i=(0,c.useRef)(),s=(t=(0,c.useState)(500),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(t,n)||function(e,t){if(e){if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?f(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=s[0],u=s[1],m=(0,c.useCallback)((function(e){var t=e.data,n=void 0===t?{}:t;e.source===i.current.contentWindow&&"string"!=typeof n&&n["datawrapper-height"]}),[u,i]);return(0,c.useEffect)((function(){return window.addEventListener("message",m),function(){return window.removeEventListener("message",m)}}),[l,u,m]),c.createElement("iframe",d({ref:i,scrolling:"no",frameBorder:"0",width:"100%"},o,{title:r,src:a,height:l}))}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}v.propTypes={title:m().string.isRequired,src:m().string.isRequired,loading:m().oneOf(["eager","lazy"])};var h="intro-titre",y="pleine-page-titre",E="texte-classique",b="viz-section",x="centré",w="Photo",S="Video",N="Visualisation",k="iframe",P=(g(l={titre:"Titre",auteurs:"Auteurs",date:"Date"},"date","Date"),g(l,"urls","LienAuteurs"),g(l,"lienfichiersource","LienFichierSource"),l);function I(e){var t,n,r,a=c.createElement("section",{id:e.listID,className:e.classed},c.createElement("div",{className:"steps ".concat((t=e.steps,n=t.map((function(e,t){return e.stepclasses})),r=new Array(n.length),n.forEach((function(e,t){if(Array.isArray(e))e.forEach((function(e){for(var a=t;a<n.length;a++)n[a].includes(e)&&(r[a]=e)}));else if("string"==typeof e)for(var a=t;a<n.length;a++)n[a].includes(e)&&(r[a]=e)})),r.reduce((function(e,t){return e===t&&""!==e&&""!==t?e:""}))))},e.steps.map((function(e,t){var n,r=String(e.stepclasses).includes("citation");return r&&(n={text:String(e.text).split("/")[0],author:String(e.text).split("/")[1]}),c.createElement("section",{key:t,className:e.stepclasses},r?c.createElement("blockquote",{className:"small"},c.createElement("div",null,c.createElement("p",null,c.createElement("b",null,(0,i.ZP)(n.text))),c.createElement("p",{className:"author"},n.author),c.createElement("div",{className:"symbol"}))):String(e.text).startsWith("<")?(0,i.ZP)(e.text):c.createElement("p",null,e.text?(0,i.ZP)(e.text):""))}))),c.createElement("div",{className:"viz",id:"viz"},e.steps.map((function(t,n){return t.visual===w?c.createElement("img",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),src:"assets/img/675/".concat(t.filename),"data-srcset":"assets/img/2048/".concat(t.filename," 2048w, assets/img/990/").concat(t.filename," 990w, assets/img/675/").concat(t.filename," 675w, assets/img/1350/").concat(t.filename," 1350w, assets/img/100/").concat(t.filename," 100w, assets/img/495/").concat(t.filename," 495w, assets/img/1024/").concat(t.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(t.visuelclasses)}):t.visual===S?c.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(t.visuelclasses),preload:"metadata",key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n)},c.createElement("source",{src:"assets/videos/".concat(t.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):t.visual===k?c.createElement("div",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),className:"iframeContainer"},c.createElement(v,{title:"Mesures d'arsenic",src:"".concat(t.filename)})):t.visual===N?c.createElement("div",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),className:"iframeContainer ".concat(t.visuelclasses)}):void 0}))));return e.background?c.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},a):a}function T(e){var t=c.createElement("section",{className:"full-page-section ".concat(e.classes)},c.createElement("div",{className:"titleImage"},e.filename?"Photo"===e.visual?c.createElement("img",{key:"".concat(e.id),id:"".concat(e.id),src:"assets/img/675/".concat(e.filename),"data-srcset":"assets/img/2048/".concat(e.filename," 2048w, assets/img/990/").concat(e.filename," 990w, assets/img/675/").concat(e.filename," 675w, assets/img/1350/").concat(e.filename," 1350w, assets/img/100/").concat(e.filename," 100w, assets/img/495/").concat(e.filename," 495w, assets/img/1024/").concat(e.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(e.visuelclasses)}):"Video"===e.visual?c.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(e.visuelclasses),preload:"metadata",key:"".concat(e.id),id:"".concat(e.id)},c.createElement("source",{src:"assets/videos/".concat(e.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):c.createElement("div",null):c.createElement("div",null),e.filename?c.createElement("div",{className:"filter"}):c.createElement("div",null)),c.createElement("div",{className:"captionholder"},c.createElement("h2",{className:"caption ".concat(e.mainTitle.class)},e.mainTitle.text),e.subTitle?c.createElement("h3",{className:"caption ".concat(e.subTitle.class)},e.subTitle.text):c.createElement("div",null)));return e.background?c.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},t):t}n(93162);var C=n(38682);function A(e,t){var n={},r=[],a=O(t);return console.log("content Data",e),e.map((function(e,t){if(e.Section===h){var c=e.StepClasses,o=e.TEXTE,i=e.StyleFond;n[e.SectionID]={key:t,sectionType:h,optionData:a,amorce:o,background:i,classes:_(c),gameid:e.GameID}}else if(e.Section===E){var s=e.TEXTE,l=e.StepClasses,u=e.StyleFond;n[e.SectionID]={key:t,sectionType:E,texts:s,visual:e.VISUEL,filename:e.NomFichierSource,background:u,classes:_(l),visuelclasses:_(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===y){var m=e.TEXTE;D(e.TEXTE)&&(m=JSON.parse(e.TEXTE)),n[e.SectionID]={key:t,sectionType:y,texts:D(e.TEXTE)?m:{mainTitle:{class:"",text:m},subTitle:null},visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,classes:_(e.StepClasses),visuelclasses:_(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===b){var p={attributs:e.Attributs,scrollType:e.Step,text:e.TEXTE,visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,visuelclasses:_(e.VisuelClasses),stepclasses:_(e.StepClasses),gameid:e.GameID};if(n.hasOwnProperty(e.SectionID)){var d=n[e.SectionID];d.push(p),n[e.SectionID]=d}else n[e.SectionID]=[p],r.push(e.SectionID)}})),r.map((function(e){var t=n[e],r=t[0].attributs===x?" full-page":"",a=t[0].background;n[e]={key:e,sectionType:b,listID:e,steps:t,classed:"viz-section".concat(r),mediaInfo:0,background:a}})),Object.values(n)}function D(e){try{JSON.parse(e)}catch(e){return!1}return!0}function _(e){return Array.from(e.split(";")).join(" ")}function O(e){return{title:e[0][P.titre],authors:e[0][P.auteurs],urls:e[0][P.urls],date:e[0][P.date]}}n(9208);n(83731).accessToken="pk.eyJ1IjoibGVkZXZvaXIiLCJhIjoiY2p2bW81dHU2MWV1cTRhcXIzaXZqMGYxciJ9.WrIF8o69aR_TstDFu6Qyag",n(6899);var R=n(20745);function j(e){return(0,c.useEffect)((function(){C.Ys(".gauges").selectAll(".gauge").nodes().forEach((function(t){var n=50;"dollars"===C.Ys(t).attr("id")&&(n=e.dollars),C.Ys(t).select(".gaugeColorHolder").select(".committed").style("width","".concat(Math.round(e.committed/50*100),"%")),C.Ys(t).select(".gaugeColor").style("width","".concat(Math.round(n/50*100),"%"))}))})),c.createElement("div",{className:"gauges"},c.createElement("div",{id:"dollars",className:"gauge dollarGauge"},c.createElement("div",{className:"gaugeColorHolder"},c.createElement("div",{className:"gaugeColor blue"}),0!=e.committed?c.createElement("div",{className:"committed"}):"",c.createElement("div",{className:"value"},c.createElement("p",null,"Budget • ",e.dollars," jetons")))))}function z(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function L(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){z(c,r,a,o,i,"next",e)}function i(e){z(c,r,a,o,i,"throw",e)}o(void 0)}))}}function V(e){var t=(0,c.useCallback)(L(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("starting game"),e.gameStart();case 2:case"end":return t.stop()}}),t)}))));return c.createElement("div",{className:"gameBox transparent"},c.createElement("div",{className:"introBox"},e.introElem),c.createElement("div",{className:"userBox"},c.createElement("div",{className:"startbutton",onClick:t},c.createElement("p",null,"Commencer le jeu"))))}function Y(e){return c.createElement("div",{className:"monitoring"},c.createElement("div",{className:"monitoring_content"},c.createElement("div",{className:"column"},c.createElement("div",{className:"monitoring_value"},c.createElement(j,{dollars:e.dollars,committed:e.committed,performance:e.performance})))),e.terawatts||0===e.terawatts?c.createElement("div",{className:"monitoring_content"},c.createElement("div",{className:"column"},c.createElement("div",{className:"monitoring_header"},c.createElement("h5",null,"Électricité produite • ",e.terawatts," TWh")))):c.createElement("div",null))}function B(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function U(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){B(c,r,a,o,i,"next",e)}function i(e){B(c,r,a,o,i,"throw",e)}o(void 0)}))}}function Z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function q(e){var t,n,r=(t=(0,c.useState)(null),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Z(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[0],o=r[1];(0,c.useEffect)((function(){}),[]),(0,c.useEffect)((function(){C.td_(".choicebutton").select(".butn").classed("selected",!1),a&&C.Ys(a.obj).select(".butn").classed("selected",!0)}),[a]);var i=(0,c.useCallback)(function(){var t=U(regeneratorRuntime.mark((function t(n,r,a){var c;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:(c=String(e.curPrompt.Trigger_next).split(";")).length>1?(console.log("checking next: ",c," index:",a," result:",String(c[a]).replace(/(\r\n|\n|\r)/gm,"")),e.changePrompt(String(c[a]).replace(/(\r\n|\n|\r)/gm,""))):e.changePrompt(String(c[0]).replace(/(\r\n|\n|\r)/gm,"")),e.updateDollars(-parseInt(n)),e.updatePerformance(parseInt(r)),o(null);case 5:case"end":return t.stop()}}),t)})));return function(e,n,r){return t.apply(this,arguments)}}()),s=(0,c.useCallback)(U(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("previous prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1)),o(null);case 2:case"end":return t.stop()}}),t)}))));return c.createElement("div",{className:"choices"},c.createElement("div",{className:"row"},e.choices.map((function(t,n){var r=e.choices_values[n].split("_")[0],a=e.choices_values[n].split("_")[1];return c.createElement("div",{className:"choicebutton",key:n,onClick:function(e){!function(e,t,n,r){o({obj:e.target,cost:t,use:n,index:r})}(e,r,a,n)}},c.createElement("div",{id:n,className:"butn"},c.createElement("div",{className:"holder icon"},c.createElement("img",{src:"./assets/img/On.svg"})),c.createElement("div",{className:"holder label"},c.createElement("h4",null,t),c.createElement("p",null,r," JETONS"))))}))),c.createElement(Y,{showTWh:!1,dollars:a&&a.hasOwnProperty("cost")?e.gauges.props.dollars-a.cost:e.gauges.props.dollars,committed:a&&a.hasOwnProperty("cost")?a.cost:0,performance:e.gauges.props.performance}),c.createElement("div",{className:"row"},c.createElement("div",{className:"column"},e.curIndex>0?c.createElement("div",{className:"actionbutton prev",onClick:s},c.createElement("div",{className:"butn"},c.createElement("p",null,"Previous"))):c.createElement("div",null)),c.createElement("div",{className:"column"},c.createElement("div",{className:"actionbutton next ".concat(a?"":"disabled"),onClick:function(){a?i(a.cost,a.use,a.index):console.log("Disabled.")}},c.createElement("div",{className:"butn"},c.createElement("p",null,"Next"))))))}function M(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function W(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){M(c,r,a,o,i,"next",e)}function i(e){M(c,r,a,o,i,"throw",e)}o(void 0)}))}}function H(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(e,t)||X(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function X(e,t){if(e){if("string"==typeof e)return F(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?F(e,t):void 0}}function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function G(e){var t=H((0,c.useState)([]),2),n=t[0],r=t[1];(0,c.useEffect)((function(){a()}),[]),(0,c.useEffect)((function(){}),[n]);var a=function(){r(e.choices.map((function(e){return null})))},o=function(e){return[e.reduce((function(e,t){return t&&(e+=t.cost),e}),0),e.reduce((function(e,t){return t&&(e+=t.use),e}),0)]},i=(0,c.useCallback)(function(){var t=W(regeneratorRuntime.mark((function t(n){var r,c,i,s,l;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=e.curPrompt.Trigger_next,e.changePrompt(r),c=o(n),i=H(c,2),s=i[0],l=i[1],e.updateDollars(-parseInt(s)),e.updatePerformance(parseInt(l)),a();case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),s=(0,c.useCallback)(W(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("previous prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1)),a();case 2:case"end":return t.stop()}}),t)}))));return c.createElement("div",{className:"choices"},c.createElement("div",{className:"row"},e.choices.map((function(t,a){var o=e.choices_values[a].split("_")[0],i=e.choices_values[a].split("_")[1];return c.createElement("div",{className:"selectionbutton",key:a,onClick:function(e){!function(e,t,a,c){var o,i=function(e){if(Array.isArray(e))return F(e)}(o=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||X(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();n[t]?i[t]=null:i[t]={obj:e.target,cost:parseInt(a),use:parseInt(c)},r(i)}(e,a,o,i)}},c.createElement("div",{id:a,className:"butn"},c.createElement("div",{className:"holder selectionBox"},n[a]?"X":""),c.createElement("div",{className:"holder label"},c.createElement("h4",null,t),c.createElement("p",null,o," JETONS"))))}))),c.createElement(Y,{showTWh:!1,dollars:n&&n.length>0?e.gauges.props.dollars-o(n)[0]:e.gauges.props.dollars,committed:n&&n.length>0?o(n)[0]:0,performance:e.gauges.props.performance}),c.createElement("div",{className:"row"},c.createElement("div",{className:"column"},e.curIndex>0?c.createElement("div",{className:"actionbutton prev",onClick:s},c.createElement("div",{className:"butn"},c.createElement("p",null,"Previous"))):c.createElement("div",null)),c.createElement("div",{className:"column"},c.createElement("div",{className:"actionbutton next ".concat(n?"":"disabled"),onClick:function(){n?i(n):console.log("Disabled.")}},c.createElement("div",{className:"butn"},c.createElement("p",null,"Next"))))))}function J(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function Q(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){J(c,r,a,o,i,"next",e)}function i(e){J(c,r,a,o,i,"throw",e)}o(void 0)}))}}function $(e){var t=(0,c.useCallback)(Q(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("prev prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)})))),n=(0,c.useCallback)(Q(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.curPrompt.Trigger_next,console.log("Checking trigger next: ",n),e.changePrompt(n);case 3:case"end":return t.stop()}}),t)}))));return c.createElement("div",{className:"printprompt"},c.createElement("div",{className:"message"},c.createElement("p",null,e.message)),c.createElement("div",{className:"actionbutton prev",onClick:t},c.createElement("div",{className:"butn"},c.createElement("p",null,"Previous"))),c.createElement("div",{className:"actionbutton next",onClick:n},c.createElement("div",{className:"butn"},c.createElement("p",null,"Suivant"))))}function K(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function ee(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){K(c,r,a,o,i,"next",e)}function i(e){K(c,r,a,o,i,"throw",e)}o(void 0)}))}}function te(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(e,t)||ne(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ne(e,t){if(e){if("string"==typeof e)return re(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?re(e,t):void 0}}function re(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ae(e){var t=te((0,c.useState)(0),2),n=t[0],r=t[1],a=te((0,c.useState)(0),2),o=a[0],i=a[1],s=te((0,c.useState)([]),2),l=s[0],u=s[1],m=te((0,c.useState)([]),2),p=m[0],d=m[1];(0,c.useEffect)((function(){var e=h(),t=e.map((function(){return 0})),n=e.map((function(e){return e.unitValue}));u(t),d(n)}),[]),(0,c.useEffect)((function(){var e=l.reduce((function(e,t,n){return h()[n],e+t}),0),t=l.reduce((function(e,t,n){var r=h()[n];return e+Math.round(t/r.unitValue*r.unitTWhvalue)}),0);r(e),i(t)}),[l]);var f=(0,c.useCallback)(ee(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("prev prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)})))),v=(0,c.useCallback)(ee(regeneratorRuntime.mark((function t(){var r,a,c,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=String(e.curPrompt.Trigger_next).split("_"),1==(a=String(r[0]).split(";")).length?e.changePrompt(String(a).replace(/(\r\n|\n|\r)/gm,"")):a.length>1&&(l.every((function(e){return e===l[0]}))?(o=String(r[1]).replace(/(\r\n|\n|\r)/gm,""),e.changePrompt(o)):(c=l.reduce((function(e,t,n,r){return t>r[e]?n:e}),0),e.changePrompt(String(a[c]).replace(/(\r\n|\n|\r)/gm,"")))),e.updateDollars(-n);case 4:case"end":return t.stop()}}),t)})))),g=function(e,t){var n=t.split("_");return{name:e,unitValue:parseInt(n[0]),unitTWhvalue:parseInt(n[1])}},h=function(){return e.choices.map((function(t,n){return g(t,e.choices_values[n])}))},y=function(e,t,n,r){var a,c,o,i=function(e){if(Array.isArray(e))return re(e)}(o=l)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||ne(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();i[t]+n*p[t]>=0&&(n>0?(a=n*p[t],c=0,l.forEach((function(e,t){c+=e})),c+a>20||(i[t]=i[t]+n*p[t])):i[t]=i[t]+n*p[t],u(i))};return c.createElement("div",{className:"repartition"},c.createElement("div",{className:"optionZone"},e.choices.map((function(t,n){return g(t,e.choices_values[n])})).map((function(e,t){return c.createElement("div",{className:"optionUnit",key:t},c.createElement("div",{className:"selectorZone"},c.createElement("div",{className:"division minusZone",onClick:function(e){return y(0,t,-1)}},c.createElement("h3",null,"-")),c.createElement("div",{className:"division centralZone"},c.createElement("h3",null,l[t])),c.createElement("div",{className:"division plusZone",onClick:function(e){return y(0,t,1)}},c.createElement("h3",null,"+"))),c.createElement("div",{className:"textZone"},c.createElement("h3",null,e.name),c.createElement("div",{className:"inlinetext"},c.createElement("p",null,e.unitValue," jetons • ",e.unitTWhvalue," TWh"))))}))),c.createElement(Y,{showTWh:!0,dollars:e.gauges.props.dollars-n,committed:n,performance:e.gauges.props.performance,terawatts:o}),e.curIndex>0?c.createElement("div",{className:"actionbutton prev",onClick:f},c.createElement("div",{className:"butn"},c.createElement("p",null,"Previous"))):c.createElement("div",null),c.createElement("div",{className:"actionbutton next",onClick:v},c.createElement("div",{className:"butn"},c.createElement("p",null,"Suivant"))))}n(97762);var ce=n(83290);function oe(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function ie(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){oe(c,r,a,o,i,"next",e)}function i(e){oe(c,r,a,o,i,"throw",e)}o(void 0)}))}}function se(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(e,t)||function(e,t){if(e){if("string"==typeof e)return le(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?le(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function le(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ue(e){var t=se((0,c.useState)(null),2),n=t[0],r=t[1];(0,c.useEffect)((function(){o()}),[]),(0,c.useEffect)((function(){n?C.Ys(".popUp-bg").style("display","unset"):C.Ys(".popUp-bg").style("display","none")}),[n]);var a=(0,ce.Z)().attr("class","d3-tip adjusted").direction("n").html((function(e){return console.log("got d: ",e),"\n                  <h4>".concat(e.title,"</h4>\n                  <p>").concat(e.supp_text,"</p>\n                  ")})),o=function(){Promise.all([C.LsS(e.map[0]),C.LsS(e.map[1])]).then((function(t){var n=se(t,2),r=n[0],c=n[1];C.Ys("#bg-map").node().append(r.documentElement),C.Ys("#on-icons").node().append(c.documentElement);var o=C.Ys("#on-icons").select("svg");o.call(a),C.Ys(".gameScreen").node().appendChild(C.Ys(".d3-tip").node());var s=o.select("#Icone-On").selectAll("g"),l=String(e.curPrompt.Choix).split(";"),u=String(e.message).split(";");s.nodes().reverse().map((function(e,t){var n={title:l[t],supp_text:u[t]};C.Ys(e).on("click",(function(t,r,c){t.stopPropagation(),a.show(n,e),i(t.target.parentElement,!1)})).on("mouseover",(function(t,r,c){console.log("checking d: ",t.target.parentElement),t.stopPropagation(),a.show(n,e),i(t.target.parentElement,!1)})).on("mouseout",(function(t,n,r){a.hide(e),i(t.target.parentElement,!0)}))})),C.Ys(".gameBox").on("click",(function(){a.hide()}))}))},i=function(e,t){!1===t?C.Ys(e).style("opacity",0):C.Ys(e).style("opacity",1)},s=(0,c.useCallback)(ie(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("prev prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)})))),l=(0,c.useCallback)(ie(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.curPrompt.Trigger_next,console.log("Checking trigger next: ",n),e.changePrompt(n);case 3:case"end":return t.stop()}}),t)}))));return c.createElement("div",{className:"printprompt mapnavigator"},c.createElement("div",{className:"popUp-bg"},n?c.createElement("div",{className:"popUp-box"},c.createElement("h4",null,n.title),c.createElement("p",null,n.supp_text),c.createElement("div",{className:"actionbutton",onClick:function(){return r(null)}},c.createElement("div",{className:"butn"},c.createElement("p",null,"Fermer")))):c.createElement("div",null)),c.createElement("div",{className:"mapHolder"},c.createElement("div",{className:"superposedMap"},c.createElement("div",{id:"bg-map",className:"map noClick"}),c.createElement("div",{id:"on-icons",className:"map"}))),c.createElement("div",{className:"actionbutton prev",onClick:s},c.createElement("div",{className:"butn"},c.createElement("p",null,"Previous"))),c.createElement("div",{className:"actionbutton next",onClick:l},c.createElement("div",{className:"butn"},c.createElement("p",null,"Suivant"))))}function me(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function pe(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){me(c,r,a,o,i,"next",e)}function i(e){me(c,r,a,o,i,"throw",e)}o(void 0)}))}}function de(e){(0,c.useEffect)((function(){}),[]);var t=(0,c.useCallback)(pe(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.curPrompt.Trigger_next,console.log("Checking trigger next: ",n),e.changePrompt(n);case 3:case"end":return t.stop()}}),t)}))));return c.createElement("div",{className:"bilanContent"},c.createElement("div",{className:"actionbutton next",onClick:t},c.createElement("div",{className:"butn"},c.createElement("p",null,"Suivant"))))}function fe(e){return c.createElement("div",null,c.createElement("p",null,"End Game."))}function ve(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function ge(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){ve(c,r,a,o,i,"next",e)}function i(e){ve(c,r,a,o,i,"throw",e)}o(void 0)}))}}function he(e){(0,c.useEffect)((function(){}),[]);var t=(0,c.useCallback)(function(){var t=ge(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.changePrompt(n);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),n=(0,c.useCallback)(function(){var t=ge(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:Number.isInteger(n)&&e.updateDollars(n);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),r=(0,c.useCallback)(function(){var t=ge(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:Number.isInteger(n)&&e.updatePerformance(n);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),a=function(a){switch(a){case"Repartition":return c.createElement(ae,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix).split(";"),choices_values:String(e.curPrompt.Choix_Valeurs).split(";"),changePrompt:t,curIndex:e.curIndex,updateDollars:n,gauges:e.gauges});case"Carte":return c.createElement(ue,{curPrompt:e.curPrompt,message:String(e.curPrompt.Texte_Supp),changePrompt:t,curIndex:e.curIndex,map:"Q1-1"===e.curIndex?["assets/img/Carte-Hydro.svg","assets/img/Carte-Hydro-icone-on.svg"]:["assets/img/Carte-Eolien.svg","assets/img/Carte-Eolien-icone-on.svg"]});case"texteBoutonSimple":return c.createElement($,{curPrompt:e.curPrompt,message:String(e.curPrompt.Texte_Supp),changePrompt:t,curIndex:e.curIndex});case"ChoixReponse":case"Catastrophe":return c.createElement(q,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix).split(";"),choices_values:String(e.curPrompt.Choix_Valeurs).split(";"),changePrompt:t,curIndex:e.curIndex,updateDollars:n,updatePerformance:r,gauges:e.gauges});case"MultiSelection":return c.createElement(G,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix).split(";"),choices_values:String(e.curPrompt.Choix_Valeurs).split(";"),changePrompt:t,curIndex:e.curIndex,updateDollars:n,updatePerformance:r,gauges:e.gauges});case"Bilan":return c.createElement(de,{curPrompt:e.curPrompt,curIndex:e.curIndex,changePrompt:t,updateDollars:n,updatePerformance:r});default:return c.createElement(q,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix).split(";"),changePrompt:t,curIndex:e.curIndex})}};return!0===e.endGame?c.createElement("div",{className:"gameBox"},c.createElement(fe,null)):c.createElement("div",{className:"gameBox"},"Bilan"===e.curPrompt.Type?c.createElement("div",{className:"promptBox bilan"},c.createElement("div",{className:"header"},c.createElement("div",{className:"massiveTitle"},c.createElement("h2",null,(0,i.ZP)(e.curPrompt.Sujet)))),c.createElement("div",{className:"separator"}),a(e.curPrompt.Type)):c.createElement("div",{className:"promptBox"},c.createElement("div",{className:"header"},c.createElement("div",{className:"surtitre"},c.createElement("h4",null,(0,i.ZP)(e.curPrompt.Sujet))),c.createElement("div",{className:"question"},c.createElement("p",null,(0,i.ZP)(e.curPrompt.Texte)))),a(e.curPrompt.Type)))}function ye(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ee(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ee(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ee(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function be(e){var t=ye((0,c.useState)("IDLE"),2),n=t[0],r=t[1],a=ye((0,c.useState)(0),2),o=a[0],i=a[1],s=ye((0,c.useState)(50),2),l=s[0],u=s[1],m=ye((0,c.useState)(50),2),p=m[0],d=m[1],f=ye((0,c.useState)("normal"),2),v=f[0],g=f[1];(0,c.useEffect)((function(){console.log("game ",n)}),[n]),(0,c.useEffect)((function(){y(o),"END"===o&&h()}),[o]);var h=function(){r("END")},y=function(t){console.log("current game prompt:",e.gameData.filter((function(e){return String(e.ID)===String(t)})))},E=function(t){return e.gameData.findIndex((function(e){return String(t)===String(e.ID)}))};return(0,c.useEffect)((function(){var t,n=e.gameData[E(o)];n&&n.hasOwnProperty("Type")&&(t=n.Type,console.log("checking prompt type for bg change:",t),"Catastrophe"===t?g("redpink"):"normal"!==v&&g("normal"))})),"IDLE"===n?c.createElement("div",{className:"gameScreen"},c.createElement("div",{className:"background-image"},c.createElement("img",{src:"assets/img/Illus_Section-00_Centrale_V01.svg"})),c.createElement(V,{introElem:e.introElem,mapObj:e.mapObj,gameStart:function(){r("STARTED"),i(0)}})):c.createElement("div",{className:"gameScreen ".concat("END"===o||"redpink"===v?"gameOver":"")},c.createElement(he,{curIndex:o,curPrompt:"END"===o?"":e.gameData[E(o)],changePrompt:i,updateDollars:function(e){l+e>=0?u((function(t){return t+e})):h()},updatePerformance:function(e){p+e>=0?d((function(t){return t+e})):h()},gauges:c.createElement(j,{dollars:l,performance:p}),endGame:"END"===o||"END"===n}))}function xe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var we=function(){function e(t,n,r,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t;var c=this.container.append("div").classed("rootElem",!0);this.engineRoot=R.createRoot(c.node()),this.optionData=n,this.amorce=r.TEXTE,this.gameData=a,console.log("game Data is : ",this.gameData),this.initEngine()}var t,n;return t=e,(n=[{key:"initEngine",value:function(){var e=c.createElement(o,{key:"gameIntro",sectionType:h,optionData:this.optionData,amorce:this.amorce,background:null,classes:""});this.engineRoot.render(c.createElement(be,{introElem:e,gameStatus:this.gameStatus,gameData:this.gameData}))}}])&&xe(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Se(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function Ne(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){Se(c,r,a,o,i,"next",e)}function i(e){Se(c,r,a,o,i,"throw",e)}o(void 0)}))}}function ke(e,t){return Pe.apply(this,arguments)}function Pe(){return(Pe=Ne(regeneratorRuntime.mark((function e(t,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",C.gyn("https://docs.google.com/spreadsheets/d/e/2PACX-1vQQZ3sz0q1vnZmoYYR5IrCfuONhHcNw50iDtbg1H2mIX8lHDL1BQ4sAMi7iApSE1G9WQTW2jHcWv4KW/pub?gid=1497861017&single=true&output=csv").then((function(e){var r=C.Ys(".game-area");return new we(r,O(n),t[0],e),Ie(t,n),[[function(){}]]})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ie(e,t){var n=A(e,t);console.log("checking structure:",n),n.map((function(e){"viz-section"===e.sectionType&&e.steps.map((function(t,n){""!==t.visual&&(0===n?C.Ys("#".concat(e.key,"_").concat(n)).style("opacity",1):C.Ys("#".concat(e.key,"_").concat(n)).style("opacity",0))}))}))}function Te(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ce(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Ae=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.index=n,this.callback=r,this._isActivate=!1}var t,n;return t=e,(n=[{key:"activate",value:function(e){this._isActivate||(this._isActivate=!0,this.el.classList.add("active"),this.callback(e))}},{key:"deactivate",value:function(){this._isActivate&&(this._isActivate=!1,this.el.classList.remove("active"))}}])&&Ce(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),De=n(52732),_e=n.n(De),Oe=n(89438);function Re(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function je(e,t){var n=[];[".viz",".full-page-section > img",".full-page-section > video"].forEach((function(e){n=n.concat(Array.from(document.querySelectorAll(e)))})),(0,Oe.Z)(n,{stickyBitStickyOffset:40}),new(_e())({elements_selector:".lazy",threshold:500}),Promise.all([ke(e,t)]).then((function(e){var t,n;(function(e){var t=0,n=0,r=window.innerHeight,a=!1,c=0,o=[],i=[],s=[],l=document.querySelector(".article-reminder"),u=document.querySelector("header > .progress"),m=document.querySelector(".intro-section h1"),p=document.querySelectorAll(".viz-section");if(p.length!==e.length)throw new Error("The number of viz sections (".concat(p.length,") mismatch with the length of the first ")+"dimension of the callbacks array (".concat(e.length,"). Please, be sure that the two elements ")+"have the same size.");p.forEach((function(t,n){var r,a=function(e){if(Array.isArray(e))return Te(e)}(r=t.querySelectorAll("section"))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return Te(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Te(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(a.length!==e[n].length)throw new Error("The number of steps (".concat(a.length,") in the viz section #").concat(n+1," mismatch with the ")+"number of callbacks specified (".concat(e[n].length,') at the index "').concat(n,'". Please, be sure that the two ')+"elements have the same size.");o=o.concat(a.map((function(t,r){return new Ae(t,"".concat(n,"-").concat(r),e[n][r])}))),i=i.concat(i,t.querySelector(".viz > *"))}));var d=function(){var e=window.pageYOffset||document.documentElement.scrollTop;o.forEach((function(e){var a=e.el.getBoundingClientRect();r-a.top-n>0&&a.top+a.height-t>0?s.push(e):e.deactivate()}));var a=m.getBoundingClientRect().bottom<=0,i=l.classList.contains("visible");a&&!i?l.classList.add("visible"):!a&&i&&l.classList.remove("visible"),s.forEach((function(t,n){e>=c?n===s.length-1?t.activate("down"):t.deactivate():0===n?t.activate("up"):t.deactivate()})),f(),s=[],c=e},f=function(){var e=(document.body.scrollTop||document.documentElement.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100;u.style.width=e+"%"},v={initialize:function(){if(a)throw new Error("The scroller is already initialized.");return a=!0,window.addEventListener("scroll",d),window.addEventListener("resize",(function(){r=window.innerHeight,f()})),(window.pageYOffset||document.documentElement.scrollTop)>0&&d(),f(),v},offsetTop:function(e){if(void 0===e)return t;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return t=e,v},offsetBottom:function(e){if(void 0===e)return n;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return n=e,v}};return v})((t=e,n=1,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Re(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Re(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]).offsetTop(40).offsetBottom(0).initialize()}))}function ze(e){return e.rendered&&(0,c.useEffect)((function(){je(e.contentData,e.paramsData)}),[]),t=A(e.contentData,e.paramsData),n={},Object.keys(t).map((function(e,r){var a=t[e];a.sectionType===h?n[e]=c.createElement(o,{key:a.key,sectionType:a.sectionType,optionData:a.optionData,amorce:(0,i.ZP)(a.amorce),background:a.background,classes:a.classes}):a.sectionType===E?n[e]=c.createElement(s,{key:a.key,id:a.key,sectionType:a.sectionType,texts:a.texts,background:a.background,classes:a.classes,visuelclasses:a.visuelclasses,visual:a.visual,filename:a.filename}):a.sectionType===y?n[e]=c.createElement(T,{key:a.key,id:a.key,sectionType:a.sectionType,background:a.background,classes:a.classes,visuelclasses:a.visuelclasses,visual:a.visual,mainTitle:a.texts.mainTitle,subTitle:a.texts.subTitle,filename:a.filename}):a.sectionType===b&&(n[e]=c.createElement(I,{key:a.key,listID:a.listID,steps:a.steps,classed:a.classed,mediaInfo:a.mediaInfo,background:a.background}))})),Object.values(n);var t,n}document.querySelector("#root").innerHTML=r.E,Promise.all([Promise.resolve().then(n.t.bind(n,20745,19)),Promise.resolve().then(n.t.bind(n,67294,19))]).then((function(e){var t=e[0],n=e[1];C.gyn(a.google_config.contentURL).then((function(e){C.gyn(a.google_config.paramsURL).then((function(r){t.createRoot(document.getElementById("root")).render(n.createElement(ze,{contentData:e,paramsData:r,rendered:!0})),document.querySelector("#footerContainer").innerHTML=C.Ys("#footerContent").node().innerHTML}))}))}))},40207:e=>{e.exports={google_config:{contentURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=0&single=true&output=csv",paramsURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=409950237&single=true&output=csv",localContentURL:"./data/structure/contentData.csv",localParamsURL:"./data/structure/paramsData.csv"}}}},e=>{var t=t=>e(e.s=t);e.O(0,[216],(()=>(t(28594),t(35666),t(70128)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,