(self.webpackChunkscrollytelling_template=self.webpackChunkscrollytelling_template||[]).push([[179],{86702:(e,t,n)=>{"use strict";var r=n(40207),a=n(67294),c=n(25935);function o(e){var t=a.createElement("section",{className:"intro-section ".concat(e.classes)},a.createElement("h5",{className:"overTitle"},e.amorce),a.createElement("h1",null,(0,c.ZP)(e.optionData.title)),a.createElement("address",null,a.createElement("div",{className:"date"})));return e.background?a.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},t):t}function i(e){var t,n=String(e.classes).includes("citation");n&&(t={text:String(e.texts).split("/")[0],author:String(e.texts).split("/")[1]});var r,o=String(e.classes).includes("bigNumber");o&&(r={number:String(e.texts).split("/")[0],underText:String(e.texts).split("/")[1]});var i=e.visual,s=""!==i?"Photo"===e.visual?a.createElement("img",{key:"photoTextSection_".concat(e.id),id:"photoTextSection_".concat(e.id),src:"assets/img/675/".concat(e.filename),"data-srcset":"assets/img/2048/".concat(e.filename," 2048w, assets/img/990/").concat(e.filename," 990w, assets/img/675/").concat(e.filename," 675w, assets/img/1350/").concat(e.filename," 1350w, assets/img/100/").concat(e.filename," 100w, assets/img/495/").concat(e.filename," 495w, assets/img/1024/").concat(e.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(e.visuelclasses),style:{paddingBottom:"1rem"}}):"Video"===e.visual?a.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(e.visuelclasses),preload:"metadata",key:"videoTextSection_".concat(e.id),id:"videoTextSection_".concat(e.id)},a.createElement("source",{src:"assets/videos/".concat(e.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):a.createElement("div",null):a.createElement("div",null),l=a.createElement("section",{className:"text-section ".concat(e.classes)},n?a.createElement("blockquote",{className:"small"},a.createElement("div",null,a.createElement("p",null,a.createElement("b",null,(0,c.ZP)(t.text))),a.createElement("p",{className:"author"},t.author),a.createElement("div",{className:"symbol"}))):o?a.createElement("div",{className:"container-number"},a.createElement("div",{className:"numbers"},a.createElement("h2",null,r.number),a.createElement("small",null,r.underText))):a.createElement("div",null,i?s:a.createElement("div",null),String(e.texts).startsWith("<")?(0,c.ZP)(e.texts):a.createElement("p",null,(0,c.ZP)(e.texts))));return e.background?a.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},l):l}var s,l=n(45697),u=n.n(l),m=["title","src"];function p(){return p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},p.apply(this,arguments)}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e){var t,n,r=e.title,c=e.src,o=function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,m),i=(0,a.useRef)(),s=(t=(0,a.useState)(500),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(t,n)||function(e,t){if(e){if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?d(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=s[0],u=s[1],f=(0,a.useCallback)((function(e){var t=e.data,n=void 0===t?{}:t;e.source===i.current.contentWindow&&"string"!=typeof n&&n["datawrapper-height"]}),[u,i]);return(0,a.useEffect)((function(){return window.addEventListener("message",f),function(){return window.removeEventListener("message",f)}}),[l,u,f]),a.createElement("iframe",p({ref:i,scrolling:"no",frameBorder:"0",width:"100%"},o,{title:r,src:c,height:l}))}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}f.propTypes={title:u().string.isRequired,src:u().string.isRequired,loading:u().oneOf(["eager","lazy"])};var g="intro-titre",h="pleine-page-titre",y="texte-classique",E="viz-section",b="centré",x="Photo",w="Video",S="Visualisation",P="iframe",N=(v(s={titre:"Titre",auteurs:"Auteurs",date:"Date"},"date","Date"),v(s,"urls","LienAuteurs"),v(s,"lienfichiersource","LienFichierSource"),s);function k(e){var t,n,r,o=a.createElement("section",{id:e.listID,className:e.classed},a.createElement("div",{className:"steps ".concat((t=e.steps,n=t.map((function(e,t){return e.stepclasses})),r=new Array(n.length),n.forEach((function(e,t){if(Array.isArray(e))e.forEach((function(e){for(var a=t;a<n.length;a++)n[a].includes(e)&&(r[a]=e)}));else if("string"==typeof e)for(var a=t;a<n.length;a++)n[a].includes(e)&&(r[a]=e)})),r.reduce((function(e,t){return e===t&&""!==e&&""!==t?e:""}))))},e.steps.map((function(e,t){var n,r=String(e.stepclasses).includes("citation");return r&&(n={text:String(e.text).split("/")[0],author:String(e.text).split("/")[1]}),a.createElement("section",{key:t,className:e.stepclasses},r?a.createElement("blockquote",{className:"small"},a.createElement("div",null,a.createElement("p",null,a.createElement("b",null,(0,c.ZP)(n.text))),a.createElement("p",{className:"author"},n.author),a.createElement("div",{className:"symbol"}))):String(e.text).startsWith("<")?(0,c.ZP)(e.text):a.createElement("p",null,e.text?(0,c.ZP)(e.text):""))}))),a.createElement("div",{className:"viz",id:"viz"},e.steps.map((function(t,n){return t.visual===x?a.createElement("img",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),src:"assets/img/675/".concat(t.filename),"data-srcset":"assets/img/2048/".concat(t.filename," 2048w, assets/img/990/").concat(t.filename," 990w, assets/img/675/").concat(t.filename," 675w, assets/img/1350/").concat(t.filename," 1350w, assets/img/100/").concat(t.filename," 100w, assets/img/495/").concat(t.filename," 495w, assets/img/1024/").concat(t.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(t.visuelclasses)}):t.visual===w?a.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(t.visuelclasses),preload:"metadata",key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n)},a.createElement("source",{src:"assets/videos/".concat(t.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):t.visual===P?a.createElement("div",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),className:"iframeContainer"},a.createElement(f,{title:"Mesures d'arsenic",src:"".concat(t.filename)})):t.visual===S?a.createElement("div",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),className:"iframeContainer ".concat(t.visuelclasses)}):void 0}))));return e.background?a.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},o):o}function I(e){var t=a.createElement("section",{className:"full-page-section ".concat(e.classes)},a.createElement("div",{className:"titleImage"},e.filename?"Photo"===e.visual?a.createElement("img",{key:"".concat(e.id),id:"".concat(e.id),src:"assets/img/675/".concat(e.filename),"data-srcset":"assets/img/2048/".concat(e.filename," 2048w, assets/img/990/").concat(e.filename," 990w, assets/img/675/").concat(e.filename," 675w, assets/img/1350/").concat(e.filename," 1350w, assets/img/100/").concat(e.filename," 100w, assets/img/495/").concat(e.filename," 495w, assets/img/1024/").concat(e.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(e.visuelclasses)}):"Video"===e.visual?a.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(e.visuelclasses),preload:"metadata",key:"".concat(e.id),id:"".concat(e.id)},a.createElement("source",{src:"assets/videos/".concat(e.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):a.createElement("div",null):a.createElement("div",null),e.filename?a.createElement("div",{className:"filter"}):a.createElement("div",null)),a.createElement("div",{className:"captionholder"},a.createElement("h2",{className:"caption ".concat(e.mainTitle.class)},e.mainTitle.text),e.subTitle?a.createElement("h3",{className:"caption ".concat(e.subTitle.class)},e.subTitle.text):a.createElement("div",null)));return e.background?a.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},t):t}n(93162);var T=n(38682);function C(e,t){var n={},r=[],a=O(t);return console.log("content Data",e),e.map((function(e,t){if(e.Section===g){var c=e.StepClasses,o=e.TEXTE,i=e.StyleFond;n[e.SectionID]={key:t,sectionType:g,optionData:a,amorce:o,background:i,classes:D(c),gameid:e.GameID}}else if(e.Section===y){var s=e.TEXTE,l=e.StepClasses,u=e.StyleFond;n[e.SectionID]={key:t,sectionType:y,texts:s,visual:e.VISUEL,filename:e.NomFichierSource,background:u,classes:D(l),visuelclasses:D(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===h){var m=e.TEXTE;A(e.TEXTE)&&(m=JSON.parse(e.TEXTE)),n[e.SectionID]={key:t,sectionType:h,texts:A(e.TEXTE)?m:{mainTitle:{class:"",text:m},subTitle:null},visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,classes:D(e.StepClasses),visuelclasses:D(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===E){var p={attributs:e.Attributs,scrollType:e.Step,text:e.TEXTE,visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,visuelclasses:D(e.VisuelClasses),stepclasses:D(e.StepClasses),gameid:e.GameID};if(n.hasOwnProperty(e.SectionID)){var d=n[e.SectionID];d.push(p),n[e.SectionID]=d}else n[e.SectionID]=[p],r.push(e.SectionID)}})),r.map((function(e){var t=n[e],r=t[0].attributs===b?" full-page":"",a=t[0].background;n[e]={key:e,sectionType:E,listID:e,steps:t,classed:"viz-section".concat(r),mediaInfo:0,background:a}})),Object.values(n)}function _(e,t){var n=C(e,t),r=[];return n.map((function(e){if("viz-section"===e.sectionType){var t=[];e.steps.map((function(n,r){var a=function(){};if(""!==n.visual){var c=Array(e.steps.length).fill(null).map((function(e,t){return t})).filter((function(e){return e!==r})).map((function(t){return"#".concat(e.key,"_").concat(t)})).join(",");a=function(){T.Ys("#".concat(e.key,"_").concat(r)).transition().style("opacity",1).style("display",null),""!==c&&T.td_("".concat(c)).transition().style("opacity",0).style("display","none")}}else if(String(n.filename).startsWith("TAGID")){var o=String(n.filename).split("=")[1],i=parseInt(o.split("_")[1]),s=Array(e.steps.length).fill(null).map((function(e,t){return t})).filter((function(e){return e!==i})).map((function(t){return"#".concat(e.key,"_").concat(t)})).join(",");a=function(){T.Ys("#".concat(o)).transition().style("opacity",1).style("display",null),""!==s&&T.td_("".concat(s)).transition().style("opacity",0).style("display","none")}}t.push(a)})),r.push(t)}})),r}function A(e){try{JSON.parse(e)}catch(e){return!1}return!0}function D(e){return Array.from(e.split(";")).join(" ")}function O(e){return{title:e[0][N.titre],authors:e[0][N.auteurs],urls:e[0][N.urls],date:e[0][N.date]}}n(9208);n(83731).accessToken="pk.eyJ1IjoibGVkZXZvaXIiLCJhIjoiY2p2bW81dHU2MWV1cTRhcXIzaXZqMGYxciJ9.WrIF8o69aR_TstDFu6Qyag",n(6899);var j=n(20745);function R(e){var t;return(0,a.useEffect)((function(){T.Ys(".gauges").selectAll(".gauge").nodes().forEach((function(t){var n=50;"dollars"===T.Ys(t).attr("id")&&(n=e.dollars);var r=n>0?Math.round(e.committed/50*100):0,a=n>0?Math.round(n/50*100):0;T.Ys(t).select(".gaugeColorHolder").select(".committed").style("width","".concat(r,"%")),T.Ys(t).select(".gaugeColor").style("width","".concat(a,"%"))}))})),a.createElement("div",{className:"gauges"},a.createElement("div",{id:"dollars",className:"gauge dollarGauge"},a.createElement("div",{className:"gaugeColorHolder ".concat(e.dollars<0?"red":"")},a.createElement("div",{className:"gaugeColor ".concat(e.dollars<0?"red":"blue")}),0!=e.committed?a.createElement("div",{className:"committed ".concat(e.dollars<0?"red":"blue")}):"",a.createElement("div",{className:"value"},a.createElement("p",null,"Budget • ",(0,c.ZP)((t=e.dollars,Math.abs(t)>1?"".concat(t,"&nbsp;jetons"):"".concat(t,"&nbsp;jeton"))))))))}function M(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function z(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){M(c,r,a,o,i,"next",e)}function i(e){M(c,r,a,o,i,"throw",e)}o(void 0)}))}}function V(e){var t=(0,a.useCallback)(z(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("starting game"),e.gameStart();case 2:case"end":return t.stop()}}),t)}))));return a.createElement("div",{className:"gameBox transparent"},a.createElement("div",{className:"introBox"},e.introElem),a.createElement("div",{className:"userBox"},a.createElement("div",{className:"startbutton",onClick:t},a.createElement("p",null,"Commencer le jeu"))))}function Y(e){return a.createElement("div",{className:"monitoring"},a.createElement("div",{className:"monitoring_content"},a.createElement("div",{className:"column"},a.createElement("div",{className:"monitoring_value"},a.createElement(R,{dollars:e.dollars,committed:e.committed})))),e.terawatts||0===e.terawatts?a.createElement("div",{className:"monitoring_content"},a.createElement("div",{className:"column"},a.createElement("div",{className:"monitoring_header"},a.createElement("h5",null,"Électricité produite • ",e.terawatts," TWh")))):a.createElement("div",null))}function L(e){return e.split("_").slice(1).map((function(e){return parseInt(e)}))}function Z(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function B(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){Z(c,r,a,o,i,"next",e)}function i(e){Z(c,r,a,o,i,"throw",e)}o(void 0)}))}}function q(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function U(e){var t,n,r=(t=(0,a.useState)(null),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(t,n)||function(e,t){if(e){if("string"==typeof e)return q(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?q(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];(0,a.useEffect)((function(){}),[]),(0,a.useEffect)((function(){T.td_(".choicebutton").select(".butn").classed("selected",!1),o&&T.Ys(o.obj).select(".butn").classed("selected",!0)}),[o]);var s=(0,a.useCallback)(function(){var t=B(regeneratorRuntime.mark((function t(n,r,a){var c;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:(c=String(e.curPrompt.Trigger_next).split(";")).length>1?e.changePrompt(String(c[a]).replace(/(\r\n|\n|\r)/gm,"")):e.changePrompt(String(c[0]).replace(/(\r\n|\n|\r)/gm,"")),e.updateDollars(parseInt(n)),e.updatePerformance(r),i(null);case 5:case"end":return t.stop()}}),t)})));return function(e,n,r){return t.apply(this,arguments)}}()),l=(0,a.useCallback)(B(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("previous prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1)),i(null);case 2:case"end":return t.stop()}}),t)}))));return a.createElement("div",{className:"choices"},a.createElement("div",{className:"row"},e.choices.map((function(t,n){var r,s=e.choices_values[n].split("_")[0],l=L(e.choices_values[n]);return a.createElement("div",{className:"choicebutton",key:n,onClick:function(e){!function(e,t,n,r){i({obj:e.target,cost:parseInt(t),performance:n,index:r})}(e,s,l,n)}},a.createElement("div",{id:n,className:"butn"},a.createElement("div",{className:"holder icon"},a.createElement("img",{src:o&&o.index===n?"./assets/img/Off.svg":"./assets/img/On.svg"})),a.createElement("div",{className:"holder label"},a.createElement("h4",null,t),e.choices_values.map((function(e,t){return parseInt(e.split("_")[0])})).filter((function(e){return!Number.isNaN(e)})).every((function(e){return 0===e}))?"":a.createElement("p",null,(0,c.ZP)((r=s,Math.abs(r)>1?"".concat(Math.abs(r),"&nbsp;JETONS"):"".concat(Math.abs(r),"&nbsp;JETON")))))))}))),a.createElement(Y,{showTWh:!1,dollars:o&&o.hasOwnProperty("cost")?parseInt(e.gauges.props.dollars)+parseInt(o.cost):e.gauges.props.dollars,committed:o&&o.hasOwnProperty("cost")&&parseInt(o.cost)<0?Math.abs(o.cost):0,performance:e.gauges.props.performance}),a.createElement("div",{className:"row"},a.createElement("div",{className:"column"},e.curIndex>0?a.createElement("div",{className:"actionbutton prev",onClick:l},a.createElement("div",{className:"butn"},a.createElement("p",null,"Previous"))):a.createElement("div",null)),a.createElement("div",{className:"column"},a.createElement("div",{className:"actionbutton next ".concat(o?"":"disabled"),onClick:function(){o?s(o.cost,o.performance,o.index):console.log("Disabled.")}},a.createElement("div",{className:"butn"},a.createElement("p",null,"Poursuivre"))))))}function H(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function W(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){H(c,r,a,o,i,"next",e)}function i(e){H(c,r,a,o,i,"throw",e)}o(void 0)}))}}function X(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(e,t)||F(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function F(e,t){if(e){if("string"==typeof e)return G(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?G(e,t):void 0}}function G(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function J(e){var t=X((0,a.useState)([]),2),n=t[0],r=t[1];(0,a.useEffect)((function(){o()}),[]),(0,a.useEffect)((function(){}),[n]);var o=function(){r(e.choices.map((function(e){return null})))},i=function(e){var t=e.reduce((function(e,t){return t&&(e+=t.cost),e}),0),n=[0,0,0];return e.forEach((function(e,t){e&&(n=n.map((function(t,n){return parseInt(t)+parseInt(e.performance[n])})))})),[t,n]},s=(0,a.useCallback)(function(){var t=W(regeneratorRuntime.mark((function t(n){var r,a,c,s,l;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=e.curPrompt.Trigger_next,e.changePrompt(u(r)),a=i(n),c=X(a,2),s=c[0],l=c[1],e.updateDollars(parseInt(s)),e.updatePerformance(l),o();case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),l=(0,a.useCallback)(W(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("previous prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1)),o();case 2:case"end":return t.stop()}}),t)})))),u=function(e){var t,r=String(e).split("_"),a=String(r[0]).split(";"),c=n.filter((function(e){return null!==e}));return t=r.length>1&&c.length>0?c.length>1?String(r[1]):String(a[n.indexOf(c[0])]):String(r[0]),console.log("checking chosenString:",t),t.replace(/(\r\n|\n|\r)/gm,"")};return a.createElement("div",{className:"choices"},a.createElement("div",{className:"row"},e.choices.map((function(t,o){var i,s=e.choices_values[o].split("_")[0],l=L(e.choices_values[o]);return a.createElement("div",{className:"selectionbutton",key:o,onClick:function(e){!function(e,t,a,c){var o,i=function(e){if(Array.isArray(e))return G(e)}(o=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||F(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();n[t]?i[t]=null:i[t]={obj:e.target,cost:parseInt(a),performance:c},r(i)}(e,o,s,l)}},a.createElement("div",{id:o,className:"butn"},a.createElement("div",{className:"holder selectionBox ".concat(n[o]?"selected":"")},a.createElement("div",null,a.createElement("p",null,"+"))),a.createElement("div",{className:"holder label"},a.createElement("h4",null,t),e.choices_values.map((function(e,t){return parseInt(e.split("_")[0])})).filter((function(e){return!Number.isNaN(e)})).every((function(e){return 0===e}))?"":a.createElement("p",null,(0,c.ZP)((i=s,Math.abs(i)>1?"".concat(Math.abs(i),"&nbsp;JETONS"):"".concat(Math.abs(i),"&nbsp;JETON")))))))}))),a.createElement(Y,{showTWh:!1,dollars:n&&n.length>0?parseInt(e.gauges.props.dollars)+parseInt(i(n)[0]):e.gauges.props.dollars,committed:n&&n.length>0&&parseInt(i(n)[0])<0?Math.abs(parseInt(i(n)[0])):0}),a.createElement("div",{className:"row"},a.createElement("div",{className:"column"},e.curIndex>0?a.createElement("div",{className:"actionbutton prev",onClick:l},a.createElement("div",{className:"butn"},a.createElement("p",null,"Previous"))):a.createElement("div",null)),a.createElement("div",{className:"column"},a.createElement("div",{className:"actionbutton next ".concat(n?"":"disabled"),onClick:function(){n?s(n):console.log("Disabled.")}},a.createElement("div",{className:"butn"},a.createElement("p",null,"Poursuivre"))))))}function $(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function Q(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){$(c,r,a,o,i,"next",e)}function i(e){$(c,r,a,o,i,"throw",e)}o(void 0)}))}}function K(e){var t=(0,a.useCallback)(Q(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("prev prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)})))),n=(0,a.useCallback)(Q(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.curPrompt.Trigger_next,console.log("Checking trigger next: ",n),e.changePrompt(n);case 3:case"end":return t.stop()}}),t)})))),r=(0,a.useCallback)(Q(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.gameReset();case 1:case"end":return t.stop()}}),t)}))));return a.createElement("div",{className:"printprompt"},a.createElement("div",{className:"message"},a.createElement("p",null,e.message)),a.createElement("div",{className:"actionbutton prev",onClick:t},a.createElement("div",{className:"butn"},a.createElement("p",null,"Previous"))),"STARTOVER"===e.curPrompt.Trigger_next?a.createElement("div",{className:"actionbutton next",onClick:r},a.createElement("div",{className:"butn"},a.createElement("p",null,"Recommencer"))):a.createElement("div",{className:"actionbutton next",onClick:n},a.createElement("div",{className:"butn"},a.createElement("p",null,"Poursuivre"))))}function ee(e){return function(e){if(Array.isArray(e))return ce(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||ae(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function te(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function ne(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){te(c,r,a,o,i,"next",e)}function i(e){te(c,r,a,o,i,"throw",e)}o(void 0)}))}}function re(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(e,t)||ae(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ae(e,t){if(e){if("string"==typeof e)return ce(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ce(e,t):void 0}}function ce(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function oe(e){var t=re((0,a.useState)(0),2),n=t[0],r=t[1],o=re((0,a.useState)(0),2),i=o[0],s=o[1],l=re((0,a.useState)([0,0]),2),u=l[0],m=l[1],p=re((0,a.useState)([]),2),d=p[0],f=p[1],v=re((0,a.useState)([]),2),g=v[0],h=v[1];(0,a.useEffect)((function(){var e=w(),t=e.map((function(){return 0})),n=e.map((function(e){return Math.abs(e.unitValue)}));f(t),h(n)}),[]),(0,a.useEffect)((function(){var e=d.reduce((function(e,t,n){return w()[n],e+Math.abs(t)}),0),t=d.reduce((function(e,t,n){var r=w()[n];return e+Math.round(Math.abs(t/r.unitValue)*r.unitTWhvalue)}),0),n=[0,0];d.forEach((function(e,t){var r=w()[t];n=n.map((function(t,n){return 0===n?t+e/r.unitValue*r.unitEnvirovalue:1===n?t+e/r.unitValue*r.unitPopuvalue:void 0}))})),r(e),s(t),m(n)}),[d]);var y=(0,a.useCallback)(ne(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("prev prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)})))),E=(0,a.useCallback)(ne(regeneratorRuntime.mark((function t(){var r,a,c;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=String(e.curPrompt.Trigger_next).split("_"),1==(a=String(r[0]).split(";")).length?e.changePrompt(String(a).replace(/(\r\n|\n|\r)/gm,"")):a.length>1&&(console.log("checking non unique:",b(d)),b(d)?e.changePrompt(N(a,r[1])):(c=d.reduce((function(e,t,n,r){return t>r[e]?n:e}),0),e.changePrompt(String(a[c]).replace(/(\r\n|\n|\r)/gm,"")))),d[4]>0&&e.updateMemoryObj("investedModernization",!0),e.updateDollars(-n),e.updatePerformance([i].concat(u));case 6:case"end":return t.stop()}}),t)})))),b=function(e){return new Set(e).size!==e.length},x=function(e,t){var n=t.split("_");return{name:e,unitValue:parseInt(n[0]),unitTWhvalue:parseInt(n[1]),unitEnvirovalue:parseInt(n[2]),unitPopuvalue:parseInt(n[3])}},w=function(){return e.choices.map((function(t,n){return x(t,e.choices_values[n])}))},S=function(e){var t=w()[e],r=[!1,!1];return 0===Math.abs(d[e])&&(r[0]=!0),n+parseInt(Math.abs(t.unitValue))>25&&(r[1]=!0),r},P=function(e,t,n,r){var a,c,o=ee(d);o[t]+n*g[t]>=0&&(n>0?(a=n*g[t],c=0,d.forEach((function(e,t){c+=e})),c+a>25||(o[t]=o[t]+n*g[t])):o[t]=o[t]+n*g[t],f(o))},N=function(e,t){var n,r=Math.max.apply(Math,ee(d)),a=[];return d.forEach((function(e,t){return e===r?a.push(t):null})),a.length>1?a.includes(0)?(console.log("equal max units contains barrages"),n=String(e[0])):a.includes(1)?(console.log("equal max units contains eoliens"),n=String(e[1])):(console.log("equality between non important choices"),n=String(t)):n=String(e[a[0]]),n.replace(/(\r\n|\n|\r)/gm,"")};return a.createElement("div",{className:"repartition"},a.createElement("div",{className:"optionZone"},e.choices.map((function(t,n){return x(t,e.choices_values[n])})).map((function(e,t){return a.createElement("div",{className:"optionUnit",key:t},a.createElement("div",{className:"selectorZone"},a.createElement("div",{className:"division minusZone ".concat(S(t)[0]?"disabled":""),onClick:function(e){return P(0,t,-1)}},a.createElement("h3",null,"-")),a.createElement("div",{className:"division centralZone"},void 0===d[t]||0===d[t]?a.createElement("img",{src:"assets/img/".concat((r=t,["Hydro.svg","Eolien.svg","Nucleaire.svg","Solaire.svg","Modernisation.svg"][r]))}):a.createElement("h3",null,d[t])),a.createElement("div",{className:"division plusZone ".concat(S(t)[1]?"disabled":""),onClick:function(e){return P(0,t,1)}},a.createElement("h3",null,"+"))),a.createElement("div",{className:"textZone"},a.createElement("h3",null,e.name),a.createElement("div",{className:"inlinetext"},a.createElement("p",null,(0,c.ZP)((n=e.unitValue,Math.abs(n)>1?"".concat(Math.abs(n),"&nbsp;jetons"):"".concat(Math.abs(n),"&nbsp;jeton")))," • ",e.unitTWhvalue," TWh"))));var n,r}))),a.createElement(Y,{showTWh:!0,dollars:e.gauges.props.dollars-n,committed:n,terawatts:i}),e.curIndex>0?a.createElement("div",{className:"actionbutton prev",onClick:y},a.createElement("div",{className:"butn"},a.createElement("p",null,"Previous"))):a.createElement("div",null),a.createElement("div",{className:"actionbutton next ".concat(n>0?"":"disabled"),onClick:E},a.createElement("div",{className:"butn"},a.createElement("p",null,"Poursuivre"))))}n(97762);var ie=n(83290);function se(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function le(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){se(c,r,a,o,i,"next",e)}function i(e){se(c,r,a,o,i,"throw",e)}o(void 0)}))}}function ue(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(e,t)||function(e,t){if(e){if("string"==typeof e)return me(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?me(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function me(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function pe(e){var t=ue((0,a.useState)(null),2),n=t[0],r=t[1];(0,a.useEffect)((function(){o()}),[]),(0,a.useEffect)((function(){n?T.Ys(".popUp-bg").style("display","unset"):T.Ys(".popUp-bg").style("display","none")}),[n]);var c=(0,ie.Z)().attr("class","d3-tip adjusted").direction("n").html((function(e){return console.log("got d: ",e),"\n                  <h4>".concat(e.title,"</h4>\n                  <p>").concat(e.supp_text,"</p>\n                  ")})),o=function(){Promise.all([T.LsS(e.map[0]),T.LsS(e.map[1])]).then((function(t){var n=ue(t,2),r=n[0],a=n[1];T.Ys("#bg-map").node().append(r.documentElement),T.Ys("#on-icons").node().append(a.documentElement);var o=T.Ys("#on-icons").select("svg");o.call(c),T.Ys(".gameScreen").node().appendChild(T.Ys(".d3-tip").node());var s=o.select("#Icone-On").selectAll("g"),l=String(e.curPrompt.Choix).split(";"),u=String(e.message).split(";");s.nodes().reverse().map((function(e,t){var n={title:l[t],supp_text:u[t]};T.Ys(e).on("click",(function(t,r,a){t.stopPropagation(),c.show(n,e),i(t.target.parentElement,!1)})).on("mouseover",(function(t,r,a){console.log("checking d: ",t.target.parentElement),t.stopPropagation(),c.show(n,e),i(t.target.parentElement,!1)})).on("mouseout",(function(t,n,r){c.hide(e),i(t.target.parentElement,!0)}))})),T.Ys(".gameBox").on("click",(function(){c.hide()}))}))},i=function(e,t){!1===t?T.Ys(e).style("opacity",0):T.Ys(e).style("opacity",1)},s=(0,a.useCallback)(le(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("prev prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)})))),l=(0,a.useCallback)(le(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.curPrompt.Trigger_next,console.log("Checking trigger next: ",n),e.changePrompt(n);case 3:case"end":return t.stop()}}),t)}))));return a.createElement("div",{className:"printprompt mapnavigator"},a.createElement("div",{className:"popUp-bg"},n?a.createElement("div",{className:"popUp-box"},a.createElement("h4",null,n.title),a.createElement("p",null,n.supp_text),a.createElement("div",{className:"actionbutton",onClick:function(){return r(null)}},a.createElement("div",{className:"butn"},a.createElement("p",null,"Fermer")))):a.createElement("div",null)),a.createElement("div",{className:"mapHolder"},a.createElement("div",{className:"superposedMap"},a.createElement("div",{id:"bg-map",className:"map noClick"}),a.createElement("div",{id:"on-icons",className:"map"}))),a.createElement("div",{className:"actionbutton prev",onClick:s},a.createElement("div",{className:"butn"},a.createElement("p",null,"Previous"))),a.createElement("div",{className:"actionbutton next",onClick:l},a.createElement("div",{className:"butn"},a.createElement("p",null,"Suivant"))))}function de(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function fe(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){de(c,r,a,o,i,"next",e)}function i(e){de(c,r,a,o,i,"throw",e)}o(void 0)}))}}function ve(e){(0,a.useEffect)((function(){console.log("got bilan : ",e.curPrompt)}),[]);var t,n,r,o,i=(0,a.useCallback)(fe(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.curPrompt.Trigger_next,console.log("Checking trigger next: ",n),e.changePrompt(n);case 3:case"end":return t.stop()}}),t)}))));return a.createElement("div",{className:"bilanContent"},a.createElement("div",{className:"updatableText"},(t=e.curPrompt.Texte.split(";"),n=e.curPrompt.Texte_Supp.split(";"),r=[],o=t[0].replace("*newProd*",e.performance[0]),r.push(o),n[0],n[1],n[2],n[3],r).map((function(e,t){return a.createElement("p",{key:t},(0,c.ZP)(e))}))),a.createElement("div",{className:"actionbutton next",onClick:i},a.createElement("div",{className:"butn"},a.createElement("p",null,"Poursuivre"))))}function ge(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function he(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){ge(c,r,a,o,i,"next",e)}function i(e){ge(c,r,a,o,i,"throw",e)}o(void 0)}))}}function ye(e){var t=(0,a.useCallback)(he(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("RESETING GAME"),e.gameReset();case 2:case"end":return t.stop()}}),t)}))));return a.createElement("div",{className:"promptBox"},a.createElement("div",{className:"header"},a.createElement("div",{className:"surtitre"},a.createElement("h4",null,"Fin du jeu")),a.createElement("div",{className:"question"},a.createElement("p",null,"(reformuler) Le jeu a pris fin à cause de : ","".concat(e.raison)))),a.createElement("div",{className:"actionSection"},a.createElement("div",{className:"actionbutton next",onClick:t},a.createElement("div",{className:"butn"},a.createElement("p",null,"Recommencer")))))}function Ee(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function be(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){Ee(c,r,a,o,i,"next",e)}function i(e){Ee(c,r,a,o,i,"throw",e)}o(void 0)}))}}function xe(e){var t=(0,a.useCallback)(be(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("prev prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)})))),n=(0,a.useCallback)(function(){var t=be(regeneratorRuntime.mark((function t(n,r){var a;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:a=e.curPrompt.Trigger_next,console.log("Checking trigger next: ",a),e.changePrompt(a),e.updateDollars(parseInt(n)),e.updatePerformance(r);case 5:case"end":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}()),r=function(e){var t=String(e).split("_");return{cost:t[0],performance:t.splice(1)}};return a.createElement("div",{className:"printprompt"},a.createElement("div",{className:"message"},a.createElement("p",null,e.choices[e.whichEventHappens])),a.createElement("div",{className:"actionbutton prev",onClick:t},a.createElement("div",{className:"butn"},a.createElement("p",null,"Previous"))),a.createElement("div",{className:"actionbutton next",onClick:function(){return n(r(e.choices_values[e.whichEventHappens]).cost,r(e.choices_values[e.whichEventHappens]).performance)}},a.createElement("div",{className:"butn"},a.createElement("p",null,"Poursuivre"))))}function we(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Se(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?we(Object(n),!0).forEach((function(t){Pe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):we(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Pe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ne(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function ke(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){Ne(c,r,a,o,i,"next",e)}function i(e){Ne(c,r,a,o,i,"throw",e)}o(void 0)}))}}function Ie(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Te(e){var t,n,r=(t=(0,a.useState)({investedModernization:!1,builtDam:!1}),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Ie(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ie(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];(0,a.useEffect)((function(){}),[]);var s,l=(0,a.useCallback)(ke(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:i({investedModernization:!1,builtDam:!1}),e.gameReset();case 2:case"end":return t.stop()}}),t)})))),u=(0,a.useCallback)(function(){var t=ke(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("Changing prompt for : ",n),e.changePrompt(n);case 2:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),m=(0,a.useCallback)(function(){var t=ke(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:Number.isInteger(n)&&e.updateDollars(n);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),p=(0,a.useCallback)(function(){var t=ke(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.updatePerformance(n);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),d=(0,a.useCallback)(function(){var e=ke(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(r=Se({},o))[t]=n,i(r);case 3:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()),f=function(t){switch(t){case"Repartition":return a.createElement(oe,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix).split(";"),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),changePrompt:u,curIndex:e.curIndex,updateDollars:m,updatePerformance:p,updateMemoryObj:d,gauges:e.gauges});case"Carte":return a.createElement(pe,{curPrompt:e.curPrompt,message:String(e.curPrompt.Texte_Supp),changePrompt:u,curIndex:e.curIndex,map:"Q1-1"===e.curIndex?["assets/img/Carte-Hydro.svg","assets/img/Carte-Hydro-icone-on.svg"]:["assets/img/Carte-Eolien.svg","assets/img/Carte-Eolien-icone-on.svg"]});case"texteBoutonSimple":return a.createElement(K,{curPrompt:e.curPrompt,message:String(e.curPrompt.Texte_Supp),changePrompt:u,curIndex:e.curIndex,gameReset:l});case"ChoixReponse":return a.createElement(U,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix).split(";"),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),changePrompt:u,curIndex:e.curIndex,updateDollars:m,updatePerformance:p,gauges:e.gauges});case"Catastrophe":return a.createElement(xe,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix).split(";"),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),whichEventHappens:o.investedModernization?1:0,changePrompt:u,curIndex:e.curIndex,updateDollars:m,updatePerformance:p});case"MultiSelection":return a.createElement(J,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix).split(";"),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),changePrompt:u,curIndex:e.curIndex,updateDollars:m,updatePerformance:p,gauges:e.gauges});case"Bilan":return a.createElement(ve,{curPrompt:e.curPrompt,curIndex:e.curIndex,changePrompt:u,updateDollars:m,updatePerformance:p,performance:e.performance,memoryObj:o});default:return a.createElement(U,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix).split(";"),changePrompt:u,curIndex:e.curIndex})}};return!0===e.endGame?a.createElement("div",{className:"gameBox"},a.createElement(ye,{raison:(s=[],console.log("checking reason processing:",e.gauges.props.dollars,e.performance),e.gauges.props.dollars<0&&s.push("Vous n'avez plus d'argent."),e.performance[0]<0&&s.push("Vous avez gâché le parc de production électrique d'Hydro-Québec."),e.performance[1]<0&&s.push("Votre bilan environnemental est excécrable."),e.performance[2]<0&&s.push("La fureur populaire a eu raison de votre poste."),s),gameReset:l})):a.createElement("div",{className:"gameBox"},"Bilan"===e.curPrompt.Type?a.createElement("div",{className:"promptBox bilan"},a.createElement("div",{className:"header"},a.createElement("div",{className:"massiveTitle"},a.createElement("h2",null,(0,c.ZP)(e.curPrompt.Sujet)))),a.createElement("div",{className:"separator"}),f(e.curPrompt.Type)):a.createElement("div",{className:"promptBox"},a.createElement("div",{className:"header"},a.createElement("div",{className:"surtitre"},a.createElement("h4",null,(0,c.ZP)(e.curPrompt.Sujet))),a.createElement("div",{className:"question"},a.createElement("p",null,(0,c.ZP)(e.curPrompt.Texte)))),f(e.curPrompt.Type)))}function Ce(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(e,t)||function(e,t){if(e){if("string"==typeof e)return _e(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_e(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ae(e){var t=Ce((0,a.useState)("IDLE"),2),n=t[0],r=t[1],c=Ce((0,a.useState)(0),2),o=c[0],i=c[1],s=Ce((0,a.useState)(50),2),l=s[0],u=s[1],m=Ce((0,a.useState)([0,0,0]),2),p=m[0],d=m[1],f=Ce((0,a.useState)("normal"),2),v=f[0],g=f[1];(0,a.useEffect)((function(){console.log("game ",n)}),[n]),(0,a.useEffect)((function(){E(o),"END"===o&&y()}),[o]);var h=function(){r("STARTED"),i(0)},y=function(){r("END")},E=function(t){console.log("current game prompt:",e.gameData.filter((function(e){return String(e.ID)===String(t)})))},b=function(t){return e.gameData.findIndex((function(e){return String(t)===String(e.ID)}))};(0,a.useEffect)((function(){var t=e.gameData[b(o)];t&&t.hasOwnProperty("Type")&&("Catastrophe"===t.Type?g("redpink"):"normal"!==v&&g("normal"))}));var x=function(){var t="END"===n||"END"===o||"redpink"===v?"gameOver":"",r=e.gameData[b(o)];return{gameScreenClass:t,backgroundImage:r?"pylone"===r.Background?"Illus_Section-01_Pylone_V01-14.svg":"ampoule"===r.Background?"Illus_Section-02_Ampoule_V02.svg":"centrale"===r.Background?"Illus_Section-00_Centrale_V01.svg":null:null}};return"IDLE"===n?a.createElement("div",{className:"gameScreen"},a.createElement("div",{className:"background-image"},a.createElement("img",{src:"assets/img/Illus_Section-00_Centrale_V01.svg"})),a.createElement(V,{introElem:e.introElem,mapObj:e.mapObj,gameStart:h})):a.createElement("div",{className:"gameScreen ".concat(x().gameScreenClass)},null!==x().backgroundImage?a.createElement("div",{className:"background-image"},a.createElement("img",{src:"assets/img/".concat(x().backgroundImage),className:"no-mobile"})):"",a.createElement("div",{className:"temporaryInfo"},a.createElement("p",null,"Performance (temporaire)"),a.createElement("p",null,"Dollars: ","".concat(l," $")),a.createElement("p",null,"Elec: ","".concat(p[0]," TWh")),a.createElement("p",null,"Enviro: ","".concat(p[1]," pts")),a.createElement("p",null,"Popu: ","".concat(p[2]," pts"))),a.createElement(Te,{curIndex:o,curPrompt:"END"===o?"":e.gameData[b(o)],changePrompt:i,updateDollars:function(e){u((function(t){return t+e})),l+e<0&&y()},updatePerformance:function(e){var t=Array.apply(null,Array(e.length)).map((function(){}));p.forEach((function(n,r){e[r],t[r]=parseInt(n)+parseInt(e[r])})),console.log("Setting performance to : ",t),d(t)},gauges:a.createElement(R,{dollars:l}),performance:p,endGame:"END"===o||"END"===n,gameReset:function(){u(50),d([0,0,0]),h()}}))}function De(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Oe=function(){function e(t,n,r,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t;var c=this.container.append("div").classed("rootElem",!0);this.engineRoot=j.createRoot(c.node()),this.optionData=n,this.amorce=r.TEXTE,this.gameData=a,console.log("game Data is : ",this.gameData),this.initEngine()}var t,n;return t=e,(n=[{key:"initEngine",value:function(){var e=a.createElement(o,{key:"gameIntro",sectionType:g,optionData:this.optionData,amorce:this.amorce,background:null,classes:""});this.engineRoot.render(a.createElement(Ae,{introElem:e,gameStatus:this.gameStatus,gameData:this.gameData}))}}])&&De(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function je(e,t,n,r,a,c,o){try{var i=e[c](o),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function Re(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var c=e.apply(t,n);function o(e){je(c,r,a,o,i,"next",e)}function i(e){je(c,r,a,o,i,"throw",e)}o(void 0)}))}}function Me(e,t){return ze.apply(this,arguments)}function ze(){return(ze=Re(regeneratorRuntime.mark((function e(t,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",T.gyn("https://docs.google.com/spreadsheets/d/e/2PACX-1vQQZ3sz0q1vnZmoYYR5IrCfuONhHcNw50iDtbg1H2mIX8lHDL1BQ4sAMi7iApSE1G9WQTW2jHcWv4KW/pub?gid=1497861017&single=true&output=csv").then((function(e){var r=T.Ys(".game-area");return new Oe(r,O(n),t[0],e),Ve(t,n),_(t,n),[[function(){}]]})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ve(e,t){var n=C(e,t);console.log("checking structure:",n),n.map((function(e){"viz-section"===e.sectionType&&e.steps.map((function(t,n){""!==t.visual&&(0===n?T.Ys("#".concat(e.key,"_").concat(n)).style("opacity",1):T.Ys("#".concat(e.key,"_").concat(n)).style("opacity",0))}))}))}function Ye(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Le(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Ze=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.index=n,this.callback=r,this._isActivate=!1}var t,n;return t=e,(n=[{key:"activate",value:function(e){this._isActivate||(this._isActivate=!0,this.el.classList.add("active"),this.callback(e))}},{key:"deactivate",value:function(){this._isActivate&&(this._isActivate=!1,this.el.classList.remove("active"))}}])&&Le(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),Be=n(52732),qe=n.n(Be),Ue=n(89438);function He(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function We(e,t){var n=[];[".viz",".full-page-section > img",".full-page-section > video"].forEach((function(e){n=n.concat(Array.from(document.querySelectorAll(e)))})),(0,Ue.Z)(n,{stickyBitStickyOffset:40}),new(qe())({elements_selector:".lazy",threshold:500}),Promise.all([Me(e,t)]).then((function(e){var t,n;(function(e){var t=0,n=0,r=window.innerHeight,a=!1,c=0,o=[],i=[],s=[],l=document.querySelector(".article-reminder"),u=document.querySelector("header > .progress"),m=document.querySelector(".intro-section h1"),p=document.querySelectorAll(".viz-section");if(p.length!==e.length)throw new Error("The number of viz sections (".concat(p.length,") mismatch with the length of the first ")+"dimension of the callbacks array (".concat(e.length,"). Please, be sure that the two elements ")+"have the same size.");p.forEach((function(t,n){var r,a=function(e){if(Array.isArray(e))return Ye(e)}(r=t.querySelectorAll("section"))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return Ye(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ye(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(a.length!==e[n].length)throw new Error("The number of steps (".concat(a.length,") in the viz section #").concat(n+1," mismatch with the ")+"number of callbacks specified (".concat(e[n].length,') at the index "').concat(n,'". Please, be sure that the two ')+"elements have the same size.");o=o.concat(a.map((function(t,r){return new Ze(t,"".concat(n,"-").concat(r),e[n][r])}))),i=i.concat(i,t.querySelector(".viz > *"))}));var d=function(){var e=window.pageYOffset||document.documentElement.scrollTop;o.forEach((function(e){var a=e.el.getBoundingClientRect();r-a.top-n>0&&a.top+a.height-t>0?s.push(e):e.deactivate()}));var a=m.getBoundingClientRect().bottom<=0,i=l.classList.contains("visible");a&&!i?l.classList.add("visible"):!a&&i&&l.classList.remove("visible"),s.forEach((function(t,n){e>=c?n===s.length-1?t.activate("down"):t.deactivate():0===n?t.activate("up"):t.deactivate()})),f(),s=[],c=e},f=function(){var e=(document.body.scrollTop||document.documentElement.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100;u.style.width=e+"%"},v={initialize:function(){if(a)throw new Error("The scroller is already initialized.");return a=!0,window.addEventListener("scroll",d),window.addEventListener("resize",(function(){r=window.innerHeight,f()})),(window.pageYOffset||document.documentElement.scrollTop)>0&&d(),f(),v},offsetTop:function(e){if(void 0===e)return t;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return t=e,v},offsetBottom:function(e){if(void 0===e)return n;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return n=e,v}};return v})((t=e,n=1,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,c=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(c.push(r.value),!t||c.length!==t);o=!0);}catch(e){i=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw a}}return c}}(t,n)||function(e,t){if(e){if("string"==typeof e)return He(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?He(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]).offsetTop(40).offsetBottom(0).initialize()}))}function Xe(e){return e.rendered&&(0,a.useEffect)((function(){We(e.contentData,e.paramsData)}),[]),t=C(e.contentData,e.paramsData),n={},Object.keys(t).map((function(e,r){var s=t[e];s.sectionType===g?n[e]=a.createElement(o,{key:s.key,sectionType:s.sectionType,optionData:s.optionData,amorce:(0,c.ZP)(s.amorce),background:s.background,classes:s.classes}):s.sectionType===y?n[e]=a.createElement(i,{key:s.key,id:s.key,sectionType:s.sectionType,texts:s.texts,background:s.background,classes:s.classes,visuelclasses:s.visuelclasses,visual:s.visual,filename:s.filename}):s.sectionType===h?n[e]=a.createElement(I,{key:s.key,id:s.key,sectionType:s.sectionType,background:s.background,classes:s.classes,visuelclasses:s.visuelclasses,visual:s.visual,mainTitle:s.texts.mainTitle,subTitle:s.texts.subTitle,filename:s.filename}):s.sectionType===E&&(n[e]=a.createElement(k,{key:s.key,listID:s.listID,steps:s.steps,classed:s.classed,mediaInfo:s.mediaInfo,background:s.background}))})),Object.values(n);var t,n}Promise.all([Promise.resolve().then(n.t.bind(n,20745,19)),Promise.resolve().then(n.t.bind(n,97762,19)),Promise.resolve().then(n.t.bind(n,67294,19))]).then((function(e){var t=e[0],n=(e[1],e[2]);T.Ys(".pull-right").insert("li","li").html("<p class='not-published'>Ne pas publier</p>"),T.gyn(r.google_config.contentURL).then((function(e){T.gyn(r.google_config.paramsURL).then((function(r){t.createRoot(document.getElementById("root")).render(n.createElement(Xe,{contentData:e,paramsData:r,rendered:!0})),document.querySelector("#footerContainer").innerHTML=T.Ys("#footerContent").node().innerHTML}))}))}))},40207:e=>{e.exports={google_config:{contentURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=0&single=true&output=csv",paramsURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=409950237&single=true&output=csv",localContentURL:"./data/structure/contentData.csv",localParamsURL:"./data/structure/paramsData.csv"}}}},e=>{var t=t=>e(e.s=t);e.O(0,[216],(()=>(t(28594),t(35666),t(86702)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,