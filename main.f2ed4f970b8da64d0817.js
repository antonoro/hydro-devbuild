(self.webpackChunkscrollytelling_template=self.webpackChunkscrollytelling_template||[]).push([[179],{86702:(e,t,n)=>{"use strict";const r=JSON.parse('{"E":"<section id=\\"vizSection1_0\\" class=\\"viz-section full-page\\"><div class=\\"steps display-none\\"><section class=\\"display-none\\"><p>Hydro-Québec</p></section></div><div class=\\"viz\\" id=\\"viz\\"><div id=\\"vizSection1_0_0\\" class=\\"iframeContainer game-area\\"></div></div></section>"}');var a=n(40207),o=n(67294),c=n(25935);function i(e){var t=o.createElement("section",{className:"intro-section ".concat(e.classes)},o.createElement("h5",{className:"overTitle"},e.amorce),o.createElement("h1",null,(0,c.ZP)(e.optionData.title)),o.createElement("address",null,o.createElement("div",{className:"date"})));return e.background?o.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},t):t}var l,s=n(45697),u=n.n(s);function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}u().string.isRequired,u().string.isRequired,u().oneOf(["eager","lazy"]);var p="intro-titre",d="pleine-page-titre",f="texte-classique",v="viz-section",g="centré",h=(m(l={titre:"Titre",auteurs:"Auteurs",date:"Date"},"date","Date"),m(l,"urls","LienAuteurs"),m(l,"lienfichiersource","LienFichierSource"),l);n(93162);var b=n(38682);function E(e){try{JSON.parse(e)}catch(e){return!1}return!0}function y(e){return Array.from(e.split(";")).join(" ")}function w(e){return{title:e[0][h.titre],authors:e[0][h.auteurs],urls:e[0][h.urls],date:e[0][h.date]}}n(9208);n(83731).accessToken="pk.eyJ1IjoibGVkZXZvaXIiLCJhIjoiY2p2bW81dHU2MWV1cTRhcXIzaXZqMGYxciJ9.WrIF8o69aR_TstDFu6Qyag",n(6899);var S=n(20745);function P(e){var t=function(e){return Math.abs(e)>1?"".concat(e,"&nbsp;jetons"):"".concat(e,"&nbsp;jeton")};return(0,o.useEffect)((function(){b.Ys(".gauges").selectAll(".gauge").nodes().forEach((function(t){var n=50;"dollars"===b.Ys(t).attr("id")&&(n=e.dollars);var r=n>0?Math.round(e.committed/50*100):0,a=n>0?Math.round(n/50*100):0;b.Ys(t).select(".gaugeColorHolder").select(".committed").style("width","".concat(r,"%")),b.Ys(t).select(".gaugeColor").style("width","".concat(a,"%"))}))})),o.createElement("div",{className:"gauges"},o.createElement("div",{id:"dollars",className:"gauge dollarGauge"},o.createElement("div",{className:"gaugeColorHolder ".concat(e.dollars<0?"red":"")},o.createElement("div",{className:"gaugeColor ".concat(e.dollars<0?"red":e.gaugeExplain?"lightblue":"blue")}),0!=e.committed?o.createElement("div",{className:"committed ".concat(e.dollars<0?"red":e.gaugeExplain?"lightblue":"blue")}):"",e.mission?o.createElement("div",{className:"value arrowGauge"},o.createElement("div",{className:"labelHolder"},o.createElement("p",null,o.createElement("b",null,"Budget total"))),o.createElement("div",{className:"arrow"},o.createElement("div",{className:"rect"}),o.createElement("div",{className:"rect-1"}),o.createElement("div",{className:"rect-2"})),o.createElement("div",{className:"labelHolder",style:{textAlign:"right"}},o.createElement("p",{style:{paddingRight:"7px"}},o.createElement("b",null,(0,c.ZP)(t(e.dollars)))))):e.gaugeExplain?o.createElement("div",{className:"value gaugeExplain"},o.createElement("div",{className:"budgetStamp"},o.createElement("p",null,o.createElement("b",null,"Budget"))),o.createElement("div",{className:"labelHolder"}),o.createElement("div",{className:"labelHolder",style:{textAlign:"right"}},o.createElement("p",{style:{paddingRight:"7px"}},o.createElement("b",null,(0,c.ZP)(t(e.dollars-25)))))):o.createElement("div",{className:"value basicGauge"},o.createElement("div",{className:"labelHolder"},o.createElement("p",null,o.createElement("b",null,"Budget"))),o.createElement("div",{className:"labelHolder",style:{textAlign:"right"}},o.createElement("p",{style:{paddingRight:"7px"}},o.createElement("b",null,(0,c.ZP)(t(e.dollars)))))))))}function N(e,t,n,r,a,o,c){try{var i=e[o](c),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function I(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){N(o,r,a,c,i,"next",e)}function i(e){N(o,r,a,c,i,"throw",e)}c(void 0)}))}}function x(e){var t=(0,o.useCallback)(I(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.gameStart();case 1:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"gameBox transparent"},o.createElement("div",{className:"introBox"},e.introElem),o.createElement("div",{className:"userBox"},o.createElement("div",{className:"startbutton",onClick:t},o.createElement("p",null,"Commencer le jeu"))))}function k(e){return(0,o.useEffect)((function(){e.transition&&setTimeout((function(){b.Ys(".monitoring_value").transition().duration(1e3).style("opacity",1)}),200)}),[]),o.createElement("div",{className:"monitoring"},o.createElement("div",{className:"monitoring_content"},o.createElement("div",{className:"column"},o.createElement("div",{className:"monitoring_value ".concat(e.transition?"transition":"")},o.createElement(P,{rightarrows:e.rightarrows,gaugeExplain:e.gaugeExplain,mission:e.mission,dollars:e.dollars,committed:e.committed})))),e.terawatts||0===e.terawatts?o.createElement("div",{className:"monitoring_content"},o.createElement("div",{className:"column"},o.createElement("div",{className:"monitoring_header"},o.createElement("h5",null,o.createElement("b",null,"Électricité produite")," • ",e.terawatts," TWh")))):o.createElement("div",null))}function C(e){return e.split("_").slice(1).map((function(e){return parseInt(e)}))}n(97762);var T=function(e){return 0===parseInt(e)||parseInt(e)<0?"":"ENCAISSER "};function D(e,t,n,r,a,o,c){try{var i=e[o](c),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function _(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){D(o,r,a,c,i,"next",e)}function i(e){D(o,r,a,c,i,"throw",e)}c(void 0)}))}}function O(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function A(e){console.log(e.monitoring);var t,n,r=(t=(0,o.useState)(null),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);c=!0);}catch(e){i=!0,a=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw a}}return o}}(t,n)||function(e,t){if(e){if("string"==typeof e)return O(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?O(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[0],i=r[1];(0,o.useEffect)((function(){}),[]),(0,o.useEffect)((function(){var e=b.td_(".choicebutton");e.select(".butn").classed("selected",!1),a?(b.Ys(a.obj).select(".butn").classed("selected",!0),e.select(".butn").style("opacity","0.5"),b.Ys(a.obj).select(".butn").style("opacity","1")):e.select(".butn").style("opacity","1")}),[a]);var l=(0,o.useCallback)(function(){var t=_(regeneratorRuntime.mark((function t(n,r,a){var o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:(o=String(e.curPrompt.Trigger_next).split(";")).length>1?e.changePrompt(String(o[a]).replace(/(\r\n|\n|\r)/gm,"")):e.changePrompt(String(o[0]).replace(/(\r\n|\n|\r)/gm,"")),"Q2"===e.curPrompt.ID&&0===a&&e.updateMemoryObj("investedModernization",!0),"Q6"===e.curPrompt.ID&&0===a&&e.updateMemoryObj("acceptedChurchillFallsDeal",!0),e.updateDollars(parseInt(n)),e.updatePerformance(r),i(null);case 7:case"end":return t.stop()}}),t)})));return function(e,n,r){return t.apply(this,arguments)}}()),s=(0,o.useCallback)(_(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&e.changePrompt(e.curIndex-1),i(null);case 2:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"choices",rightarrows:"Q5"===e.curPrompt.ID?"true":"false"},o.createElement("div",{className:"row"},e.choices.map((function(t,n){var r,l=e.choices_values[n].split("_")[0],s=C(e.choices_values[n]);return o.createElement("div",{className:"choicebutton",key:n,onClick:function(e){!function(e,t,n,r){i({obj:e.target,cost:parseInt(t),performance:n,index:r})}(e,l,s,n)}},o.createElement("div",{id:n,className:"butn"},o.createElement("div",{className:"holder icon"},o.createElement("img",{src:a&&a.index===n?"./assets/img/Off.svg":"./assets/img/On.svg"})),o.createElement("div",{className:"holder label"},o.createElement("h4",null,(0,c.ZP)(t)),e.choices_values.map((function(e,t){return parseInt(e.split("_")[0])})).filter((function(e){return!Number.isNaN(e)})).every((function(e){return 0===e}))?"":o.createElement("p",null,(0,c.ZP)((r=l,Math.abs(r)>1?"".concat(T(r)).concat(Math.abs(r),"&nbsp;JETONS"):"".concat(T(r)).concat(Math.abs(r),"&nbsp;JETON"))))),o.createElement("div",{className:"arrowsChoices"},o.createElement("span",null,"⟶"))))}))),o.createElement(k,{showTWh:!1,dollars:a&&a.hasOwnProperty("cost")?parseInt(e.gauges.props.dollars)+parseInt(a.cost):e.gauges.props.dollars,committed:a&&a.hasOwnProperty("cost")&&parseInt(a.cost)<0?Math.abs(a.cost):0,performance:e.gauges.props.performance}),o.createElement("div",{className:"row"},o.createElement("div",{className:"column"},e.curIndex>0?o.createElement("div",{className:"actionbutton prev",onClick:s},o.createElement("div",{className:"butn"},o.createElement("p",null,"Previous"))):o.createElement("div",null)),o.createElement("div",{className:"column"},o.createElement("div",{className:"actionbutton next ".concat(a?"":"disabled"),onClick:function(){a?l(a.cost,a.performance,a.index):console.log("")}},o.createElement("div",{className:"butn"},o.createElement("p",null,"Poursuivre"))))))}function j(e,t,n,r,a,o,c){try{var i=e[o](c),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function R(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){j(o,r,a,c,i,"next",e)}function i(e){j(o,r,a,c,i,"throw",e)}c(void 0)}))}}function M(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);c=!0);}catch(e){i=!0,a=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw a}}return o}}(e,t)||B(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(e,t){if(e){if("string"==typeof e)return H(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?H(e,t):void 0}}function H(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Y(e){var t=M((0,o.useState)([]),2),n=t[0],r=t[1];(0,o.useEffect)((function(){a()}),[]),(0,o.useEffect)((function(){}),[n]);var a=function(){r(e.choices.map((function(e){return null})))},i=function(e){var t=e.reduce((function(e,t){return t&&(e+=t.cost),e}),0),n=[0,0,0];return e.forEach((function(e,t){e&&(n=n.map((function(t,n){return parseInt(t)+parseInt(e.performance[n])})))})),[t,n]},l=(0,o.useCallback)(function(){var t=R(regeneratorRuntime.mark((function t(n){var r,o,c,l,s;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=e.curPrompt.Trigger_next,e.changePrompt(u(r)),o=i(n),c=M(o,2),l=c[0],s=c[1],e.updateDollars(parseInt(l)),e.updatePerformance(s),a();case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),s=(0,o.useCallback)(R(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&e.changePrompt(e.curIndex-1),a();case 2:case"end":return t.stop()}}),t)})))),u=function(e){var t=String(e).split("_"),r=String(t[0]).split(";"),a=n.filter((function(e){return null!==e}));return(t.length>1&&a.length>0?a.length>1?String(t[1]):String(r[n.indexOf(a[0])]):String(t[0])).replace(/(\r\n|\n|\r)/gm,"")};return o.createElement("div",{className:"choices"},o.createElement("div",{className:"row"},e.choices.map((function(t,a){var i,l=e.choices_values[a].split("_")[0],s=C(e.choices_values[a]);return o.createElement("div",{className:"selectionbutton",key:a,onClick:function(e){!function(e,t,a,o){var c,i=function(e){if(Array.isArray(e))return H(e)}(c=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(c)||B(c)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();n[t]?i[t]=null:i[t]={obj:e.target,cost:parseInt(a),performance:o},r(i)}(e,a,l,s)}},o.createElement("div",{id:a,className:"butn ".concat(n[a]?"selected":"")},o.createElement("div",{className:"holder icon ".concat(n[a]?"selected":"")},o.createElement("img",{src:n[a]?"assets/img/Plus-Off.svg":"assets/img/Plus-On.svg"})),o.createElement("div",{className:"holder label"},o.createElement("h4",null,(0,c.ZP)(t)),e.choices_values.map((function(e,t){return parseInt(e.split("_")[0])})).filter((function(e){return!Number.isNaN(e)})).every((function(e){return 0===e}))?"":o.createElement("p",null,(0,c.ZP)((i=l,Math.abs(i)>1?"".concat(T(i)).concat(Math.abs(i),"&nbsp;JETONS"):"".concat(T(i)).concat(Math.abs(i),"&nbsp;JETON")))))))}))),o.createElement(k,{showTWh:!1,dollars:n&&n.length>0?parseInt(e.gauges.props.dollars)+parseInt(i(n)[0]):e.gauges.props.dollars,committed:n&&n.length>0&&parseInt(i(n)[0])<0?Math.abs(parseInt(i(n)[0])):0}),o.createElement("div",{className:"row"},o.createElement("div",{className:"column"},e.curIndex>0?o.createElement("div",{className:"actionbutton prev",onClick:s},o.createElement("div",{className:"butn"},o.createElement("p",null,"Previous"))):o.createElement("div",null)),o.createElement("div",{className:"column"},o.createElement("div",{className:"actionbutton next ".concat(n?"":"disabled"),onClick:function(){n?l(n):console.log("")}},o.createElement("div",{className:"butn"},o.createElement("p",null,"Poursuivre"))))))}function z(e,t,n,r,a,o,c){try{var i=e[o](c),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function L(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){z(o,r,a,c,i,"next",e)}function i(e){z(o,r,a,c,i,"throw",e)}c(void 0)}))}}function Z(e){var t=(0,o.useCallback)(L(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&e.changePrompt(e.curIndex-1);case 1:case"end":return t.stop()}}),t)})))),n=(0,o.useCallback)(L(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.curPrompt.Trigger_next,e.changePrompt(n);case 2:case"end":return t.stop()}}),t)})))),r=(0,o.useCallback)(L(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.gameReset();case 1:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"printprompt"},""!==e.message?o.createElement("div",{className:"message"},o.createElement("p",null,e.message)):"","1"===e.curIndex?o.createElement(k,{mission:!0,transition:!0,showTWh:!1,dollars:e.gauges.props.dollars,committed:0,performance:e.gauges.props.performance}):"",o.createElement("div",{className:"actionbutton prev",onClick:t},o.createElement("div",{className:"butn"},o.createElement("p",null,"Previous"))),"STARTOVER"===e.curPrompt.Trigger_next?o.createElement("div",{className:"actionbutton next",onClick:r},o.createElement("div",{className:"butn"},o.createElement("p",null,"Recommencer"))):o.createElement("div",{className:"actionbutton next",onClick:n},o.createElement("div",{className:"butn"},o.createElement("p",null,"Poursuivre"))))}function V(e){return function(e){if(Array.isArray(e))return F(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Q(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function W(e,t,n,r,a,o,c){try{var i=e[o](c),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function U(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){W(o,r,a,c,i,"next",e)}function i(e){W(o,r,a,c,i,"throw",e)}c(void 0)}))}}function q(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);c=!0);}catch(e){i=!0,a=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw a}}return o}}(e,t)||Q(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Q(e,t){if(e){if("string"==typeof e)return F(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?F(e,t):void 0}}function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function X(e){var t=q((0,o.useState)(0),2),n=t[0],r=t[1],a=q((0,o.useState)(0),2),i=a[0],l=a[1],s=q((0,o.useState)([0,0]),2),u=s[0],m=s[1],p=q((0,o.useState)([]),2),d=p[0],f=p[1],v=q((0,o.useState)([]),2),g=v[0],h=v[1],b="Q1"===e.curPrompt.ID?25:50;(0,o.useEffect)((function(){var e=P(),t=e.map((function(){return 0})),n=e.map((function(e){return Math.abs(e.unitValue)}));f(t),h(n)}),[]),(0,o.useEffect)((function(){var e=d.reduce((function(e,t,n){return P()[n],e+Math.abs(t)}),0),t=d.reduce((function(e,t,n){var r=P()[n];return e+Math.round(Math.abs(t/r.unitValue)*r.unitTWhvalue)}),0),n=[0,0];d.forEach((function(e,t){var r=P()[t];n=n.map((function(t,n){return 0===n?t+Math.abs(e/r.unitValue)*r.unitEnvirovalue:1===n?t+Math.abs(e/r.unitValue)*r.unitPopuvalue:void 0}))})),r(e),l(t),m(n)}),[d]);var E=(0,o.useCallback)(U(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&e.changePrompt(e.curIndex-1);case 1:case"end":return t.stop()}}),t)})))),y=(0,o.useCallback)(U(regeneratorRuntime.mark((function t(){var r,a,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=String(e.curPrompt.Trigger_next).split("_"),a=String(r[0]).split(";"),"Q1"===e.curPrompt.ID&&d[0]>0?e.updateMemoryObj("builtDam",!0):d[0]>0&&e.updateMemoryObj("builtSecondDam",!0),d[2]>0?e.changePrompt(String(a[2]).replace(/(\r\n|\n|\r)/gm,"")):1==a.length?e.changePrompt(String(a).replace(/(\r\n|\n|\r)/gm,"")):a.length>1&&(w(d)?e.changePrompt(x(a,r[1])):(o=d.reduce((function(e,t,n,r){return t>r[e]?n:e}),0),e.changePrompt(String(a[o]).replace(/(\r\n|\n|\r)/gm,"")))),e.updateDollars(-n),e.updatePerformance([i].concat(u));case 6:case"end":return t.stop()}}),t)})))),w=function(e){return new Set(e).size!==e.length},S=function(e,t){var n=t.split("_");return{name:e,unitValue:parseInt(n[0]),unitTWhvalue:parseInt(n[1]),unitEnvirovalue:parseInt(n[2]),unitPopuvalue:parseInt(n[3])}},P=function(){return e.choices.map((function(t,n){return S(t,e.choices_values[n])}))},N=function(e){var t=P()[e],r=[!1,!1];return 0===Math.abs(d[e])&&(r[0]=!0),n+parseInt(Math.abs(t.unitValue))>b&&(r[1]=!0),r},I=function(e,t,n,r){var a,o,c=V(d);c[t]+n*g[t]>=0&&(n>0?(a=n*g[t],o=0,d.forEach((function(e,t){o+=e})),o+a>b||(c[t]=c[t]+n*g[t])):c[t]=c[t]+n*g[t],f(c))},x=function(e,t){var n=Math.max.apply(Math,V(d)),r=[];return d.forEach((function(e,t){return e===n?r.push(t):null})),(r.length>1?r.includes(0)?String(e[0]):r.includes(1)?String(e[1]):String(t):String(e[r[0]])).replace(/(\r\n|\n|\r)/gm,"")};return o.createElement("div",{className:"repartition"},o.createElement("div",{className:"optionZone"},e.choices.map((function(t,n){return S(t,e.choices_values[n])})).map((function(e,t){return o.createElement("div",{className:"optionUnit",key:t},o.createElement("div",{className:"selectorZone"},o.createElement("div",{className:"division minusZone ".concat(N(t)[0]?"disabled":""),onClick:function(e){return I(0,t,-1)}},o.createElement("h3",null,"-")),o.createElement("div",{className:"division centralZone"},void 0===d[t]||0===d[t]?o.createElement("img",{src:"assets/img/".concat((r=t,["Hydro.svg","Eolien.svg","Nucleaire.svg","Solaire.svg","Modernisation.svg"][r]))}):o.createElement("h3",null,d[t])),o.createElement("div",{className:"division plusZone ".concat(N(t)[1]?"disabled":""),onClick:function(e){return I(0,t,1)}},o.createElement("h3",null,"+"))),o.createElement("div",{className:"textZone"},o.createElement("h3",null,e.name),o.createElement("div",{className:"inlinetext"},o.createElement("p",null,(0,c.ZP)((n=e.unitValue,Math.abs(n)>1?"".concat(Math.abs(n),"&nbsp;jetons"):"".concat(Math.abs(n),"&nbsp;jeton")))," • ",e.unitTWhvalue," TWh"))));var n,r}))),o.createElement(k,{gaugeExplain:"Q1"===e.curPrompt.ID,showTWh:!0,dollars:e.gauges.props.dollars-n,committed:n,terawatts:i}),e.curIndex>0?o.createElement("div",{className:"actionbutton prev",onClick:E},o.createElement("div",{className:"butn"},o.createElement("p",null,"Previous"))):o.createElement("div",null),o.createElement("div",{className:"actionbutton next ".concat(n>0?"":"disabled"),onClick:y},o.createElement("div",{className:"butn"},o.createElement("p",null,"Poursuivre"))))}var G=n(83290);function J(e,t,n,r,a,o,c){try{var i=e[o](c),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function $(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){J(o,r,a,c,i,"next",e)}function i(e){J(o,r,a,c,i,"throw",e)}c(void 0)}))}}function K(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);c=!0);}catch(e){i=!0,a=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ee(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ee(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ee(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function te(e){var t=K((0,o.useState)(null),2),n=t[0],r=t[1];(0,o.useEffect)((function(){i()}),[]),(0,o.useEffect)((function(){n?b.Ys(".popUp-bg").style("display","unset"):b.Ys(".popUp-bg").style("display","none")}),[n]);var a=function(e,t){b.Ys(e).style("cursor",t?"pointer":null)},c=(0,G.Z)().attr("class","d3-tip adjusted").direction("n").html((function(e){return"\n                  <h4>".concat(e.title,"</h4>\n                  <p>").concat(e.supp_text,"</p>\n                  ")})),i=function(){Promise.all([b.LsS(e.map[0]),b.LsS(e.map[1])]).then((function(t){var n=K(t,2),r=n[0],o=n[1];b.Ys("#bg-map").node().append(r.documentElement),b.Ys("#on-icons").node().append(o.documentElement);var i=b.Ys("#on-icons").select("svg");i.call(c),b.Ys(".gameScreen").node().appendChild(b.Ys(".d3-tip").node());var s=i.select("#Icone-On").selectAll("g"),u=String(e.curPrompt.Choix_insecables).split(":"),m=String(e.message).split(";");b.Ys(".gameBox").on("click",(function(){c.hide()})),s.nodes().reverse().map((function(e,t){var n={title:u[t],supp_text:m[t]};b.Ys(e).on("click",(function(t,r,a){t.stopPropagation(),c.show(n,e),l(t.target.parentElement,!1),c.style("pointer-events","stroke")})).on("mouseover",(function(e,t,n){a(e.target.parentElement,!0),l(e.target.parentElement,!1)})).on("mouseout",(function(e,t,n){a(e.target.parentElement,!1),l(e.target.parentElement,!0),window.innerWidth<576&&c.hide()}))}))}))},l=function(e,t){!1===t?b.Ys(e).style("opacity",0):b.Ys(e).style("opacity",1)},s=(0,o.useCallback)($(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&e.changePrompt(e.curIndex-1);case 1:case"end":return t.stop()}}),t)})))),u=(0,o.useCallback)($(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.curPrompt.Trigger_next,b.Ys(".gameScreen").select(".d3-tip").remove(),e.changePrompt(n);case 3:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"printprompt mapnavigator"},o.createElement("div",{className:"popUp-bg"},n?o.createElement("div",{className:"popUp-box"},o.createElement("h4",null,parse(n.title)),o.createElement("p",null,parse(n.supp_text)),o.createElement("div",{className:"actionbutton",onClick:function(){return r(null)}},o.createElement("div",{className:"butn"},o.createElement("p",null,"Fermer")))):o.createElement("div",null)),o.createElement("div",{className:"mapHolder"},o.createElement("div",{className:"superposedMap"},o.createElement("div",{id:"bg-map",className:"map noClick"}),o.createElement("div",{id:"on-icons",className:"map"}))),o.createElement("div",{className:"actionbutton prev",onClick:s},o.createElement("div",{className:"butn"},o.createElement("p",null,"Previous"))),o.createElement("div",{className:"actionbutton next",onClick:u},o.createElement("div",{className:"butn"},o.createElement("p",null,"Suivant"))))}function ne(e,t,n,r,a,o,c){try{var i=e[o](c),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function re(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){ne(o,r,a,c,i,"next",e)}function i(e){ne(o,r,a,c,i,"throw",e)}c(void 0)}))}}function ae(e){(0,o.useEffect)((function(){}),[]);var t,n,r,a,i,l,s,u,m,p,d,f,v=(0,o.useCallback)(re(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:n=e.curPrompt.Trigger_next,e.changePrompt(n);case 2:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"bilanContent"},o.createElement("div",{className:"updatableText"},"B1"===e.curPrompt.ID?function(){var t=e.curPrompt.Texte.split(";"),n=e.curPrompt.Texte_Supp.split(";"),r=[],a=e.memoryObj.builtDam?9:0,o=parseInt(e.performance[0])-a,c=parseInt(e.gauges.props.dollars),i=t[0].replace("*newProd*",o+"&nbsp;TWh").replace("*augmentediminue*",o<0?"diminué":"augmenté").replace("*suffisanteinsuffisante*",o<10?"insuffisante":"suffisante");if(r.push(i),e.memoryObj.builtDam){var l=n[0].split(":")[1].replace("*damTWh*",9);r.push(l)}if(c<15){var s=n[1].split(":")[1];r.push(s)}if(parseInt(e.performance[1])<0){var u=n[2].split(":")[1];r.push(u)}if(parseInt(e.performance[2])<0){var m=n[3].split(":")[1];r.push(m)}return r}().map((function(e,t){return o.createElement("p",{key:t},(0,c.ZP)(e))})):(i=[],e.curPrompt.Texte.split(";"),l=e.finalBilanData,s=e.memoryObj.builtDam?9:0,u=e.memoryObj.builtSecondDam?9:0,m=parseInt(e.performance[0])-u-s,p=parseInt(e.gauges.props.dollars),d=parseInt(e.performance[1]),f=parseInt(e.performance[2]),t=(t=m>=25&&d>0&&e.memoryObj.acceptedChurchillFallsDeal?l[0].print:m>=25&&d>0&&!e.memoryObj.acceptedChurchillFallsDeal?l[1].print:m<25&&d>0?l[2].print:m>=25&&d<=0&&e.memoryObj.acceptedChurchillFallsDeal?l[3].print:m>=25&&d<=0&&!e.memoryObj.acceptedChurchillFallsDeal?l[4].print:l[5].print).replace("*augmentediminue*",m<0?"diminué":"augmenté").replace("*newProd*",m+"&nbsp;TWh"),i.push(t),(e.memoryObj.builtDam||e.memoryObj.builtSecondDam)&&(e.memoryObj.builtDam&&e.memoryObj.builtSecondDam?n=l[9].print:e.memoryObj.builtDam?n=l[7].print:e.memoryObj.builtSecondDam&&(n=l[8].print),i.push(n)),r=p>=5?l[11].print:l[12].print,i.push(r),a=f>=4?l[14].print:f>=-2&&f<4?l[15].print:l[16].print,i.push(a),i).map((function(e,t){return o.createElement("p",{key:t},(0,c.ZP)(e))}))),o.createElement("div",{className:"actionbutton next",onClick:v},o.createElement("div",{className:"butn"},o.createElement("p",null,"Poursuivre"))))}function oe(e,t,n,r,a,o,c){try{var i=e[o](c),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function ce(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){oe(o,r,a,c,i,"next",e)}function i(e){oe(o,r,a,c,i,"throw",e)}c(void 0)}))}}function ie(e){var t=(0,o.useCallback)(ce(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.gameReset();case 1:case"end":return t.stop()}}),t)}))));return o.createElement("div",{className:"promptBox"},o.createElement("div",{className:"header"},o.createElement("div",{className:"surtitre"},o.createElement("h4",null,"Fin du jeu")),o.createElement("div",{className:"question"},o.createElement("p",null,"Le CA d'Hydro-Québec vote à l'unanimité pour vous démettre de vos fonctions.","".concat(e.raison),o.createElement("br",null),o.createElement("br",null),"Tentez votre chance de nouveau."))),o.createElement("div",{className:"actionSection"},o.createElement("div",{className:"actionbutton next",onClick:t},o.createElement("div",{className:"butn"},o.createElement("p",null,"Recommencer")))))}function le(e,t,n,r,a,o,c){try{var i=e[o](c),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function se(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){le(o,r,a,c,i,"next",e)}function i(e){le(o,r,a,c,i,"throw",e)}c(void 0)}))}}function ue(e){var t=(0,o.useCallback)(se(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&e.changePrompt(e.curIndex-1);case 1:case"end":return t.stop()}}),t)})))),n=(0,o.useCallback)(function(){var t=se(regeneratorRuntime.mark((function t(n,r){var a;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:a=e.curPrompt.Trigger_next,e.changePrompt(a),e.updateDollars(parseInt(n)),e.updatePerformance(r);case 4:case"end":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}()),r=function(e){var t=String(e).split("_");return{cost:t[0],performance:t.splice(1)}};return o.createElement("div",{className:"printprompt"},o.createElement("div",{className:"message"},o.createElement("p",null,(0,c.ZP)(e.choices[e.whichEventHappens]))),o.createElement("div",{className:"actionbutton prev",onClick:t},o.createElement("div",{className:"butn"},o.createElement("p",null,"Previous"))),o.createElement("div",{className:"actionbutton next",onClick:function(){return n(r(e.choices_values[e.whichEventHappens]).cost,r(e.choices_values[e.whichEventHappens]).performance)}},o.createElement("div",{className:"butn"},o.createElement("p",null,"Poursuivre"))))}function me(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?me(Object(n),!0).forEach((function(t){de(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):me(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function de(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function fe(e,t,n,r,a,o,c){try{var i=e[o](c),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function ve(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){fe(o,r,a,c,i,"next",e)}function i(e){fe(o,r,a,c,i,"throw",e)}c(void 0)}))}}function ge(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function he(e){var t,n,r=(t=(0,o.useState)({investedModernization:!1,builtDam:!1,builtSecondDam:!1,acceptedChurchillFallsDeal:!1,builtNuclear:!1,nuclearBuiltNumber:0}),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);c=!0);}catch(e){i=!0,a=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw a}}return o}}(t,n)||function(e,t){if(e){if("string"==typeof e)return ge(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ge(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[0],i=r[1];(0,o.useEffect)((function(){}),[]);var l,s=(0,o.useCallback)(ve(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:i({investedModernization:!1,builtDam:!1,builtSecondDam:!1,acceptedChurchillFallsDeal:!1,builtNuclear:!1,nuclearBuiltNumber:0}),e.gameReset();case 2:case"end":return t.stop()}}),t)})))),u=(0,o.useCallback)(function(){var t=ve(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.changePrompt(n);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),m=(0,o.useCallback)(function(){var t=ve(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:Number.isInteger(n)&&e.updateDollars(n);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),p=(0,o.useCallback)(function(){var t=ve(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.updatePerformance(n);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),d=(0,o.useCallback)(function(){var e=ve(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(r=pe({},a))[t]=n,i(r);case 3:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}()),f=function(t){switch(t){case"Repartition":return o.createElement(X,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix_insecables).split(":"),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),changePrompt:u,curIndex:e.curIndex,updateDollars:m,updatePerformance:p,updateMemoryObj:d,gauges:e.gauges});case"Carte":return o.createElement(te,{curPrompt:e.curPrompt,message:String(e.curPrompt.Texte_Supp),changePrompt:u,curIndex:e.curIndex,map:"Q1-1"===e.curIndex?["assets/img/Carte-Hydro.svg","assets/img/Carte-Hydro-icone-on.svg"]:["assets/img/Carte-Eolien.svg","assets/img/Carte-Eolien-icone-on.svg"]});case"texteBoutonSimple":return o.createElement(Z,{curPrompt:e.curPrompt,message:String(e.curPrompt.Texte_Supp),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),changePrompt:u,curIndex:e.curIndex,gauges:e.gauges,gameReset:s});case"ChoixReponse":return o.createElement(A,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix_insecables).split(":"),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),changePrompt:u,curIndex:e.curIndex,updateDollars:m,updatePerformance:p,updateMemoryObj:d,gauges:e.gauges});case"Catastrophe":return o.createElement(ue,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix_insecables).split(":"),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),whichEventHappens:a.investedModernization?1:0,changePrompt:u,curIndex:e.curIndex,updateDollars:m,updatePerformance:p});case"MultiSelection":return o.createElement(Y,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix_insecables).split(":"),choices_values:String(e.curPrompt.Cout_Elec_Env_Popu).split(";"),changePrompt:u,curIndex:e.curIndex,updateDollars:m,updatePerformance:p,gauges:e.gauges});case"Bilan":return o.createElement(ae,{curPrompt:e.curPrompt,curIndex:e.curIndex,changePrompt:u,updateDollars:m,updatePerformance:p,performance:e.performance,memoryObj:a,gauges:e.gauges,finalBilanData:e.finalBilanData});default:return o.createElement(A,{curPrompt:e.curPrompt,choices:String(e.curPrompt.Choix_insecables).split(":"),changePrompt:u,curIndex:e.curIndex})}};return!0===e.endGame?o.createElement("div",{className:"gameBox"},o.createElement(ie,{raison:(l=[],console.log(a),e.gauges.props.dollars<0?l.push(" Vous avez vidé les coffres de la société d'État. "):e.performance[1]<-9?l.push(" Votre vision va à l'encontre de l'objectif de carboneutralité du Québec. "):e.performance[2]<-9&&l.push(" La population conteste votre vision pour le futur énergétique du Québec. "),l),gameReset:s})):o.createElement("div",{className:"gameBox"},"Bilan"===e.curPrompt.Type?o.createElement("div",{className:"promptBox bilan"},o.createElement("div",{className:"header"},o.createElement("div",{className:"massiveTitle"},o.createElement("h2",null,(0,c.ZP)(e.curPrompt.Sujet)))),o.createElement("div",{className:"separator"}),f(e.curPrompt.Type)):o.createElement("div",{className:"promptBox"},o.createElement("div",{className:"header"},o.createElement("div",{className:"surtitre"},o.createElement("h4",null,(0,c.ZP)(e.curPrompt.Sujet))),o.createElement("div",{className:"question"},o.createElement("p",null,(0,c.ZP)(e.curPrompt.Texte)))),f(e.curPrompt.Type)))}function be(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);c=!0);}catch(e){i=!0,a=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ee(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ee(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ee(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ye(e){var t=be((0,o.useState)("IDLE"),2),n=t[0],r=t[1],a=be((0,o.useState)(0),2),c=a[0],i=a[1],l=be((0,o.useState)(50),2),s=l[0],u=l[1],m=be((0,o.useState)([0,0,0]),2),p=m[0],d=m[1],f=be((0,o.useState)("normal"),2),v=f[0],g=f[1];(0,o.useEffect)((function(){}),[n]),(0,o.useEffect)((function(){b(c),"END"===c&&h()}),[c]);var h=function(){r("END")},b=function(e){},E=function(t){return e.gameData.findIndex((function(e){return String(t)===String(e.ID)}))};(0,o.useEffect)((function(){var t=e.gameData[E(c)];t&&t.hasOwnProperty("Background")&&("redpink"===t.Background?g("redpink"):"normal"!==v&&g("normal"))}));var y=function(){var t="END"===n||"END"===c||"redpink"===v?"gameOver":"",r=e.gameData[E(c)];return{gameScreenClass:t,backgroundImage:r?"pylone"===r.Background?"Illus_Section-01_Pylone_V01-14.svg":"ampoule"===r.Background?"Illus_Section-02_Ampoule_V02.svg":"centrale"===r.Background?"Illus_Section-00_Centrale_V01.svg":null:null}};return"IDLE"===n?o.createElement("div",{className:"gameScreen"},o.createElement("div",{className:"background-image"},o.createElement("img",{src:"assets/img/Illus_Section-00_Centrale_V01.svg"})),o.createElement(x,{introElem:e.introElem,mapObj:e.mapObj,gameStart:function(){r("STARTED"),i(0)}})):o.createElement("div",{className:"gameScreen ".concat(y().gameScreenClass)},"gameOver"!==y().gameScreenClass&&null!==y().backgroundImage?o.createElement("div",{className:"background-image"},o.createElement("img",{src:"assets/img/".concat(y().backgroundImage),className:"no-mobile"})):"",o.createElement("div",{className:"temporaryInfo"},o.createElement("p",null,"Performance (temporaire)"),o.createElement("p",null,"Dollars: ","".concat(s," $")),o.createElement("p",null,"Elec: ","".concat(p[0]," TWh")),o.createElement("p",null,"Enviro: ","".concat(p[1]," pts")),o.createElement("p",null,"Popu: ","".concat(p[2]," pts"))),o.createElement(he,{curIndex:c,curPrompt:"END"===c?"":e.gameData[E(c)],changePrompt:i,updateDollars:function(e){u((function(t){return t+e})),s+e<0&&h()},updatePerformance:function(e){var t=Array.apply(null,Array(e.length)).map((function(){}));p.forEach((function(n,r){t[r]=parseInt(n)+parseInt(e[r])})),d(t),(t[1]<=-9||t[2]<=-9)&&h()},gauges:o.createElement(P,{dollars:s}),performance:p,endGame:"END"===c||"END"===n,finalBilanData:e.finalBilanData,gameReset:function(){u(50),d([0,0,0]),r("IDLE"),i(0)}}))}function we(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Se=function(){function e(t,n,r,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t;var o=this.container.append("div").classed("rootElem",!0);this.engineRoot=S.createRoot(o.node()),this.optionData=n,this.amorce=r.TEXTE,this.gameData=a,this.initEngine()}var t,n;return t=e,(n=[{key:"initEngine",value:function(){var e=o.createElement(i,{key:"gameIntro",sectionType:p,optionData:this.optionData,amorce:this.amorce,background:null,classes:""});this.engineRoot.render(o.createElement(ye,{introElem:e,gameStatus:this.gameStatus,gameData:this.gameData[0],finalBilanData:this.gameData[1]}))}}])&&we(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Pe(e,t,n,r,a,o,c){try{var i=e[o](c),l=i.value}catch(e){return void n(e)}i.done?t(l):Promise.resolve(l).then(r,a)}function Ne(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){Pe(o,r,a,c,i,"next",e)}function i(e){Pe(o,r,a,c,i,"throw",e)}c(void 0)}))}}function Ie(e,t){return xe.apply(this,arguments)}function xe(){return(xe=Ne(regeneratorRuntime.mark((function e(t,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.all([b.gyn("https://docs.google.com/spreadsheets/d/e/2PACX-1vQQZ3sz0q1vnZmoYYR5IrCfuONhHcNw50iDtbg1H2mIX8lHDL1BQ4sAMi7iApSE1G9WQTW2jHcWv4KW/pub?gid=1497861017&single=true&output=csv"),b.gyn("https://docs.google.com/spreadsheets/d/e/2PACX-1vQQZ3sz0q1vnZmoYYR5IrCfuONhHcNw50iDtbg1H2mIX8lHDL1BQ4sAMi7iApSE1G9WQTW2jHcWv4KW/pub?gid=2005637736&single=true&output=csv")]).then((function(e){var r=b.Ys(".game-area");return new Se(r,w(n),t[0],e),ke(t,n),[[function(){}]]})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ke(e,t){(function(e,t){var n={},r=[],a=w(t);return e.map((function(e,t){if(e.Section===p){var o=e.StepClasses,c=e.TEXTE,i=e.StyleFond;n[e.SectionID]={key:t,sectionType:p,optionData:a,amorce:c,background:i,classes:y(o),gameid:e.GameID}}else if(e.Section===f){var l=e.TEXTE,s=e.StepClasses,u=e.StyleFond;n[e.SectionID]={key:t,sectionType:f,texts:l,visual:e.VISUEL,filename:e.NomFichierSource,background:u,classes:y(s),visuelclasses:y(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===d){var m=e.TEXTE;E(e.TEXTE)&&(m=JSON.parse(e.TEXTE)),n[e.SectionID]={key:t,sectionType:d,texts:E(e.TEXTE)?m:{mainTitle:{class:"",text:m},subTitle:null},visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,classes:y(e.StepClasses),visuelclasses:y(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===v){var g={attributs:e.Attributs,scrollType:e.Step,text:e.TEXTE,visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,visuelclasses:y(e.VisuelClasses),stepclasses:y(e.StepClasses),gameid:e.GameID};if(n.hasOwnProperty(e.SectionID)){var h=n[e.SectionID];h.push(g),n[e.SectionID]=h}else n[e.SectionID]=[g],r.push(e.SectionID)}})),r.map((function(e){var t=n[e],r=t[0].attributs===g?" full-page":"",a=t[0].background;n[e]={key:e,sectionType:v,listID:e,steps:t,classed:"viz-section".concat(r),mediaInfo:0,background:a}})),Object.values(n)})(e,t).map((function(e){"viz-section"===e.sectionType&&e.steps.map((function(t,n){""!==t.visual&&(0===n?b.Ys("#".concat(e.key,"_").concat(n)).style("opacity",1):b.Ys("#".concat(e.key,"_").concat(n)).style("opacity",0))}))}))}function Ce(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Te(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var De=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.index=n,this.callback=r,this._isActivate=!1}var t,n;return t=e,(n=[{key:"activate",value:function(e){this._isActivate||(this._isActivate=!0,this.el.classList.add("active"),this.callback(e))}},{key:"deactivate",value:function(){this._isActivate&&(this._isActivate=!1,this.el.classList.remove("active"))}}])&&Te(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),_e=n(52732),Oe=n.n(_e),Ae=n(89438);function je(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Re(e,t){var n=[];[".viz",".full-page-section > img",".full-page-section > video"].forEach((function(e){n=n.concat(Array.from(document.querySelectorAll(e)))})),(0,Ae.Z)(n,{stickyBitStickyOffset:40}),new(Oe())({elements_selector:".lazy",threshold:500}),Promise.all([Ie(e,t)]).then((function(e){var t,n;(function(e){var t=0,n=0,r=window.innerHeight,a=!1,o=0,c=[],i=[],l=[],s=document.querySelector(".article-reminder"),u=document.querySelector("header > .progress"),m=document.querySelector(".intro-section h1"),p=document.querySelectorAll(".viz-section");if(p.length!==e.length)throw new Error("The number of viz sections (".concat(p.length,") mismatch with the length of the first ")+"dimension of the callbacks array (".concat(e.length,"). Please, be sure that the two elements ")+"have the same size.");p.forEach((function(t,n){var r,a=function(e){if(Array.isArray(e))return Ce(e)}(r=t.querySelectorAll("section"))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return Ce(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ce(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(a.length!==e[n].length)throw new Error("The number of steps (".concat(a.length,") in the viz section #").concat(n+1," mismatch with the ")+"number of callbacks specified (".concat(e[n].length,') at the index "').concat(n,'". Please, be sure that the two ')+"elements have the same size.");c=c.concat(a.map((function(t,r){return new De(t,"".concat(n,"-").concat(r),e[n][r])}))),i=i.concat(i,t.querySelector(".viz > *"))}));var d=function(){var e=window.pageYOffset||document.documentElement.scrollTop;c.forEach((function(e){var a=e.el.getBoundingClientRect();r-a.top-n>0&&a.top+a.height-t>0?l.push(e):e.deactivate()}));var a=m.getBoundingClientRect().bottom<=0,i=s.classList.contains("visible");a&&!i?s.classList.add("visible"):!a&&i&&s.classList.remove("visible"),l.forEach((function(t,n){e>=o?n===l.length-1?t.activate("down"):t.deactivate():0===n?t.activate("up"):t.deactivate()})),f(),l=[],o=e},f=function(){var e=(document.body.scrollTop||document.documentElement.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100;u.style.width=e+"%"},v={initialize:function(){if(a)throw new Error("The scroller is already initialized.");return a=!0,window.addEventListener("scroll",d),window.addEventListener("resize",(function(){r=window.innerHeight,f()})),(window.pageYOffset||document.documentElement.scrollTop)>0&&d(),f(),v},offsetTop:function(e){if(void 0===e)return t;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return t=e,v},offsetBottom:function(e){if(void 0===e)return n;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return n=e,v}};return v})((t=e,n=1,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],c=!0,i=!1;try{for(n=n.call(e);!(c=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);c=!0);}catch(e){i=!0,a=e}finally{try{c||null==n.return||n.return()}finally{if(i)throw a}}return o}}(t,n)||function(e,t){if(e){if("string"==typeof e)return je(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?je(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]).offsetTop(40).offsetBottom(0).initialize()}))}document.querySelector("#root").innerHTML=r.E,b.gyn(a.google_config.localContentURL).then((function(e){b.gyn(a.google_config.localParamsURL).then((function(t){Re(e,t),document.querySelector("#footerContainer").innerHTML=b.Ys("#footerContent").node().innerHTML}))}))},40207:e=>{e.exports={google_config:{contentURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=0&single=true&output=csv",paramsURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=409950237&single=true&output=csv",localContentURL:"./data/structure/contentData.csv",localParamsURL:"./data/structure/paramsData.csv"}}}},e=>{var t=t=>e(e.s=t);e.O(0,[216],(()=>(t(28594),t(35666),t(86702)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,