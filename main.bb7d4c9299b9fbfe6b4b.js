(self.webpackChunkscrollytelling_template=self.webpackChunkscrollytelling_template||[]).push([[179],{62233:(e,t,n)=>{"use strict";var a=n(40207),r=n(67294);function o(e){var t=Array.from(String(e.optionData.authors).split(",")).map((function(t,n){var a=Array.from(String(e.optionData.authors).split(",")).length;return a>2?n===a-2?r.createElement("span",{key:n},r.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)," et "):n===a-1?r.createElement("span",{key:n},r.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)):r.createElement("span",{key:n},r.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t),", "):0===n?r.createElement("span",{key:n},r.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)," et "):r.createElement("span",{key:n},r.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t))})),n=r.createElement("section",{className:"intro-section ".concat(e.classes)},r.createElement("h1",null,e.optionData.title),r.createElement("address",null,r.createElement("div",{className:"authors"},"Par ",t),r.createElement("div",{className:"date"},e.optionData.date)),r.createElement("p",null,e.amorce));return e.background?r.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},n):n}var i=n(25935);function s(e){var t,n=String(e.classes).includes("citation");n&&(t={text:String(e.texts).split("/")[0],author:String(e.texts).split("/")[1]});var a,o=String(e.classes).includes("bigNumber");o&&(a={number:String(e.texts).split("/")[0],underText:String(e.texts).split("/")[1]});var s=e.visual,c=""!==s?"Photo"===e.visual?r.createElement("img",{key:"photoTextSection_".concat(e.id),id:"photoTextSection_".concat(e.id),src:"assets/img/675/".concat(e.filename),"data-srcset":"assets/img/2048/".concat(e.filename," 2048w, assets/img/990/").concat(e.filename," 990w, assets/img/675/").concat(e.filename," 675w, assets/img/1350/").concat(e.filename," 1350w, assets/img/100/").concat(e.filename," 100w, assets/img/495/").concat(e.filename," 495w, assets/img/1024/").concat(e.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(e.visuelclasses),style:{paddingBottom:"1rem"}}):"Video"===e.visual?r.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(e.visuelclasses),preload:"metadata",key:"videoTextSection_".concat(e.id),id:"videoTextSection_".concat(e.id)},r.createElement("source",{src:"assets/videos/".concat(e.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):r.createElement("div",null):r.createElement("div",null),l=r.createElement("section",{className:"text-section ".concat(e.classes)},n?r.createElement("blockquote",{className:"small"},r.createElement("div",null,r.createElement("p",null,r.createElement("b",null,(0,i.ZP)(t.text))),r.createElement("p",{className:"author"},t.author),r.createElement("div",{className:"symbol"}))):o?r.createElement("div",{className:"container-number"},r.createElement("div",{className:"numbers"},r.createElement("h2",null,a.number),r.createElement("small",null,a.underText))):r.createElement("div",null,s?c:r.createElement("div",null),String(e.texts).startsWith("<")?(0,i.ZP)(e.texts):r.createElement("p",null,(0,i.ZP)(e.texts))));return e.background?r.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},l):l}var c,l=n(45697),u=n.n(l),m=["title","src"];function p(){return p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},p.apply(this,arguments)}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function f(e){var t,n,a=e.title,o=e.src,i=function(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}(e,m),s=(0,r.useRef)(),c=(t=(0,r.useState)(500),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);i=!0);}catch(e){s=!0,r=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw r}}return o}}(t,n)||function(e,t){if(e){if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?d(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=c[0],u=c[1],f=(0,r.useCallback)((function(e){var t=e.data,n=void 0===t?{}:t;e.source===s.current.contentWindow&&"string"!=typeof n&&n["datawrapper-height"]}),[u,s]);return(0,r.useEffect)((function(){return window.addEventListener("message",f),function(){return window.removeEventListener("message",f)}}),[l,u,f]),r.createElement("iframe",p({ref:s,scrolling:"no",frameBorder:"0",width:"100%"},i,{title:a,src:o,height:l}))}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}f.propTypes={title:u().string.isRequired,src:u().string.isRequired,loading:u().oneOf(["eager","lazy"])};var h="intro-titre",y="pleine-page-titre",g="texte-classique",b="viz-section",E="centré",w="Photo",x="Video",S="Visualisation",k="iframe",T=(v(c={titre:"Titre",auteurs:"Auteurs",date:"Date"},"date","Date"),v(c,"urls","LienAuteurs"),v(c,"lienfichiersource","LienFichierSource"),c);function I(e){var t,n,a,o=r.createElement("section",{id:e.listID,className:e.classed},r.createElement("div",{className:"steps ".concat((t=e.steps,n=t.map((function(e,t){return e.stepclasses})),a=new Array(n.length),n.forEach((function(e,t){if(Array.isArray(e))e.forEach((function(e){for(var r=t;r<n.length;r++)n[r].includes(e)&&(a[r]=e)}));else if("string"==typeof e)for(var r=t;r<n.length;r++)n[r].includes(e)&&(a[r]=e)})),a.reduce((function(e,t){return e===t&&""!==e&&""!==t?e:""}))))},e.steps.map((function(e,t){var n,a=String(e.stepclasses).includes("citation");return a&&(n={text:String(e.text).split("/")[0],author:String(e.text).split("/")[1]}),r.createElement("section",{key:t,className:e.stepclasses},a?r.createElement("blockquote",{className:"small"},r.createElement("div",null,r.createElement("p",null,r.createElement("b",null,(0,i.ZP)(n.text))),r.createElement("p",{className:"author"},n.author),r.createElement("div",{className:"symbol"}))):String(e.text).startsWith("<")?(0,i.ZP)(e.text):r.createElement("p",null,e.text?(0,i.ZP)(e.text):""))}))),r.createElement("div",{className:"viz",id:"viz"},e.steps.map((function(t,n){return t.visual===w?r.createElement("img",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),src:"assets/img/675/".concat(t.filename),"data-srcset":"assets/img/2048/".concat(t.filename," 2048w, assets/img/990/").concat(t.filename," 990w, assets/img/675/").concat(t.filename," 675w, assets/img/1350/").concat(t.filename," 1350w, assets/img/100/").concat(t.filename," 100w, assets/img/495/").concat(t.filename," 495w, assets/img/1024/").concat(t.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(t.visuelclasses)}):t.visual===x?r.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(t.visuelclasses),preload:"metadata",key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n)},r.createElement("source",{src:"assets/videos/".concat(t.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):t.visual===k?r.createElement("div",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),className:"iframeContainer"},r.createElement(f,{title:"Mesures d'arsenic",src:"".concat(t.filename)})):t.visual===S?r.createElement("div",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),className:"iframeContainer ".concat(t.visuelclasses)}):void 0}))));return e.background?r.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},o):o}function A(e){var t=r.createElement("section",{className:"full-page-section ".concat(e.classes)},r.createElement("div",{className:"titleImage"},e.filename?"Photo"===e.visual?r.createElement("img",{key:"".concat(e.id),id:"".concat(e.id),src:"assets/img/675/".concat(e.filename),"data-srcset":"assets/img/2048/".concat(e.filename," 2048w, assets/img/990/").concat(e.filename," 990w, assets/img/675/").concat(e.filename," 675w, assets/img/1350/").concat(e.filename," 1350w, assets/img/100/").concat(e.filename," 100w, assets/img/495/").concat(e.filename," 495w, assets/img/1024/").concat(e.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(e.visuelclasses)}):"Video"===e.visual?r.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(e.visuelclasses),preload:"metadata",key:"".concat(e.id),id:"".concat(e.id)},r.createElement("source",{src:"assets/videos/".concat(e.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):r.createElement("div",null):r.createElement("div",null),e.filename?r.createElement("div",{className:"filter"}):r.createElement("div",null)),r.createElement("div",{className:"captionholder"},r.createElement("h2",{className:"caption ".concat(e.mainTitle.class)},e.mainTitle.text),e.subTitle?r.createElement("h3",{className:"caption ".concat(e.subTitle.class)},e.subTitle.text):r.createElement("div",null)));return e.background?r.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},t):t}n(93162);var D=n(36184);function N(e,t){var n={},a=[],r=j(t);return console.log("content Data",e),e.map((function(e,t){if(e.Section===h){var o=e.StepClasses,i=e.TEXTE,s=e.StyleFond;n[e.SectionID]={key:t,sectionType:h,optionData:r,amorce:i,background:s,classes:O(o),gameid:e.GameID}}else if(e.Section===g){var c=e.TEXTE,l=e.StepClasses,u=e.StyleFond;n[e.SectionID]={key:t,sectionType:g,texts:c,visual:e.VISUEL,filename:e.NomFichierSource,background:u,classes:O(l),visuelclasses:O(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===y){var m=e.TEXTE;P(e.TEXTE)&&(m=JSON.parse(e.TEXTE)),n[e.SectionID]={key:t,sectionType:y,texts:P(e.TEXTE)?m:{mainTitle:{class:"",text:m},subTitle:null},visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,classes:O(e.StepClasses),visuelclasses:O(e.VisuelClasses),gameid:e.GameID}}else if(e.Section===b){var p={attributs:e.Attributs,scrollType:e.Step,text:e.TEXTE,visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,visuelclasses:O(e.VisuelClasses),stepclasses:O(e.StepClasses),gameid:e.GameID};if(n.hasOwnProperty(e.SectionID)){var d=n[e.SectionID];d.push(p),n[e.SectionID]=d}else n[e.SectionID]=[p],a.push(e.SectionID)}})),a.map((function(e){var t=n[e],a=t[0].attributs===E?" full-page":"",r=t[0].background;n[e]={key:e,sectionType:b,listID:e,steps:t,classed:"viz-section".concat(a),mediaInfo:0,background:r}})),Object.values(n)}function C(e,t){var n=N(e,t),a=[];return n.map((function(e){if("viz-section"===e.sectionType){var t=[];e.steps.map((function(n,a){var r=function(){};if(""!==n.visual){var o=Array(e.steps.length).fill(null).map((function(e,t){return t})).filter((function(e){return e!==a})).map((function(t){return"#".concat(e.key,"_").concat(t)})).join(",");r=function(){D.Ys("#".concat(e.key,"_").concat(a)).transition().style("opacity",1).style("display",null),""!==o&&D.td_("".concat(o)).transition().style("opacity",0).style("display","none")}}else if(String(n.filename).startsWith("TAGID")){var i=String(n.filename).split("=")[1],s=parseInt(i.split("_")[1]),c=Array(e.steps.length).fill(null).map((function(e,t){return t})).filter((function(e){return e!==s})).map((function(t){return"#".concat(e.key,"_").concat(t)})).join(",");r=function(){D.Ys("#".concat(i)).transition().style("opacity",1).style("display",null),""!==c&&D.td_("".concat(c)).transition().style("opacity",0).style("display","none")}}t.push(r)})),a.push(t)}})),a}function P(e){try{JSON.parse(e)}catch(e){return!1}return!0}function O(e){return Array.from(e.split(";")).join(" ")}function j(e){return{title:e[0][T.titre],authors:e[0][T.auteurs],urls:e[0][T.urls],date:e[0][T.date]}}n(9208);var z=n(83731);function L(){return window.innerWidth<400}function _(){return window.innerWidth<=576}function R(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);i=!0);}catch(e){s=!0,r=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return B(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?B(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function q(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function V(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var U={token:"pk.eyJ1IjoibGVkZXZvaXIiLCJhIjoiY2p2bW81dHU2MWV1cTRhcXIzaXZqMGYxciJ9.WrIF8o69aR_TstDFu6Qyag",mapBounds:{max:[-165,30.72833,-25.23636,82.229434]},colors:["#F4CBC6","#F4A39A","#EE6A5E","#CE3727","#A22823","#751A1A","#410000"],clusterMaxZoom:11,clusterRadius:30,clusterMinPoints:5};z.accessToken=U.token;var Z=function(){function e(t,n,a,r,o){var i=!(arguments.length>5&&void 0!==arguments[5])||arguments[5],s=arguments.length>6&&void 0!==arguments[6]&&arguments[6];q(this,e),this.dataSourceObjects=a,this.constants=U,this.map=new z.Map({container:n,style:r,preserveDrawingBuffer:!0,center:o.center,zoom:o.zoom}),this.maxBounds=o,this.boundsList=this.dataSourceObjects.map((function(e){return e.coords})),this.extraBounds=this.dataSourceObjects.map((function(e){return e.extraCoords})),i&&(this.map.scrollZoom.disable(),this.map.dragPan.disable(),this.map.dragRotate.disable(),this.map.boxZoom.disable(),this.map.doubleClickZoom.disable()),s&&this.setupHandlers(),this.dataList=this.dataSourceObjects.map((function(e){return e.data}))}var t,n;return t=e,n=[{key:"updateBounds",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.maxBounds,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:L()?5:_()?15:20,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:100;this.map=this.map.fitBounds(e,{duration:n,padding:t})}},{key:"updateCoordsAndZoom",value:function(e){this.map.flyTo({center:e.center,zoom:e.zoom,speed:.7,curve:1,easing:function(e){return e}})}},{key:"viewBoundObj",value:function(e){this.updateCoordsAndZoom(this.boundsList[e])}},{key:"viewExtraBoundObj",value:function(e,t,n){var a=this.extraBounds[e];this.updateCoordsAndZoom(a[t])}},{key:"viewInitBounds",value:function(e){this.updateCoordsAndZoom(this.maxBounds)}},{key:"showSourceXItemY",value:function(e,t){this.updateCoordsAndZoom(this.dataList[e][t])}},{key:"initMapSourcesAndLayers",value:function(){var e=this;this.initialised||(this.initialised=!0,this.dataSourceObjects.map((function(t){e.map.addSource(t.sourceName,{type:t.sourceType,data:t.sourceData}),"fill"===t.layerType?e.map.addLayer({id:t.sourceName,type:t.layerType,source:t.sourceName,paint:{"fill-color":t.color,"fill-opacity":t.opacity}}):"circle"===t.layerType&&e.map.addLayer({id:t.sourceName,type:t.layerType,source:t.sourceName,paint:{"circle-color":["match",["get","statut"],"Recherches effectuées ou en cours","#ff561c","Phase préliminaire","#ffc734","#b7b7b7"],"circle-radius":5}})})))}},{key:"changeLayerPaint",value:function(e,t,n){this.map.setPaintProperty(e,t,n)}},{key:"setupHandlers",value:function(){var e=this;this.map.on("mouseover","pensionnatsSource",(function(t){e.map.getCanvas().style.cursor="pointer",e.drawPopup(t)})),this.map.on("mouseout","pensionnatsSource",(function(t){e.map.getCanvas().style.cursor="default",e.closePopup()})),this.map.on("click","pensionnatsSource",(function(t){t.preventDefault(),e.map.getCanvas().style.cursor="pointer",e.drawPopup(t)}))}},{key:"drawPopup",value:function(e){for(var t=e.features[0].geometry.coordinates.slice(),n=e.features[0].properties,a=R(n.ouverture.split("/"),3),r=a[0],o=a[1],i=a[2],s=R(n.fermeture.split("/"),3),c=s[0],l=s[1],u=s[2],m=[new Intl.DateTimeFormat("fr-CA",{dateStyle:"long"}).format(new Date(Date.UTC(i,o,r))),new Intl.DateTimeFormat("fr-CA",{dateStyle:"long"}).format(new Date(Date.UTC(u,l,c)))],p=m[0],d=m[1],f="\n      <h3>".concat(n.name,"</h3>\n      <h4>").concat(n.ville,", ").concat(n.province,"</h4>\n      <p>").concat(p," - ").concat(d,"</p>\n      <p>").concat(n.statut,"</p>\n    ");Math.abs(e.lngLat.lng-t[0])>180;)t[0]+=e.lngLat.lng>t[0]?360:-360;this.popup=(new z.Popup).setLngLat(t).setHTML(f).addTo(this.map)}},{key:"closePopup",value:function(){this.popup&&this.popup.remove()}},{key:"updateData",value:function(e,t){this.initialised||this.initMapSourcesAndLayers(),this.map.getSource(e).setData(t)}}],n&&V(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();n(6899);var M=n(20745);function X(e,t,n,a,r,o,i){try{var s=e[o](i),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(a,r)}function Y(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function i(e){X(o,a,r,i,s,"next",e)}function s(e){X(o,a,r,i,s,"throw",e)}i(void 0)}))}}function F(e){var t=(0,r.useCallback)(Y(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("starting game"),e.mapObj.viewExtraBoundObj(0,"zone1"),e.gameStart();case 3:case"end":return t.stop()}}),t)}))));return r.createElement("div",{className:"gameBox"},r.createElement("div",{className:"introBox"},e.introElem),r.createElement("div",{className:"userBox"},r.createElement("div",{className:"startbutton",onClick:t},r.createElement("p",null,"Commencer"))))}function H(e,t,n,a,r,o,i){try{var s=e[o](i),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(a,r)}function W(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function i(e){H(o,a,r,i,s,"next",e)}function s(e){H(o,a,r,i,s,"throw",e)}i(void 0)}))}}function J(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function G(e){var t,n,a=(t=(0,r.useState)([]),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);i=!0);}catch(e){s=!0,r=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw r}}return o}}(t,n)||function(e,t){if(e){if("string"==typeof e)return J(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?J(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[0],i=a[1];(0,r.useEffect)((function(){var t=String(e.curPrompt.Choix_textes).split(";");console.log("choices : ",t),i(t)}),[e]);var s=(0,r.useCallback)(W(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:console.log("next prompt!",e.curIndex+1),e.changePrompt(e.curIndex+1);case 2:case"end":return t.stop()}}),t)})))),c=(0,r.useCallback)(W(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e.curIndex>0&&(console.log("previous prompt!",e.curIndex-1),e.changePrompt(e.curIndex-1));case 1:case"end":return t.stop()}}),t)}))));return r.createElement("div",{className:"gameBox"},r.createElement("div",{className:"promptBox"},r.createElement("div",{className:"header"},r.createElement("div",{className:"surtitre"},r.createElement("h3",null,e.curPrompt.Sujet)),r.createElement("div",{className:"question"},r.createElement("p",null,e.curPrompt.Texte))),r.createElement("div",{className:"choices"},r.createElement("div",{className:"column"},r.createElement("div",{className:"actionbutton",onClick:c},r.createElement("div",{className:"butn"},r.createElement("p",null,"Previous")))),r.createElement("div",{className:"column"},o.map((function(e,t){return console.log("returning choice: ",e),r.createElement("div",{className:"actionbutton",key:t,onClick:s},r.createElement("div",{className:"butn"},r.createElement("p",null,e)))}))))))}function $(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);i=!0);}catch(e){s=!0,r=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Q(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Q(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Q(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function K(e){var t=$((0,r.useState)("IDLE"),2),n=t[0],a=t[1],o=$((0,r.useState)(0),2),i=o[0],s=o[1];(0,r.useEffect)((function(){console.log("checking props mapObj:",e.mapObj)}),[]),(0,r.useEffect)((function(){console.log("game ",n)}),[n]),(0,r.useEffect)((function(){c(i)}),[i]);var c=function(t){console.log("current game prompt:",e.gameData.filter((function(e){return String(e.Index)===String(t)})))};return"IDLE"===n?r.createElement(F,{introElem:e.introElem,mapObj:e.mapObj,gameStart:function(){a("STARTED"),s(0)}}):"END"===n?r.createElement("div",null):r.createElement(G,{curIndex:i,curPrompt:e.gameData[i],changePrompt:s})}function ee(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}n(97762);var te=function(){function e(t,n,a,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t;var i=this.container.append("div").classed("gameScreen",!0);this.engineRoot=M.createRoot(i.node()),this.optionData=n,this.mapObj=r,this.amorce=a.TEXTE,this.gameData=o,console.log("game Data is : ",this.gameData),this.initEngine()}var t,n;return t=e,(n=[{key:"initEngine",value:function(){var e=r.createElement(o,{key:"gameIntro",sectionType:h,optionData:this.optionData,amorce:this.amorce,background:null,classes:""});this.engineRoot.render(r.createElement(K,{introElem:e,mapObj:this.mapObj,gameStatus:this.gameStatus,gameData:this.gameData}))}}])&&ee(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function ne(e,t,n,a,r,o,i){try{var s=e[o](i),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(a,r)}function ae(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var o=e.apply(t,n);function i(e){ne(o,a,r,i,s,"next",e)}function s(e){ne(o,a,r,i,s,"throw",e)}i(void 0)}))}}var re="mapbox://styles/ledevoir/clal9zlfk004a15qohhr7r495";function oe(e,t){return ie.apply(this,arguments)}function ie(){return(ie=ae(regeneratorRuntime.mark((function e(t,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",D.gyn("https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=1864947892&single=true&output=csv").then((function(e){return D.AVB("./data/filtered_accidents.geojson").then((function(a){var r=[{sourceName:"mapSource",sourceType:"geojson",sourceData:a,layerType:"circle",color:"#f58366",opacity:.8,coords:{center:[-70.566,52.488],zoom:4},extraCoords:{zone1:{center:[-70.566,52.488],zoom:5}}}],o=D.Ys(".map-area");o.append("div").classed("map",!0).attr("id","qcmap");var i=new Z(D.Ys("#qcmap"),"qcmap",r,re,{center:[-70.566,52.488],zoom:4});return i.map.on("load",(function(){D.Ys("#qcmap").select(".mapbox-improve-map").text(""),i.initMapSourcesAndLayers(),D.Ys("#qcmap").select(".loading").style("display","none"),D.Ys("#qcmap").select(".options-bar").classed("disabled",!1)})),new te(o,j(n),t[0],i,e),se(t,n),C(t,n),[[function(){}]]}))})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function se(e,t){var n=N(e,t);console.log("checking structure:",n),n.map((function(e){"viz-section"===e.sectionType&&e.steps.map((function(t,n){""!==t.visual&&(0===n?D.Ys("#".concat(e.key,"_").concat(n)).style("opacity",1):D.Ys("#".concat(e.key,"_").concat(n)).style("opacity",0))}))}))}function ce(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function le(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var ue=function(){function e(t,n,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.index=n,this.callback=a,this._isActivate=!1}var t,n;return t=e,(n=[{key:"activate",value:function(e){this._isActivate||(this._isActivate=!0,this.el.classList.add("active"),this.callback(e))}},{key:"deactivate",value:function(){this._isActivate&&(this._isActivate=!1,this.el.classList.remove("active"))}}])&&le(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),me=n(52732),pe=n.n(me),de=n(89438);function fe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function ve(e,t){var n=[];[".viz",".full-page-section > img",".full-page-section > video"].forEach((function(e){n=n.concat(Array.from(document.querySelectorAll(e)))})),(0,de.Z)(n,{stickyBitStickyOffset:40}),new(pe())({elements_selector:".lazy",threshold:500}),Promise.all([oe(e,t)]).then((function(e){var t,n;(function(e){var t=0,n=0,a=window.innerHeight,r=!1,o=0,i=[],s=[],c=[],l=document.querySelector(".article-reminder"),u=document.querySelector("header > .progress"),m=document.querySelector(".intro-section h1"),p=document.querySelectorAll(".viz-section");if(p.length!==e.length)throw new Error("The number of viz sections (".concat(p.length,") mismatch with the length of the first ")+"dimension of the callbacks array (".concat(e.length,"). Please, be sure that the two elements ")+"have the same size.");p.forEach((function(t,n){var a,r=function(e){if(Array.isArray(e))return ce(e)}(a=t.querySelectorAll("section"))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(a)||function(e,t){if(e){if("string"==typeof e)return ce(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ce(e,t):void 0}}(a)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(r.length!==e[n].length)throw new Error("The number of steps (".concat(r.length,") in the viz section #").concat(n+1," mismatch with the ")+"number of callbacks specified (".concat(e[n].length,') at the index "').concat(n,'". Please, be sure that the two ')+"elements have the same size.");i=i.concat(r.map((function(t,a){return new ue(t,"".concat(n,"-").concat(a),e[n][a])}))),s=s.concat(s,t.querySelector(".viz > *"))}));var d=function(){var e=window.pageYOffset||document.documentElement.scrollTop;i.forEach((function(e){var r=e.el.getBoundingClientRect();a-r.top-n>0&&r.top+r.height-t>0?c.push(e):e.deactivate()}));var r=m.getBoundingClientRect().bottom<=0,s=l.classList.contains("visible");r&&!s?l.classList.add("visible"):!r&&s&&l.classList.remove("visible"),c.forEach((function(t,n){e>=o?n===c.length-1?t.activate("down"):t.deactivate():0===n?t.activate("up"):t.deactivate()})),f(),c=[],o=e},f=function(){var e=(document.body.scrollTop||document.documentElement.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100;u.style.width=e+"%"},v={initialize:function(){if(r)throw new Error("The scroller is already initialized.");return r=!0,window.addEventListener("scroll",d),window.addEventListener("resize",(function(){a=window.innerHeight,f()})),(window.pageYOffset||document.documentElement.scrollTop)>0&&d(),f(),v},offsetTop:function(e){if(void 0===e)return t;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return t=e,v},offsetBottom:function(e){if(void 0===e)return n;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return n=e,v}};return v})((t=e,n=1,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(a=n.next()).done)&&(o.push(a.value),!t||o.length!==t);i=!0);}catch(e){s=!0,r=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw r}}return o}}(t,n)||function(e,t){if(e){if("string"==typeof e)return fe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?fe(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]).offsetTop(40).offsetBottom(0).initialize()}))}function he(e){return e.rendered&&(0,r.useEffect)((function(){ve(e.contentData,e.paramsData)}),[]),t=N(e.contentData,e.paramsData),n={},Object.keys(t).map((function(e,a){var c=t[e];c.sectionType===h?n[e]=r.createElement(o,{key:c.key,sectionType:c.sectionType,optionData:c.optionData,amorce:(0,i.ZP)(c.amorce),background:c.background,classes:c.classes}):c.sectionType===g?n[e]=r.createElement(s,{key:c.key,id:c.key,sectionType:c.sectionType,texts:c.texts,background:c.background,classes:c.classes,visuelclasses:c.visuelclasses,visual:c.visual,filename:c.filename}):c.sectionType===y?n[e]=r.createElement(A,{key:c.key,id:c.key,sectionType:c.sectionType,background:c.background,classes:c.classes,visuelclasses:c.visuelclasses,visual:c.visual,mainTitle:c.texts.mainTitle,subTitle:c.texts.subTitle,filename:c.filename}):c.sectionType===b&&(n[e]=r.createElement(I,{key:c.key,listID:c.listID,steps:c.steps,classed:c.classed,mediaInfo:c.mediaInfo,background:c.background}))})),Object.values(n);var t,n}Promise.all([Promise.resolve().then(n.t.bind(n,20745,19)),Promise.resolve().then(n.t.bind(n,97762,19)),Promise.resolve().then(n.t.bind(n,67294,19))]).then((function(e){var t=e[0],n=(e[1],e[2]);D.Ys(".pull-right").insert("li","li").html("<p class='not-published'>Ne pas publier</p>"),D.gyn(a.google_config.contentURL).then((function(e){D.gyn(a.google_config.paramsURL).then((function(a){t.createRoot(document.getElementById("root")).render(n.createElement(he,{contentData:e,paramsData:a,rendered:!0})),document.querySelector("#footerContainer").innerHTML=D.Ys("#footerContent").node().innerHTML}))}))}))},40207:e=>{e.exports={google_config:{contentURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=0&single=true&output=csv",paramsURL:"https://docs.google.com/spreadsheets/d/e/2PACX-1vSEywJE0VUgy3Nsq3Tg_oh-Vs633TSimdIHfkXTyz9BbEtWNVgurd1Tou-Q5anvdOiw3coCFkDCiSYq/pub?gid=409950237&single=true&output=csv",localContentURL:"./data/structure/contentData.csv",localParamsURL:"./data/structure/paramsData.csv"}}}},e=>{var t=t=>e(e.s=t);e.O(0,[216],(()=>(t(28594),t(35666),t(62233)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,